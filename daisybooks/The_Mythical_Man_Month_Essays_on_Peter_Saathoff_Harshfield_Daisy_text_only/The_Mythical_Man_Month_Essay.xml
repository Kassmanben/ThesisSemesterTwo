<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="daisy.css" media="screen" ?><?xml-stylesheet type="text/xsl" href="daisyTransform.xsl" media="screen" ?><!DOCTYPE dtbook SYSTEM "dtbook-2005-3.dtd"><dtbook xmlns="http://www.daisy.org/z3986/2005/dtbook/" xml:lang="eng" version="2005-3">
  <head>
    <meta name="dtb:uid" content="9780201835953" />
    <meta name="dc:Identifier" content="9780201835953" />
    <meta name="dc:Title" content="The Mythical Man-Month Essays on Software Engineering Anniversary Edition" />
    <meta name="dc:Creator" content="Frederick P. Brooks" />
    <meta name="dc:Description" content="Few books on software project management have been as influential and timeless as The Mythical Man-Month.  With a blend of software engineering facts and thought-provoking opinions, Fred Brooks offers insight for anyone managing complex projects.  These essays draw from his experience as project manager for the IBM System/360 computer family and then for OS/360, its massive software system.  Now, 20 years after the initial publication of his book, Brooks has revisited his original ideas and added new thoughts and advice, both for readers already familiar with his work and for readers discovering it for the first time.    The added chapters contain (1) a crisp condensation of all the propositions asserted in the original book, including Brooks' central argument in The Mythical Man-Month: that large programming projects suffer management problems different from small ones due to the division of labor that the conceptual integrity of the product is therefore critical; and that it is difficult but possible to achieve this unity; (2) Brooks' view of these propositions a generation later; (3) a reprint of his classic 1986 paper &quot;No Silver Bullet&quot;; and (4) today's thoughts on the 1986 assertion, &quot;There will be no silver bullet within ten years. &quot;" />
    <meta name="dc:Language" content="en" />
    <meta name="dc:Publisher" content="Bookshare" />
    <meta name="dc:Format" content="ANSI/NISO Z39.86-2005" />
  </head>
  <book id="book_73158669525">
    <frontmatter id="frontmatter_000001">
      <doctitle id="doctitle_000001">The Mythical Man-Month Essays on Software Engineering Anniversary Edition</doctitle>
      <docauthor id="docauthor_000001">Frederick P. Brooks</docauthor>
      <level1 id="bookshare_note">
  <h1 id="bks_notice_001" smilref="The_Mythical_Man_Month_Essay00001.smil#bks_notice_001">NOTICE</h1>
  <p id="COPYRIGHT_LEGALESE_0">This accessible media has been made available to people with bona fide disabilities that affect reading.  This
      notice tells you about restrictions on the use of this accessible media, which could be a book, a periodical, or other content.</p>
  <level2 id="COPYRIGHT_LEGALESE_1">
    <h2 id="COPYRIGHT_LEGALESE_2">Copyright Notice</h2>
    <p id="COPYRIGHT_LEGALESE_3"><strong id="COPYRIGHT_LEGALESE_4">Title:</strong> <span class="text" id="COPYRIGHT_LEGALESE_5">The Mythical Man-Month Essays on Software Engineering Anniversary Edition</span></p>
    <p id="COPYRIGHT_LEGALESE_6"><strong id="COPYRIGHT_LEGALESE_7">Author:</strong> <span class="text" id="COPYRIGHT_LEGALESE_8">Frederick P. Brooks</span></p>
    <p id="COPYRIGHT_LEGALESE_9"><strong id="COPYRIGHT_LEGALESE_10">Copyright</strong> <span class="text" id="COPYRIGHT_LEGALESE_11">1995 by Addison-Wesley Publishing Company, Inc.</span></p>
    <p id="COPYRIGHT_LEGALESE_12">This notice is not part of the copyrighted work, which begins below after the phrase "Begin Content".</p>
    <p id="COPYRIGHT_LEGALESE_13">Bookshare distributes this accessible media under restrictions set forth either in copyright law or in an
        agreement with the copyright owner.  If you are not a person with a print disability, or an agency serving
        people with print disabilities, you should not use this accessible media and should destroy this content.  You
        are not allowed to redistribute content derived from this accessible media to anybody else, with one exception:
        we allow hardcopy Braille books prepared from Accessible Media to be provided to other blind people.</p>
    <p id="COPYRIGHT_LEGALESE_14">Access to accessible media through Bookshare is a valuable right and privilege.  Protect this access for the
        print disabled community by complying with these restrictions!</p>
    <p id="COPYRIGHT_LEGALESE_15">You, your parents, or your school (or agency) signed a Bookshare agreement.  For the full text of the current
        version of the Member Agreements, please visit www.bookshare.org/Agreements.  This information in this accessible
        media file does not in any way change the terms of your Agreement with Bookshare.</p>
  </level2>
  <level2 id="COPYRIGHT_LEGALESE_16">
    <h2 id="COPYRIGHT_LEGALESE_17">Limitation of Liability; Indemnity by User</h2>
    <p id="COPYRIGHT_LEGALESE_18">Most authors and publishers do not have control over the content available through Bookshare.  By downloading and
        using this material, you agree that neither Bookshare nor the authors or original publishers of the materials
        shall be financially responsible for any loss or damage to you or any third parties caused by the failure or
        malfunction of the Bookshare Web Site (www.bookshare.org) or because of any inaccuracy or lack of completeness
        of any content that you download from the Web Site.</p>
    <p id="COPYRIGHT_LEGALESE_19">BOOKSHARE, AND THE AUTHORS, PUBLISHERS AND COPYRIGHT OWNERS OF THE MATERIALS, SHALL NOT IN ANY CASE BE LIABLE FOR
        DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES, WHETHER BASED ON CONTRACT, TORT OR ANY OTHER
        LEGAL THEORY, IN CONNECTION WITH OR ARISING OUT OF THE FURNISHING OF CONTENT, THE FUNCTIONING OF THE WEB SITE,
        OR ANY OTHER ASPECT OF YOUR USE OF THE WEB SITE AND THE CONTENTS PROVIDED HEREUNDER.</p>
    <p id="COPYRIGHT_LEGALESE_20">You agree to indemnify and hold Bookshare and Benetech, the Web Site provider, harmless from any liability,
        loss, cost, damage or expense, including reasonable attorney's fees, that result from any claim made by any
        author, publisher or copyright owner that you, or any one acquiring copies of copyrighted materials downloaded
        from the Web Site through you, is not print disabled or otherwise entitled to download and use the digital
        materials from the Bookshare Web Site.  This indemnity includes any claims arising out of any breach of your
        obligations under your Member Agreement, whether by reason of misuse, negligence or otherwise.</p>
  </level2>
  <level2 id="COPYRIGHT_LEGALESE_21">
    <h2 id="COPYRIGHT_LEGALESE_22">Permitted Use; Limited Waiver of Privacy Principles and Laws</h2>
    <p id="COPYRIGHT_LEGALESE_23">You are permitted under this restricted license to use this digital copy for your own personal use.  However,
        any further reproduction, distribution, or any commercial usage requires the express, prior consent of the
        copyright holder.</p>
    <p id="COPYRIGHT_LEGALESE_24">This material contains digital watermarks and fingerprints designed to identify this material as a Bookshare
        digital material that was specifically downloaded by you.  It is generally illegal to delete or modify these
        watermarks and fingerprints, as well as being in violation of the terms of your Member Agreement.  Your
        Member Agreement expressly authorizes us to include these security devices, solely for this use, as an express
        exception to current and future privacy laws relating to protection of personal information data.  Should any
        future privacy law or regulation preclude the use of this personal data for purposes of tracking the downloading
        and use of these materials and enforcing the limitations of relevant copyright law or the Member Agreement,
        your right to use these materials will terminate on the effective date of any such law or regulation.</p>
    <p id="COPYRIGHT_LEGALESE_25">This material was downloaded by Peter Saathoff-Harshfield and is digitally fingerprinted in the manner described above.</p>
  </level2>
  <level2 id="COPYRIGHT_LEGALESE_26">
    <h2 id="COPYRIGHT_LEGALESE_27">Book Quality</h2>
    <p id="COPYRIGHT_LEGALESE_28">Bookshare is interested in improving book quality over time, if you can help us by providing any book quality
        feedback, we'll work hard to make those changes and republish the books.</p>
    <list type="ul" id="COPYRIGHT_LEGALESE_29">
      <li id="COPYRIGHT_LEGALESE_30"><a href="http://www.bookshare.org/bookQualityFeedback?titleInstanceId=1632666" external="true" id="COPYRIGHT_LEGALESE_31">Report book quality issue</a></li>
      <li id="COPYRIGHT_LEGALESE_32"><a href="http://www.bookshare.org/bookQualityFeedback" external="true" id="COPYRIGHT_LEGALESE_33">See all reported book quality issues</a></li>
    </list>
  </level2>
  <p id="COPYRIGHT_LEGALESE_34">BEGIN CONTENT</p>
</level1>
      <level1 id="level1_000001">
        <pagenum page="front" id="pi" smilref="The_Mythical_Man_Month_Essay00001.smil#pi">i</pagenum>
        <p xml:space="preserve" id="p_000001"><strong id="strong_000001" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000001">ABOUT THE AUTHOR</strong></p>
        <p xml:space="preserve" id="p_000002" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000002">Frederick P. Brooks, Jr., is Kenan Professor of Computer Science at the University of North Carolina at Chapel Hill. He is best known as the "father of the IBM System/360," having served as project manager for its development and later as manager of the Operating System/360 software project during its design phase. For this work he, Bob Evans, and Erich Bloch were awarded the National Medal of Technology in 1985. Earlier, he was an architect of the IBM Stretch and Harvest computers.</p>
        <p xml:space="preserve" id="p_000003" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000003">At Chapel Hill, Dr. Brooks founded the Department of Computer Science and chaired it from 1964 through 1984. He has served on the National Science Board and the Defense Science Board. His current teaching and research is in computer architecture, molecular graphics, and virtual environments.</p>
        <p xml:space="preserve" id="p_000004" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000004">[Image: Photo credit: © Jerry Markatos.]</p>
        <pagenum page="front" id="pii" smilref="The_Mythical_Man_Month_Essay00001.smil#pii">ii</pagenum>
        <p xml:space="preserve" id="p_000005" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000005">[Blank Page]</p>
        <pagenum page="front" id="piii" smilref="The_Mythical_Man_Month_Essay00001.smil#piii">iii</pagenum>
        <p xml:space="preserve" id="p_000006"><strong id="strong_000002"><em id="em_000001" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000001">The Mythical Man-Month Essays on Software Engineering Anniversary Edition</em></strong></p>
        <p xml:space="preserve" id="p_000007"><strong id="strong_000003" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000003">Frederick P. Brooks, Jr.</strong></p>
        <p xml:space="preserve" id="p_000008"><em id="em_000002" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000002">University of North Carolina at Chapel Hill</em></p>
        <p xml:space="preserve" id="p_000009"><strong id="strong_000004" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000004">*</strong></p>
        <p xml:space="preserve" id="p_000010"><strong id="strong_000005" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000005">ADDISON-WESLEY PUBLISHING COMPANY</strong></p>
        <p xml:space="preserve" id="p_000011"><em id="em_000003" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000003">Reading, Massachusetts </em><span class="text" id="span_000001" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000001">* </span><em id="em_000004" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000004">Menlo Park, California </em><span class="text" id="span_000002" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000002">* </span><em id="em_000005" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000005">New York Don Mills, Ontario * Wokingham, England </em><span class="text" id="span_000003" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000003">* </span><em id="em_000006" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000006">Amsterdan * Bonn </em><span class="text" id="span_000004" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000004">* </span><em id="em_000007" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000007">Sydney Singapore * Tokyo </em><span class="text" id="span_000005" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000005">* </span><em id="em_000008" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000008">Madrid </em><span class="text" id="span_000006" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000006">* </span><em id="em_000009" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000009">San Juan * Milan </em><span class="text" id="span_000007" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000007">* </span><em id="em_000010" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000010">Paris</em></p>
        <pagenum page="front" id="piv" smilref="The_Mythical_Man_Month_Essay00001.smil#piv">iv</pagenum>
        <p xml:space="preserve" id="p_000012" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000012">Cover drawing: C. R. Knight, Mural of the La Brea Tar Pits. Courtesy of the George C. Page Museum of La Brea Discoveries, The Natural History Museum of Los Angeles County.</p>
        <p xml:space="preserve" id="p_000013" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000013">The essay entitled, No Silver Bullet, is from Information Processing 1986, the Proceedings of the IFIP Tenth World Computing Conference, edited by H.-J. Kugler, 1986, pages 1069-1076. Reprinted with the kind permission of IFIP and Elsevier Science B.V., Amsterdam, The Netherlands.</p>
        <p xml:space="preserve" id="p_000014"><strong id="strong_000006" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000006">Library of Congress Cataloging-in-Publication Data</strong></p>
        <p xml:space="preserve" id="p_000015" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000015">Brooks, Frederick P., Jr. (Frederick Phillips)</p>
        <p xml:space="preserve" id="p_000016" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000016">The mythical man-month: essays on software engineering / Frederick P. Brooks, Jr. -- Anniversary ed.</p>
        <p xml:space="preserve" id="p_000017" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000017">p. cm.</p>
        <p xml:space="preserve" id="p_000018" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000018">Includes bibliographical references and index.</p>
        <p xml:space="preserve" id="p_000019" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000019">ISBN 0-201-83595-9</p>
        <p xml:space="preserve" id="p_000020" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000020">1. Software engineering. I. Title.</p>
        <p xml:space="preserve" id="p_000021" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000021">QA76.758.B75 1995</p>
        <p xml:space="preserve" id="p_000022" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000022">005.1'068--dc20</p>
        <p xml:space="preserve" id="p_000023" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000023">94-36653</p>
        <p xml:space="preserve" id="p_000024"><strong id="strong_000007" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000007">CIP</strong></p>
        <p xml:space="preserve" id="p_000025" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000025">Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and Addison-Wesley was aware of a trademark claim, the designations have been printed in initial caps or all caps.</p>
        <p xml:space="preserve" id="p_000026" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000026">Reprinted with corrections October, 1995</p>
        <p xml:space="preserve" id="p_000027" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000027">Copyright © 1995 by Addison-Wesley Publishing Company, Inc.</p>
        <p xml:space="preserve" id="p_000028" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000028">All rights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted in any form or by any means, electronic, mechanical, photocopying, recording, or otherwise, without prior written permission of the publisher and author.</p>
        <p xml:space="preserve" id="p_000029" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000029">Printed in the United States of America.</p>
        <p xml:space="preserve" id="p_000030" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000030">3 4 5 6 7 8 9 10--MA--989796</p>
        <pagenum page="front" id="pv" smilref="The_Mythical_Man_Month_Essay00001.smil#pv">v</pagenum>
        <p xml:space="preserve" id="p_000031"><strong id="strong_000008" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000008">Dedication of the 1975 edition</strong></p>
        <p xml:space="preserve" id="p_000032" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000032">To two who especially enriched my IBM years:</p>
        <p xml:space="preserve" id="p_000033" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000033">Thomas J. Watson, Jr.,</p>
        <p xml:space="preserve" id="p_000034" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000034">whose deep concern for people still permeates his company,</p>
        <p xml:space="preserve" id="p_000035" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000035">and</p>
        <p xml:space="preserve" id="p_000036" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000036">Bob O. Evans,</p>
        <p xml:space="preserve" id="p_000037" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000037">whose bold leadership turned work into adventure.</p>
        <p xml:space="preserve" id="p_000038"><strong id="strong_000009" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000009">Dedication of the 1995 edition</strong></p>
        <p xml:space="preserve" id="p_000039" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000039">To Nancy,</p>
        <p xml:space="preserve" id="p_000040" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000040">God's gift to me.</p>
        <pagenum page="front" id="pvi" smilref="The_Mythical_Man_Month_Essay00001.smil#pvi">vi</pagenum>
        <p xml:space="preserve" id="p_000041" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000041">[Blank Page]</p>
        <pagenum page="front" id="pvii" smilref="The_Mythical_Man_Month_Essay00001.smil#pvii">vii</pagenum>
        <level2 id="level2_000001">
          <h2 xml:space="preserve" id="h2_000001"><strong id="strong_000010"><em id="em_000011" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000011">Preface to the 20th Anniversary Edition</em></strong></h2>
          <p xml:space="preserve" id="p_000042"><span class="text" id="span_000008" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000008">To my surprise and delight, </span><em id="em_000012" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000012">The Mythical Man-Month </em><span class="text" id="span_000009" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000009">continues to be popular after 20 years. Over 250,000 copies are in print. People often ask which of the opinions and recommendations set forth in 1975 I still hold, and which have changed, and how. Whereas I have from time to time addressed that question in lectures, I have long wanted to essay it in writing.</span></p>
          <p xml:space="preserve" id="p_000043" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000043">Peter Gordon, now a Publishing Partner at Addison-Wesley, has been working with me patiently and helpfully since 1980. He proposed that we prepare an Anniversary Edition. We decided not to revise the original, but to reprint it untouched (except for trivial corrections) and to augment it with more current thoughts.</p>
          <p xml:space="preserve" id="p_000044"><span class="text" id="span_000010" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000010">Chapter 16 reprints "No Silver Bullet: Essence and Accidents of Software Engineering," a 1986 IFIPS paper that grew out of my experience chairing a Defense Science Board study on military software. My coauthors of that study, and our executive secretary, Robert L. Patrick, were invaluable in bringing me back into touch with real-world large software projects. The paper was reprinted in 1987 in the IEEE </span><em id="em_000013" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000013">Computer </em><span class="text" id="span_000011" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000011">magazine, which gave it wide circulation.</span></p>
          <p xml:space="preserve" id="p_000045" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000045">"No Silver Bullet" proved provocative. It predicted that a decade would not see any programming technique that would by itself bring an order-of-magnitude improvement in software productivity. The decade has a year to run; my prediction seems safe. "NSB" has stimulated more and more spirited discussion</p>
          <p xml:space="preserve" id="p_000046"><strong id="strong_000011" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000011">vii</strong></p>
          <pagenum page="front" id="pviii" smilref="The_Mythical_Man_Month_Essay00001.smil#pviii">viii</pagenum>
          <p xml:space="preserve" id="p_000047"><strong id="strong_000012" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000012">viii</strong></p>
          <p xml:space="preserve" id="p_000048"><span class="text" id="span_000012" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000012">in the literature than has </span><em id="em_000014" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000014">The Mythical Man-Month. </em><span class="text" id="span_000013" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000013">Chapter 17, therefore, comments on some of the published critique and updates the opinions set forth in 1986.</span></p>
          <p xml:space="preserve" id="p_000049"><span class="text" id="span_000014" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000014">In preparing my retrospective and update of </span><em id="em_000015" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000015">The Mythical Man-Month, </em><span class="text" id="span_000015" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000015">I was struck by how few of the propositions asserted in it have been critiqued, proven, or disproven by ongoing software engineering research and experience. It proved useful to me now to catalog those propositions in raw form, stripped of supporting arguments and data. In hopes that these bald statements will invite arguments and facts to prove, disprove, update, or refine those propositions, I have included this outline as Chapter 18.</span></p>
          <p xml:space="preserve" id="p_000050" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000050">Chapter 19 is the updating essay itself. The reader should be warned that the new opinions are not nearly so well informed by experience in the trenches as the original book was. I have been at work in a university, not industry, and on small-scale projects, not large ones. Since 1986, I have only taught software engineering, not done research in it at all. My research has rather been on virtual environments and their applications.</p>
          <p xml:space="preserve" id="p_000051" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000051">In preparing this retrospective, I have sought the current views of friends who are indeed at work in software engineering. For a wonderful willingness to share views, to comment thoughtfully on drafts, and to re-educate me, I am indebted to Barry Boehm, Ken Brooks, Dick Case, James Coggins, Tom DeMarco, Jim McCarthy, David Pamas, Earl Wheeler, and Edward Yourdon. Fay Ward has superbly handled the technical production of the new chapters.</p>
          <p xml:space="preserve" id="p_000052"><span class="text" id="span_000016" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000016">I thank Gordon Bell, Bruce Buchanan, Rick Hayes-Roth, my colleagues on the Defense Science Board Task Force on Military Software, and, most especially, David Parnas for their insights and stimulating ideas for, and Rebekah Bierly for technical production of, the paper printed here as Chapter 16. Analyzing the software problem into the categories of </span><em id="em_000016" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000016">essence </em><span class="text" id="span_000017" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000017">and </span><em id="em_000017" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000017">accident </em><span class="text" id="span_000018" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000018">was inspired by Nancy Greenwood Brooks, who used such analysis in a paper on Suzuki violin pedagogy.</span></p>
          <pagenum page="front" id="pix" smilref="The_Mythical_Man_Month_Essay00001.smil#pix">ix</pagenum>
          <p xml:space="preserve" id="p_000053"><strong id="strong_000013" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000013">ix</strong></p>
          <p xml:space="preserve" id="p_000054" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000054">Addison-Wesley's house custom did not permit me to acknowledge in the preface to the 1975 edition the key roles played by their staff. Two persons' contributions should be especially cited: Norman Stanton, then Executive Editor, and Herbert Boes, then Art Director. Boes developed the elegant style, which one reviewer especially cited: "wide margins, [and] imaginative use of typeface and layout." More important, he also made the crucial recommendation that every chapter have an opening picture. (I had only the Tar Pit and Reims Cathedral at the time.) Finding the pictures occasioned an extra year's work for me, but I am eternally grateful for the counsel.</p>
          <p xml:space="preserve" id="p_000055"><em id="em_000018" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000018">Soli Deo gloria</em><span class="text" id="span_000019" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000019">--To God alone be glory.</span></p>
          <p xml:space="preserve" id="p_000056"><em id="em_000019" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000019">Chapel Hill, N.C.</em></p>
          <p xml:space="preserve" id="p_000057" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000057">F. P. B., Jr.</p>
          <p xml:space="preserve" id="p_000058"><em id="em_000020" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000020">March 1995</em></p>
          <pagenum page="front" id="px" smilref="The_Mythical_Man_Month_Essay00001.smil#px">x</pagenum>
        </level2>
        <level2 id="level2_000002">
          <h2 xml:space="preserve" id="h2_000002"><strong id="strong_000014"><em id="em_000021" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000021">Preface to the First Edition</em></strong></h2>
          <p xml:space="preserve" id="p_000059" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000059">In many ways, managing a large computer programming project is like managing any other large undertaking--in more ways than most programmers believe. But in many other ways it is different--in more ways than most professional managers expect.</p>
          <p xml:space="preserve" id="p_000060" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000060">The lore of the field is accumulating. There have been several conferences, sessions at AFIPS conferences, some books, and papers. But it is by no means yet in shape for any systematic textbook treatment. It seems appropriate, however, to offer this little book, reflecting essentially a personal view.</p>
          <p xml:space="preserve" id="p_000061" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000061">Although I originally grew up in the programming side of computer science, I was involved chiefly in hardware architecture during the years (1956-1963) that the autonomous control program and the high-level language compiler were developed. When in 1964 I became manager of Operating System/360, I found a programming world quite changed by the progress of the previous few years.</p>
          <p xml:space="preserve" id="p_000062" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000062">Managing OS/360 development was a very educational experience, albeit a very frustrating one. The team, including F. M. Trapnell who succeeded me as manager, has much to be proud of. The system contains many excellencies in design and execution, and it has been successful in achieving widespread use. Certain ideas, most noticeably device-independent input-output and external library management, were technical innovations</p>
          <p xml:space="preserve" id="p_000063"><strong id="strong_000015" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000015">x</strong></p>
          <pagenum page="front" id="pxi" smilref="The_Mythical_Man_Month_Essay00001.smil#pxi">xi</pagenum>
          <p xml:space="preserve" id="p_000064"><strong id="strong_000016" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000016">xi</strong></p>
          <p xml:space="preserve" id="p_000065" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000065">now widely copied. It is now quite reliable, reasonably efficient, and very versatile.</p>
          <p xml:space="preserve" id="p_000066" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000066">The effort cannot be called wholly successful, however. Any OS/360 user is quickly aware of how much better it should be. The flaws in design and execution pervade especially the control program, as distinguished from the language compilers. Most of these flaws date from the 1964-65 design period and hence must be laid to my charge. Furthermore, the product was late, it took more memory than planned, the costs were several times the estimate, and it did not perform very well until several releases after the first.</p>
          <p xml:space="preserve" id="p_000067" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000067">After leaving IBM in 1965 to come to Chapel Hill as originally agreed when I took over OS/360, I began to analyze the OS/360 experience to see what management and technical lessons were to be learned. In particular, I wanted to explain the quite different management experiences encountered in System/ 360 hardware development and OS/360 software development. This book is a belated answer to Tom Watson's probing questions as to why programming is hard to manage.</p>
          <p xml:space="preserve" id="p_000068" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000068">In this quest I have profited from long conversations with R. P. Case, assistant manager 1964-65, and F. M. Trapnell, manager 1965-68.1 have compared conclusions with other managers of jumbo programming projects, including F. J. Corbato of M.I.T., John Harr and V. Vyssotsky of Bell Telephone Laboratories, Charles Portman of International Computers Limited, A. P. Ershov of the Computation Laboratory of the Siberian Division, U.S.S.R. Academy of Sciences, and A. M. Pietrasanta of IBM.</p>
          <p xml:space="preserve" id="p_000069" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000069">My own conclusions are embodied in the essays that follow, which are intended for professional programmers, professional managers, and especially professional managers of programmers.</p>
          <p xml:space="preserve" id="p_000070" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000070">Although written as separable essays, there is a central argument contained especially in Chapters 2-7. Briefly, I believe that large programming projects suffer management problems</p>
          <pagenum page="front" id="pxii" smilref="The_Mythical_Man_Month_Essay00001.smil#pxii">xii</pagenum>
          <p xml:space="preserve" id="p_000071"><strong id="strong_000017" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000017">xii</strong></p>
          <p xml:space="preserve" id="p_000072" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000072">different in kind from small ones, due to division of labor. I believe the critical need to be the preservation of the conceptual integrity of the product itself. These chapters explore both the difficulties of achieving this unity and methods for doing so. The later chapters explore other aspects of software engineering management.</p>
          <p xml:space="preserve" id="p_000073" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000073">The literature in this field is not abundant, but it is widely scattered. Hence I have tried to give references that will both illuminate particular points and guide the interested reader to other useful works. Many friends have read the manuscript, and some have prepared extensive helpful comments; where these seemed valuable but did not fit the flow of the text, I have included them in the notes.</p>
          <p xml:space="preserve" id="p_000074" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000074">Because this is a book of essays and not a text, all the references and notes have been banished to the end of the volume, and the reader is urged to ignore them on his first reading.</p>
          <p xml:space="preserve" id="p_000075" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000075">I am deeply indebted to Miss Sara Elizabeth Moore, Mr. David Wagner, and Mrs. Rebecca Burris for their help in preparing the manuscript, and to Professor Joseph C. Sloane for advice on illustration.</p>
          <p xml:space="preserve" id="p_000076"><em id="em_000022" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000022">Chapel Hill, N.C.</em></p>
          <p xml:space="preserve" id="p_000077" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000077">F. P. B., Jr</p>
          <p xml:space="preserve" id="p_000078"><em id="em_000023" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000023">October 1974</em></p>
        </level2>
      </level1>
    </frontmatter>
    <bodymatter id="bodymatter_000001">
      <level1 id="level1_000002">
        <level2 id="level2_000003">
          <h2 xml:space="preserve" id="h2_000003"><strong id="strong_000018"><em id="em_000024" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000024">Contents</em></strong></h2>
          <p xml:space="preserve" id="p_000079"><span class="text" id="span_000020" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000020">Preface to the 20th Anniversary Edition </span><strong id="strong_000019" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000019">vii</strong></p>
          <p xml:space="preserve" id="p_000080"><span class="text" id="span_000021" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000021">Preface to the First Edition </span><strong id="strong_000020" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000020">x</strong></p>
          <level3 id="level3_000001">
            <h3 xml:space="preserve" id="p_000081"><span class="text" id="span_000022" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000022">Chapter 1 The Tar Pit </span><strong id="strong_000021" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000021">3</strong></h3>
            <p xml:space="preserve" id="p_000082"><span class="text" id="span_000023" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000023">Chapter 2 The Mythical Man-Month </span><strong id="strong_000022" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000022">13</strong></p>
            <p xml:space="preserve" id="p_000083"><span class="text" id="span_000024" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000024">Chapter 3 The Surgical Team </span><strong id="strong_000023" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000023">29</strong></p>
            <p xml:space="preserve" id="p_000084"><span class="text" id="span_000025" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000025">Chapter 4 Aristocracy, Democracy, and System Design </span><strong id="strong_000024" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000024">41</strong></p>
            <p xml:space="preserve" id="p_000085"><span class="text" id="span_000026" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000026">Chapter 5 The Second-System Effect </span><strong id="strong_000025" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000025">53</strong></p>
            <p xml:space="preserve" id="p_000086"><span class="text" id="span_000027" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000027">Chapter 6 Passing the Word </span><strong id="strong_000026" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000026">61</strong></p>
            <p xml:space="preserve" id="p_000087"><span class="text" id="span_000028" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000028">Chapter 7 Why Did the Tower of Babel Fail? </span><strong id="strong_000027" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000027">73</strong></p>
            <p xml:space="preserve" id="p_000088"><span class="text" id="span_000029" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000029">Chapter 8 Calling the Shot </span><strong id="strong_000028" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000028">87</strong></p>
            <p xml:space="preserve" id="p_000089"><span class="text" id="span_000030" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000030">Chapter 9 Ten Pounds in a Five-Pound Sack </span><strong id="strong_000029" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000029">97</strong></p>
            <p xml:space="preserve" id="p_000090"><span class="text" id="span_000031" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000031">Chapter 10 The Documentary Hypothesis </span><strong id="strong_000030" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000030">107</strong></p>
            <p xml:space="preserve" id="p_000091"><span class="text" id="span_000032" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000032">Chapter 11 Plan to Throw One Away </span><strong id="strong_000031" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000031">115</strong></p>
            <p xml:space="preserve" id="p_000092"><span class="text" id="span_000033" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000033">Chapter 12 Sharp Tools </span><strong id="strong_000032" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000032">127</strong></p>
            <p xml:space="preserve" id="p_000093"><span class="text" id="span_000034" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000034">Chapter 13 The Whole and the Parts </span><strong id="strong_000033" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000033">141</strong></p>
            <p xml:space="preserve" id="p_000094"><span class="text" id="span_000035" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000035">Chapter 14 Hatching a Catastrophe </span><strong id="strong_000034" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000034">153</strong></p>
            <p xml:space="preserve" id="p_000095"><span class="text" id="span_000036" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000036">Chapter 15 The Other Face </span><strong id="strong_000035" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000035">163</strong></p>
            <p xml:space="preserve" id="p_000096"><span class="text" id="span_000037" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000037">Chapter 16 No Silver Bullet--Essence and Accident </span><strong id="strong_000036" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000036">177</strong></p>
            <p xml:space="preserve" id="p_000097"><span class="text" id="span_000038" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000038">Chapter 17 "No Silver Bullet" Refired </span><strong id="strong_000037" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000037">205</strong></p>
            <p xml:space="preserve" id="p_000098"><span class="text" id="span_000039" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000039">Chapter 18 Propositions of </span><em id="em_000025" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000025">The Mythical Man-Month: </em><span class="text" id="span_000040" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000040">True or False </span><strong id="strong_000038" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000038">227</strong></p>
            <p xml:space="preserve" id="p_000099"><span class="text" id="span_000041" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000041">Chapter 19 </span><em id="em_000026" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000026">The Mythical Man-Month </em><span class="text" id="span_000042" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000042">after 20 Years </span><strong id="strong_000039" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000039">251</strong></p>
            <p xml:space="preserve" id="p_000100"><span class="text" id="span_000043" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000043">Epilogue </span><strong id="strong_000040" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000040">291</strong></p>
            <p xml:space="preserve" id="p_000101"><span class="text" id="span_000044" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000044">Notes and References </span><strong id="strong_000041" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000041">293</strong></p>
            <p xml:space="preserve" id="p_000102"><span class="text" id="span_000045" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000045">Index </span><strong id="strong_000042" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000042">309</strong></p>
            <p xml:space="preserve" id="p_000103"><strong id="strong_000043" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000043">xiii</strong></p>
            <p xml:space="preserve" id="p_000104" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000104">[Blank page]</p>
            <pagenum page="normal" id="p1" smilref="The_Mythical_Man_Month_Essay00001.smil#p1">1</pagenum>
            <p xml:space="preserve" id="p_000105" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000105">The Tar Pit</p>
            <pagenum page="normal" id="p2" smilref="The_Mythical_Man_Month_Essay00001.smil#p2">2</pagenum>
            <p xml:space="preserve" id="p_000106" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000106">[Image: The animal.]</p>
            <pagenum page="normal" id="p3" smilref="The_Mythical_Man_Month_Essay00001.smil#p3">3</pagenum>
          </level3>
        </level2>
        <level2 id="level2_000004">
          <h2 xml:space="preserve" id="h2_000004"><strong id="strong_000044"><em id="em_000027" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000027">The Tar Pit</em></strong></h2>
          <p xml:space="preserve" id="p_000107"><em id="em_000028" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000028">Een schip op het strand is een baken in zee.</em></p>
          <p xml:space="preserve" id="p_000108"><span class="text" id="span_000046" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000046">[</span><em id="em_000029" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000029">A ship on the beach is a lighthouse to the sea.</em><span class="text" id="span_000047" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000047">]</span></p>
          <p xml:space="preserve" id="p_000109"><em id="em_000030" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000030">DUTCH PROVERB</em></p>
          <p xml:space="preserve" id="p_000110"><strong id="strong_000045" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000045">C. R. Knight, Mural of La Brea Tar Pits</strong></p>
          <p xml:space="preserve" id="p_000111" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000111">The George C. Page Museum of La Brea Discoveries,</p>
          <p xml:space="preserve" id="p_000112" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000112">The Natural History Museum of Los Angeles County</p>
          <p xml:space="preserve" id="p_000113"><strong id="strong_000046" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000046">3</strong></p>
          <pagenum page="normal" id="p4" smilref="The_Mythical_Man_Month_Essay00001.smil#p4">4</pagenum>
          <p xml:space="preserve" id="p_000114" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000114">No scene from prehistory is quite so vivid as that of the mortal struggles of great beasts in the tar pits. In the mind's eye one sees dinosaurs, mammoths, and sabertoothed tigers struggling against the grip of the tar. The fiercer the struggle, the more entangling the tar, and no beast is so strong or so skillful but that he ultimately sinks.</p>
          <p xml:space="preserve" id="p_000115" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000115">Large-system programming has over the past decade been such a tar pit, and many great and powerful beasts have thrashed violently in it. Most have emerged with running systems--few have met goals, schedules, and budgets. Large and small, massive or wiry, team after team has become entangled in the tar. No one thing seems to cause the difficulty--any particular paw can be pulled away. But the accumulation of simultaneous and interacting factors brings slower and slower motion. Everyone seems to have been surprised by the stickiness of the problem, and it is hard to discern the nature of it. But we must try to understand it if we are to solve it.</p>
          <p xml:space="preserve" id="p_000116" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000116">Therefore let us begin by identifying the craft of system programming and the joys and woes inherent in it.</p>
          <p xml:space="preserve" id="p_000117"><strong id="strong_000047" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000047">The Programming Systems Product</strong></p>
          <p xml:space="preserve" id="p_000118"><span class="text" id="span_000048" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000048">One occasionally reads newspaper accounts of how two programmers in a remodeled garage have built an important program that surpasses the best efforts of large teams. And every programmer is prepared to believe such tales, for he knows that he could build </span><em id="em_000031" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000031">any </em><span class="text" id="span_000049" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000049">program much faster than the 1000 statements/year reported for industrial teams.</span></p>
          <p xml:space="preserve" id="p_000119"><span class="text" id="span_000050" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000050">Why then have not all industrial programming teams been replaced by dedicated garage duos? One must look at </span><em id="em_000032" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000032">what </em><span class="text" id="span_000051" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000051">is being produced.</span></p>
          <p xml:space="preserve" id="p_000120"><span class="text" id="span_000052" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000052">In the upper left of Fig. 1.1 is a </span><em id="em_000033" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000033">program. </em><span class="text" id="span_000053" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000053">It is complete in itself, ready to be run by the author on the system on which it was developed. </span><em id="em_000034" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000034">That </em><span class="text" id="span_000054" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000054">is the thing commonly produced in garages, and</span></p>
          <pagenum page="normal" id="p5" smilref="The_Mythical_Man_Month_Essay00001.smil#p5">5</pagenum>
          <p xml:space="preserve" id="p_000121" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000121">that is the object the individual programmer uses in estimating productivity.</p>
          <p xml:space="preserve" id="p_000122" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000122">There are two ways a program can be converted into a more useful, but more costly, object. These two ways are represented by the boundaries in the diagram.</p>
          <p xml:space="preserve" id="p_000123"><span class="text" id="span_000055" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000055">[Image: </span><strong id="strong_000048" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000048">Fig. 1.1</strong><span class="text" id="span_000056" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000056"> Evolution of the programming systems product.]</span></p>
          <p xml:space="preserve" id="p_000124"><span class="text" id="span_000057" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000057">Moving down across the horizontal boundary, a program becomes a </span><em id="em_000035" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000035">programming product. </em><span class="text" id="span_000058" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000058">This is a program that can be run,</span></p>
          <pagenum page="normal" id="p6" smilref="The_Mythical_Man_Month_Essay00001.smil#p6">6</pagenum>
          <p xml:space="preserve" id="p_000125" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000125">tested, repaired, and extended by anybody. It is usable in many operating environments, for many sets of data. To become a generally usable programming product, a program must be written in a generalized fashion. In particular the range and form of inputs must be generalized as much as the basic algorithm will reasonably allow. Then the program must be thoroughly tested, so that it can be depended upon. This means that a substantial bank of test cases, exploring the input range and probing its boundaries, must be prepared, run, and recorded. Finally, promotion of a program to a programming product requires its thorough documentation, so that anyone may use it, fix it, and extend it. As a rule of thumb, I estimate that a programming product costs at least three times as much as a debugged program with the same function.</p>
          <p xml:space="preserve" id="p_000126"><span class="text" id="span_000059" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000059">Moving across the vertical boundary, a program becomes a component in a </span><em id="em_000036" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000036">programming system. </em><span class="text" id="span_000060" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000060">This is a collection of interacting programs, coordinated in function and disciplined in format, so that the assemblage constitutes an entire facility for large tasks. To become a programming system component, a program must be written so that every input and output conforms in syntax and semantics with precisely defined interfaces. The program must also be designed so that it uses only a prescribed budget of resources--memory space, input-output devices, computer time. Finally, the program must be tested with other system components, in all expected combinations. This testing must be extensive, for the number of cases grows combinatorially. It is time-consuming, for subtle bugs arise from unexpected interactions of debugged components. A programming system component costs at least three times as much as a stand-alone program of the same function. The cost may be greater if the system has many components.</span></p>
          <p xml:space="preserve" id="p_000127"><span class="text" id="span_000061" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000061">In the lower right-hand corner of Fig. 1.1 stands the </span><em id="em_000037" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000037">programming systems product. </em><span class="text" id="span_000062" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000062">This differs from the simple program in all of the above ways. It costs nine times as much. But it is the truly useful object, the intended product of most system programming efforts.</span></p>
          <pagenum page="normal" id="p7" smilref="The_Mythical_Man_Month_Essay00001.smil#p7">7</pagenum>
          <p xml:space="preserve" id="p_000128"><strong id="strong_000049" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000049">The Joys of the Craft</strong></p>
          <p xml:space="preserve" id="p_000129" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000129">Why is programming fun? What delights may its practitioner expect as his reward?</p>
          <p xml:space="preserve" id="p_000130" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000130">First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design. I think this delight must be an image of God's delight in making things, a delight shown in the distinctness and newness of each leaf and each snowflake.</p>
          <p xml:space="preserve" id="p_000131" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000131">Second is the pleasure of making things that are useful to other people. Deep within, we want others to use our work and to find it helpful. In this respect the programming system is not essentially different from the child's first clay pencil holder "for Daddy's office."</p>
          <p xml:space="preserve" id="p_000132" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000132">Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning. The programmed computer has all the fascination of the pinball machine or the jukebox mechanism, carried to the ultimate.</p>
          <p xml:space="preserve" id="p_000133" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000133">Fourth is the joy of always learning, which springs from the nonrepeating nature of the task. In one way or another the problem is ever new, and its solver learns something: sometimes practical, sometimes theoretical, and sometimes both.</p>
          <p xml:space="preserve" id="p_000134" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000134">Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (As we shall see later, this very tractability has its own problems.)</p>
          <p xml:space="preserve" id="p_000135" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000135">Yet the program construct, unlike the poet's words, is real in the sense that it moves and works, producing visible outputs separate from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has</p>
          <pagenum page="normal" id="p8" smilref="The_Mythical_Man_Month_Essay00001.smil#p8">8</pagenum>
          <p xml:space="preserve" id="p_000136" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000136">come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.</p>
          <p xml:space="preserve" id="p_000137" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000137">Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.</p>
          <p xml:space="preserve" id="p_000138"><strong id="strong_000050" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000050">The Woes of the Craft</strong></p>
          <p xml:space="preserve" id="p_000139" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000139">Not all is delight, however, and knowing the inherent woes makes it easier to bear them when they appear.</p>
          <p xml:space="preserve" id="p_000140"><span class="text" id="span_000063" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000063">First, one must perform perfectly. The computer resembles the magic of legend in this respect, too. If one character, one pause, of the incantation is not strictly in proper form, the magic doesn't work. Human beings are not accustomed to being perfect, and few areas of human activity demand it. Adjusting to the requirement for perfection is, I think, the most difficult part of learning to program.</span><sup id="sup_000001" smilref="The_Mythical_Man_Month_Essay00001.smil#sup_000001">1</sup></p>
          <p xml:space="preserve" id="p_000141" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000141">Next, other people set one's objectives, provide one's resources, and furnish one's information. One rarely controls the circumstances of his work, or even its goal. In management terms, one's authority is not sufficient for his responsibility. It seems that in all fields, however, the jobs where things get done never have formal authority commensurate with responsibility. In practice, actual (as opposed to formal) authority is acquired from the very momentum of accomplishment.</p>
          <p xml:space="preserve" id="p_000142" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000142">The dependence upon others has a particular case that is especially painful for the system programmer. He depends upon other people's programs. These are often maldesigned, poorly implemented, incompletely delivered (no source code or test cases), and poorly documented. So he must spend hours studying and fixing things that in an ideal world would be complete, available, and usable.</p>
          <p xml:space="preserve" id="p_000143" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000143">The next woe is that designing grand concepts is fun; finding nitty little bugs is just work. With any creative activity come</p>
          <pagenum page="normal" id="p9" smilref="The_Mythical_Man_Month_Essay00001.smil#p9">9</pagenum>
          <p xml:space="preserve" id="p_000144" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000144">dreary hours of tedious, painstaking labor, and programming is no exception.</p>
          <p xml:space="preserve" id="p_000145" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000145">Next, one finds that debugging has a linear convergence, or worse, where one somehow expects a quadratic sort of approach to the end. So testing drags on and on, the last difficult bugs taking more time to find than the first.</p>
          <p xml:space="preserve" id="p_000146" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000146">The last woe, and sometimes the last straw, is that the product over which one has labored so long appears to be obsolete upon (or before) completion. Already colleagues and competitors are in hot pursuit of new and better ideas. Already the displacement of one's thought-child is not only conceived, but scheduled.</p>
          <p xml:space="preserve" id="p_000147"><span class="text" id="span_000064" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000064">This always seems worse than it really is. The new and better product is generally not </span><em id="em_000038" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000038">available </em><span class="text" id="span_000065" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000065">when one completes his own; it is only talked about. It, too, will require months of development. The real tiger is never a match for the paper one, unless actual use is wanted. Then the virtues of reality have a satisfaction all their own.</span></p>
          <p xml:space="preserve" id="p_000148"><span class="text" id="span_000066" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000066">Of course the technological base on which one builds is </span><em id="em_000039" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000039">always </em><span class="text" id="span_000067" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000067">advancing. As soon as one freezes a design, it becomes obsolete in terms of its concepts. But implementation of real products demands phasing and quantizing. The obsolescence of an implementation must be measured against other existing implementations, not against unrealized concepts. The challenge and the mission are to find real solutions to real problems on actual schedules with available resources.</span></p>
          <p xml:space="preserve" id="p_000149" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000149">This then is programming, both a tar pit in which many efforts have floundered and a creative activity with joys and woes all its own. For many, the joys far outweigh the woes, and for them the remainder of this book will attempt to lay some boardwalks across the tar.</p>
          <pagenum page="normal" id="p10" smilref="The_Mythical_Man_Month_Essay00001.smil#p10">10</pagenum>
          <p xml:space="preserve" id="p_000150" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000150">[Blank Page]</p>
          <pagenum page="normal" id="p11" smilref="The_Mythical_Man_Month_Essay00001.smil#p11">11</pagenum>
          <p xml:space="preserve" id="p_000151" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000151">The Mythical Man-Month</p>
          <pagenum page="normal" id="p12" smilref="The_Mythical_Man_Month_Essay00001.smil#p12">12</pagenum>
          <p xml:space="preserve" id="p_000152" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000152">[Image: The paper.]</p>
          <pagenum page="normal" id="p13" smilref="The_Mythical_Man_Month_Essay00001.smil#p13">13</pagenum>
        </level2>
        <level2 id="level2_000005">
          <h2 xml:space="preserve" id="h2_000005"><strong id="strong_000051"><em id="em_000040" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000040">The Mythical Man-Month</em></strong></h2>
          <p xml:space="preserve" id="p_000153"><em id="em_000041" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000041">Good cooking fakes time. If you are made to wait, it is to serve you better, and to please you.</em></p>
          <p xml:space="preserve" id="p_000154"><em id="em_000042" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000042">MENU OF RESTAURANT ANTOINE. NEW ORLEANS</em></p>
          <p xml:space="preserve" id="p_000155"><strong id="strong_000052" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000052">13</strong></p>
          <pagenum page="normal" id="p14" smilref="The_Mythical_Man_Month_Essay00001.smil#p14">14</pagenum>
          <p xml:space="preserve" id="p_000156" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000156">More software projects have gone awry for lack of calendar time than for all other causes combined. Why is this cause of disaster so common?</p>
          <p xml:space="preserve" id="p_000157" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000157">First, our techniques of estimating are poorly developed. More seriously, they reflect an unvoiced assumption which is quite untrue, i.e., that all will go well.</p>
          <p xml:space="preserve" id="p_000158" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000158">Second, our estimating techniques fallaciously confuse effort with progress, hiding the assumption that men and months are interchangeable.</p>
          <p xml:space="preserve" id="p_000159" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000159">Third, because we are uncertain of our estimates, software managers often lack the courteous stubbornness of Antoine's chef.</p>
          <p xml:space="preserve" id="p_000160" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000160">Fourth, schedule progress is poorly monitored. Techniques proven and routine in other engineering disciplines are considered radical innovations in software engineering.</p>
          <p xml:space="preserve" id="p_000161" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000161">Fifth, when schedule slippage is recognized, the natural (and traditional) response is to add manpower. Like dousing a fire with gasoline, this makes matters worse, much worse. More fire requires more gasoline, and thus begins a regenerative cycle which ends in disaster.</p>
          <p xml:space="preserve" id="p_000162" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000162">Schedule monitoring will be the subject of a separate essay. Let us consider other aspects of the problem in more detail.</p>
          <p xml:space="preserve" id="p_000163"><strong id="strong_000053" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000053">Optimism</strong></p>
          <p xml:space="preserve" id="p_000164" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000164">All programmers are optimists. Perhaps this modern sorcery especially attracts those who believe in happy endings and fairy godmothers. Perhaps the hundreds of nitty frustrations drive away all but those who habitually focus on the end goal. Perhaps it is merely that computers are young, programmers are younger, and the young are always optimists. But however the selection process works, the result is indisputable: "This time it will surely run," or "I just found the last bug."</p>
          <p xml:space="preserve" id="p_000165"><span class="text" id="span_000068" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000068">So the first false assumption that underlies the scheduling of systems programming is that </span><em id="em_000043" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000043">all will go well, </em><span class="text" id="span_000069" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000069">i.e., that </span><em id="em_000044" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000044">each task will take only as long as it "ought" to take.</em></p>
          <pagenum page="normal" id="p15" smilref="The_Mythical_Man_Month_Essay00001.smil#p15">15</pagenum>
          <p xml:space="preserve" id="p_000166"><span class="text" id="span_000070" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000070">The pervasiveness of optimism among programmers deserves more than a flip analysis. Dorothy Sayers, in her excellent book, </span><em id="em_000045" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000045">The Mind of the Maker, </em><span class="text" id="span_000071" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000071">divides creative activity into three stages: the idea, the implementation, and the interaction. A book, then, or a computer, or a program comes into existence first as an ideal construct, built outside time and space, but complete in the mind of the author. It is realized in time and space, by pen, ink, and paper, or by wire, silicon, and ferrite. The creation is complete when someone reads the book, uses the computer, or runs the program, thereby interacting with the mind of the maker.</span></p>
          <p xml:space="preserve" id="p_000167" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000167">This description, which Miss Sayers uses to illuminate not only human creative activity but also the Christian doctrine of the Trinity, will help us in our present task. For the human makers of things, the incompletenesses and inconsistencies of our ideas become clear only during implementation. Thus it is that writing, experimentation, "working out" are essential disciplines for the theoretician.</p>
          <p xml:space="preserve" id="p_000168" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000168">In many creative activities the medium of execution is intractable. Lumber splits; paints smear; electrical circuits ring. These physical limitations of the medium constrain the ideas that may be expressed, and they also create unexpected difficulties in the implementation.</p>
          <p xml:space="preserve" id="p_000169" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000169">Implementation, then, takes time and sweat both because of the physical media and because of the inadequacies of the underlying ideas. We tend to blame the physical media for most of our implementation difficulties; for the media are not "ours" in the way the ideas are, and our pride colors our judgment.</p>
          <p xml:space="preserve" id="p_000170" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000170">Computer programming, however, creates with an exceedingly tractable medium. The programmer builds from pure thought-stuff: concepts and very flexible representations thereof. Because the medium is tractable, we expect few difficulties in implementation; hence our pervasive optimism. Because our ideas are faulty, we have bugs; hence our optimism is unjustified.</p>
          <p xml:space="preserve" id="p_000171" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000171">In a single task, the assumption that all will go well has a probabilistic effect on the schedule. It might indeed go as planned,</p>
          <pagenum page="normal" id="p16" smilref="The_Mythical_Man_Month_Essay00001.smil#p16">16</pagenum>
          <p xml:space="preserve" id="p_000172" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000172">for there is a probability distribution for the delay that will be encountered, and "no delay" has a finite probability. A large programming effort, however, consists of many tasks, some chained end-to-end. The probability that each will go well becomes vanishingly small.</p>
          <p xml:space="preserve" id="p_000173"><strong id="strong_000054" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000054">The Man-Month</strong></p>
          <p xml:space="preserve" id="p_000174"><span class="text" id="span_000072" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000072">The second fallacious thought mode is expressed in the very unit of effort used in estimating and scheduling: the man-month. Cost does indeed vary as the product of the number of men and the number of months. Progress does not. </span><em id="em_000046" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000046">Hence the man-month as a unit for measuring the size of a job is a dangerous and deceptive myth. </em><span class="text" id="span_000073" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000073">It implies that men and months are interchangeable.</span></p>
          <p xml:space="preserve" id="p_000175"><span class="text" id="span_000074" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000074">Men and months are interchangeable commodities only when a task can be partitioned among many workers </span><em id="em_000047" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000047">with no communication among them </em><span class="text" id="span_000075" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000075">(Fig. 2.1). This is true of reaping wheat or picking cotton; it is not even approximately true of systems programming.</span></p>
          <p xml:space="preserve" id="p_000176"><span class="text" id="span_000076" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000076">[Chart: </span><strong id="strong_000055" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000055">Fig. 2.1</strong><span class="text" id="span_000077" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000077"> Time versus number of workers--perfectly partitionable task.]</span></p>
          <pagenum page="normal" id="p17" smilref="The_Mythical_Man_Month_Essay00001.smil#p17">17</pagenum>
          <p xml:space="preserve" id="p_000177" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000177">When a task cannot be partitioned because of sequential constraints, the application of more effort has no effect on the schedule (Fig. 2.2). The bearing of a child takes nine months, no matter how many women are assigned. Many software tasks have this characteristic because of the sequential nature of debugging.</p>
          <p xml:space="preserve" id="p_000178"><span class="text" id="span_000078" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000078">[Chart: </span><strong id="strong_000056" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000056">Fig. 2.2</strong><span class="text" id="span_000079" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000079"> Time versus number of workers--unpartitionable task.]</span></p>
          <p xml:space="preserve" id="p_000179" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000179">In tasks that can be partitioned but which require communication among the subtasks, the effort of communication must be added to the amount of work to be done. Therefore the best that can be done is somewhat poorer than an even trade of men for months (Fig. 2.3).</p>
          <pagenum page="normal" id="p18" smilref="The_Mythical_Man_Month_Essay00001.smil#p18">18</pagenum>
          <p xml:space="preserve" id="p_000180"><span class="text" id="span_000080" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000080">The added burden of communication is made up of two parts, training and intercommunication. Each worker must be trained in the technology, the goals of the effort, the overall strategy, and the plan of work. This training cannot be partitioned, so this part of the added effort varies linearly with the number of workers.</span><sup id="sup_000002" smilref="The_Mythical_Man_Month_Essay00001.smil#sup_000002">1</sup></p>
          <p xml:space="preserve" id="p_000181"><span class="text" id="span_000081" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000081">Intercommunication is worse. If each part of the task must be separately coordinated with each other part, the effort increases as </span><em id="em_000048" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000048">n</em><span class="all-caps" id="span_000082"><span class="text" id="span_000083" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000083">(</span><em id="em_000049" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000049">n</em><span class="text" id="span_000084" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000084">-1)/2. </span></span><span class="text" id="span_000085" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000085">Three workers require three times as much pairwise intercommunication as two; four require six times as much as two. If, moreover, there need to be conferences among three, four, etc., workers to resolve things jointly, matters get worse yet. The added effort of communicating may fully counteract the division of the original task and bring us to the situation of Fig. 2.4.</span></p>
          <p xml:space="preserve" id="p_000182"><span class="text" id="span_000086" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000086">[Chart: </span><strong id="strong_000057" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000057">Fig. 2.3</strong><span class="text" id="span_000087" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000087"> Time versus number of workers--partitionable task requiring communication.]</span></p>
          <pagenum page="normal" id="p19" smilref="The_Mythical_Man_Month_Essay00001.smil#p19">19</pagenum>
          <p xml:space="preserve" id="p_000183" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000183">Since software construction is inherently a systems effort--an exercise in complex interrelationships--communication effort is great, and it quickly dominates the decrease in individual task time brought about by partitioning. Adding more men then lengthens, not shortens, the schedule.</p>
          <p xml:space="preserve" id="p_000184"><span class="text" id="span_000088" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000088">[Chart: </span><strong id="strong_000058" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000058">Fig. 2.4</strong><span class="text" id="span_000089" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000089"> Time versus number of workers--task with complex interrelationships.]</span></p>
          <p xml:space="preserve" id="p_000185"><strong id="strong_000059" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000059">Systems Test</strong></p>
          <p xml:space="preserve" id="p_000186" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000186">No parts of the schedule are so thoroughly affected by sequential constraints as component debugging and system test. Furthermore, the time required depends on the number and subtlety of the errors encountered. Theoretically this number should be zero. Because of optimism, we usually expect the number of bugs to be</p>
          <pagenum page="normal" id="p20" smilref="The_Mythical_Man_Month_Essay00001.smil#p20">20</pagenum>
          <p xml:space="preserve" id="p_000187" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000187">smaller than it turns out to be. Therefore testing is usually the most mis-scheduled part of programming.</p>
          <p xml:space="preserve" id="p_000188" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000188">For some years I have been successfully using the following rule of thumb for scheduling a software task:</p>
          <p xml:space="preserve" id="p_000189"><span class="all-caps" id="span_000090" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000090">1/3 </span><span class="text" id="span_000091" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000091">planning</span></p>
          <p xml:space="preserve" id="p_000190" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000190">1/6 coding</p>
          <p xml:space="preserve" id="p_000191" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000191">¼ component test and early system test</p>
          <p xml:space="preserve" id="p_000192" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000192">¼ system test, all components in hand.</p>
          <p xml:space="preserve" id="p_000193" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000193">This differs from conventional scheduling in several important ways:</p>
          <p xml:space="preserve" id="p_000194"><strong id="strong_000060" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000060">1</strong><span class="text" id="span_000092" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000092">. The fraction devoted to planning is larger than normal. Even so, it is barely enough to produce a detailed and solid specification, and not enough to include research or exploration of totally new techniques.</span></p>
          <p xml:space="preserve" id="p_000195"><strong id="strong_000061" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000061">2</strong><span class="text" id="span_000093" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000093">. The </span><em id="em_000050" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000050">half </em><span class="text" id="span_000094" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000094">of the schedule devoted to debugging of completed code is much larger than normal.</span></p>
          <p xml:space="preserve" id="p_000196"><strong id="strong_000062" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000062">3</strong><span class="text" id="span_000095" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000095">. The part that is easy to estimate, i.e., coding, is given only one-sixth of the schedule.</span></p>
          <p xml:space="preserve" id="p_000197"><span class="text" id="span_000096" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000096">In examining conventionally scheduled projects, I have found that few allowed one-half of the projected schedule for testing, but that most did indeed spend half of the actual schedule for that purpose. Many of these were on schedule until and except in system testing.</span><sup id="sup_000003" smilref="The_Mythical_Man_Month_Essay00001.smil#sup_000003">2</sup></p>
          <p xml:space="preserve" id="p_000198" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000198">Failure to allow enough time for system test, in particular, is peculiarly disastrous. Since the delay comes at the end of the schedule, no one is aware of schedule trouble until almost the delivery date. Bad news, late and without warning, is unsettling to customers and to managers.</p>
          <p xml:space="preserve" id="p_000199" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000199">Furthermore, delay at this point has unusually severe financial, as well as psychological, repercussions. The project is fully staffed, and cost-per-day is maximum. More seriously, the software is to support other business effort (shipping of computers, operation of new facilities, etc.) and the secondary costs of delaying these are very high, for it is almost time for software shipment.</p>
          <pagenum page="normal" id="p21" smilref="The_Mythical_Man_Month_Essay00001.smil#p21">21</pagenum>
          <p xml:space="preserve" id="p_000200" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000200">Indeed, these secondary costs may far outweigh all others. It is therefore very important to allow enough system test time in the original schedule.</p>
          <p xml:space="preserve" id="p_000201"><strong id="strong_000063" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000063">Gutless Estimating</strong></p>
          <p xml:space="preserve" id="p_000202" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000202">Observe that for the programmer, as for the chef, the urgency of the patron may govern the scheduled completion of the task, but it cannot govern the actual completion. An omelette, promised in two minutes, may appear to be progressing nicely. But when it has not set in two minutes, the customer has two choices--wait or eat it raw. Software customers have had the same choices.</p>
          <p xml:space="preserve" id="p_000203" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000203">The cook has another choice; he can turn up the heat. The result is often an omelette nothing can save--burned in one part, raw in another.</p>
          <p xml:space="preserve" id="p_000204" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000204">Now I do not think software managers have less inherent courage and firmness than chefs, nor than other engineering managers. But false scheduling to match the patron's desired date is much more common in our discipline than elsewhere in engineering. It is very difficult to make a vigorous, plausible, and job-risking defense of an estimate that is derived by no quantitative method, supported by little data, and certified chiefly by the hunches of the managers.</p>
          <p xml:space="preserve" id="p_000205" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000205">Clearly two solutions are needed. We need to develop and publicize productivity figures, bug-incidence figures, estimating rules, and so on. The whole profession can only profit from sharing such data.</p>
          <p xml:space="preserve" id="p_000206" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000206">Until estimating is on a sounder basis, individual managers will need to stiffen their backbones and defend their estimates with the assurance that their poor hunches are better than wish-derived estimates.</p>
          <p xml:space="preserve" id="p_000207"><strong id="strong_000064" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000064">Regenerative Schedule Disaster</strong></p>
          <p xml:space="preserve" id="p_000208" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000208">What does one do when an essential software project is behind schedule? Add manpower, naturally. As Figs. 2.1 through 2.4 suggest, this may or may not help.</p>
          <pagenum page="normal" id="p22" smilref="The_Mythical_Man_Month_Essay00001.smil#p22">22</pagenum>
          <p xml:space="preserve" id="p_000209"><span class="text" id="span_000097" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000097">Let us consider an example.</span><sup id="sup_000004" smilref="The_Mythical_Man_Month_Essay00001.smil#sup_000004">3</sup><span class="text" id="span_000098" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000098"> Suppose a task is estimated at 12 man-months and assigned to three men for four months, and that there are measurable mileposts A, B, C, D, which are scheduled to fall at the end of each month (Fig. 2.5).</span></p>
          <p xml:space="preserve" id="p_000210" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000210">Now suppose the first milepost is not reached until two months have elapsed (Fig. 2.6). What are the alternatives facing the manager?</p>
          <p xml:space="preserve" id="p_000211"><strong id="strong_000065" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000065">1</strong><span class="text" id="span_000099" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000099">. Assume that the task must be done on time. Assume that only the first part of the task was misestimated, so Fig. 2.6 tells the story accurately. Then 9 man-months of effort remain, and two months, so 4 1/2 men will be needed. Add 2 men to the 3 assigned.</span></p>
          <p xml:space="preserve" id="p_000212"><strong id="strong_000066" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000066">2</strong><span class="text" id="span_000100" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000100">. Assume that the task must be done on time. Assume that the whole estimate was uniformly low, so that Fig. 2.7 really describes the situation. Then 18 man-months of effort remain, and two months, so 9 men will be needed. Add 6 men to the 3 assigned.</span></p>
          <p xml:space="preserve" id="p_000213"><span class="text" id="span_000101" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000101">[Chart: </span><strong id="strong_000067" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000067">Figure 2.5</strong><span class="text" id="span_000102" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000102">.]</span></p>
          <pagenum page="normal" id="p23" smilref="The_Mythical_Man_Month_Essay00001.smil#p23">23</pagenum>
          <p xml:space="preserve" id="p_000214"><span class="text" id="span_000103" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000103">[Chart: </span><strong id="strong_000068" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000068">Figure 2.6</strong><span class="text" id="span_000104" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000104">.]</span></p>
          <p xml:space="preserve" id="p_000215"><span class="text" id="span_000105" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000105">[Chart: </span><strong id="strong_000069" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000069">Figure 2.7</strong><span class="text" id="span_000106" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000106">.]</span></p>
          <pagenum page="normal" id="p24" smilref="The_Mythical_Man_Month_Essay00001.smil#p24">24</pagenum>
          <p xml:space="preserve" id="p_000216"><strong id="strong_000070" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000070">3</strong><span class="text" id="span_000107" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000107">. Reschedule. I like the advice given by P. Fagg, an experienced hardware engineer, "Take no small slips." That is, allow enough time in the new schedule to ensure that the work can be carefully and thoroughly done, and that rescheduling will not have to be done again.</span></p>
          <p xml:space="preserve" id="p_000217"><strong id="strong_000071" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000071">4</strong><span class="text" id="span_000108" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000108">. Trim the task. In practice this tends to happen anyway, once the team observes schedule slippage. Where the secondary costs of delay are very high, this is the only feasible action. The manager's only alternatives are to trim it formally and carefully, to reschedule, or to watch the task get silently trimmed by hasty design and incomplete testing.</span></p>
          <p xml:space="preserve" id="p_000218"><span class="text" id="span_000109" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000109">In the first two cases, insisting that the unaltered task be completed in four months is disastrous. Consider the regenerative effects, for example, for the first alternative (Fig. 2.8). The two new men, however competent and however quickly recruited, will require training in the task by one of the experienced men. If this takes a month, </span><em id="em_000051" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000051">3 man-months will have been devoted to work not in the original estimate. </em><span class="text" id="span_000110" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000110">Furthermore, the task, originally partitioned three ways, must be repartitioned into five parts; hence some work already done will be lost, and system testing must be lengthened. So at the end of the third month, substantially more than 7 man-months of effort remain, and 5 trained people and one month are available. As Fig. 2.8 suggests, the product is just as late as if no one had been added (Fig. 2.6).</span></p>
          <p xml:space="preserve" id="p_000219" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000219">To hope to get done in four months, considering only training time and not repartitioning and extra systems test, would require adding 4 men, not 2, at the end of the second month. To cover repartitioning and system test effects, one would have to add still other men. Now, however, one has at least a 7-man team, not a 3-man one; thus such aspects as team organization and task division are different in kind, not merely in degree.</p>
          <p xml:space="preserve" id="p_000220" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000220">Notice that by the end of the third month things look very black. The March 1 milestone has not been reached in spite of all</p>
          <pagenum page="normal" id="p25" smilref="The_Mythical_Man_Month_Essay00001.smil#p25">25</pagenum>
          <p xml:space="preserve" id="p_000221" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000221">the managerial effort. The temptation is very strong to repeat the cycle, adding yet more manpower. Therein lies madness.</p>
          <p xml:space="preserve" id="p_000222" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000222">The foregoing assumed that only the first milestone was misestimated. If on March 1 one makes the conservative assumption that the whole schedule was optimistic, as Fig. 2.7 depicts, one wants to add 6 men just to the original task. Calculation of the training, repartitioning, system testing effects is left as an exercise for the reader. Without a doubt, the regenerative disaster will yield a poorer product, later, than would rescheduling with the original three men, unaugmented.</p>
          <p xml:space="preserve" id="p_000223"><span class="text" id="span_000111" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000111">[Chart: </span><strong id="strong_000072" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000072">Figure 2.8</strong><span class="text" id="span_000112" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000112">.]</span></p>
          <p xml:space="preserve" id="p_000224" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000224">Oversimplifying outrageously, we state Brooks's Law:</p>
          <p xml:space="preserve" id="p_000225"><em id="em_000052" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000052">Adding manpower to a late software project makes it later.</em></p>
          <p xml:space="preserve" id="p_000226" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000226">This then is the demythologizing of the man-month. The number of months of a project depends upon its sequential constraints.</p>
          <pagenum page="normal" id="p26" smilref="The_Mythical_Man_Month_Essay00001.smil#p26">26</pagenum>
          <p xml:space="preserve" id="p_000227" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000227">The maximum number of men depends upon the number of independent subtasks. From these two quantities one can derive schedules using fewer men and more months. (The only risk is product obsolescence.) One cannot, however, get workable schedules using more men and fewer months. More software projects have gone awry for lack of calendar time than for all other causes combined.</p>
          <pagenum page="normal" id="p27" smilref="The_Mythical_Man_Month_Essay00001.smil#p27">27</pagenum>
          <p xml:space="preserve" id="p_000228" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000228">The Surgical Team</p>
          <pagenum page="normal" id="p28" smilref="The_Mythical_Man_Month_Essay00001.smil#p28">28</pagenum>
          <p xml:space="preserve" id="p_000229" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000229">[Image: The people.]</p>
          <pagenum page="normal" id="p29" smilref="The_Mythical_Man_Month_Essay00001.smil#p29">29</pagenum>
        </level2>
        <level2 id="level2_000006">
          <h2 xml:space="preserve" id="h2_000006"><strong id="strong_000073"><em id="em_000053" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000053">The Surgical Team</em></strong></h2>
          <p xml:space="preserve" id="p_000230"><em id="em_000054" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000054">These studies revealed large individual differences between high and low performers, often by an order of magnitude.</em></p>
          <p xml:space="preserve" id="p_000231"><em id="em_000055" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000055">SACKMAN. ERIKSON, AND GRANT</em></p>
          <p xml:space="preserve" id="p_000232"><strong id="strong_000074" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000074">29</strong></p>
          <pagenum page="normal" id="p30" smilref="The_Mythical_Man_Month_Essay00001.smil#p30">30</pagenum>
          <p xml:space="preserve" id="p_000233" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000233">At computer society meetings one continually hears young programming managers assert that they favor a small, sharp team of first-class people, rather than a project with hundreds of programmers, and those by implication mediocre. So do we all.</p>
          <p xml:space="preserve" id="p_000234"><span class="text" id="span_000113" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000113">But this naive statement of the alternatives avoids the hard problem--how does one build </span><em id="em_000056" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000056">large </em><span class="text" id="span_000114" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000114">systems on a meaningful schedule? Let us look at each side of this question in more detail.</span></p>
          <p xml:space="preserve" id="p_000235"><strong id="strong_000075" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000075">The Problem</strong></p>
          <p xml:space="preserve" id="p_000236" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000236">Programming managers have long recognized wide productivity variations between good programmers and poor ones. But the actual measured magnitudes have astounded all of us. In one of their studies, Sackman, Erikson, and Grant were measuring performances of a group of experienced programmers. Within just this group the ratios between best and worst performances averaged about 10:1 on productivity measurements and an amazing 5:1 on program speed and space measurements! In short the $20,000/year programmer may well be 10 times as productive as the $10,000/year one. The converse may be true, too. The data showed no correlation whatsoever between experience and performance. (I doubt if that is universally true.)</p>
          <p xml:space="preserve" id="p_000237" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000237">I have earlier argued that the sheer number of minds to be coordinated affects the cost of the effort, for a major part of the cost is communication and correcting the ill effects of miscommunication (system debugging). This, too, suggests that one wants the system to be built by as few minds as possible. Indeed, most experience with large programming systems shows that the brute-force approach is costly, slow, inefficient, and produces systems that are not conceptually integrated. OS/360, Exec 8, Scope 6600, Multics, TSS, SAGE, etc.--the list goes on and on.</p>
          <p xml:space="preserve" id="p_000238" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000238">The conclusion is simple: if a 200-man project has 25 managers who are the most competent and experienced programmers, fire the 175 troops and put the managers back to programming.</p>
          <pagenum page="normal" id="p31" smilref="The_Mythical_Man_Month_Essay00001.smil#p31">31</pagenum>
          <p xml:space="preserve" id="p_000239"><span class="text" id="span_000115" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000115">Now let's examine this solution. On the one hand, it fails to approach the ideal of the </span><em id="em_000057" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000057">small </em><span class="text" id="span_000116" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000116">sharp team, which by common consensus shouldn't exceed 10 people. It is so large that it will need to have at least two levels of management, or about five managers. It will additionally need support in finance, personnel, space, secretaries, and machine operators.</span></p>
          <p xml:space="preserve" id="p_000240" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000240">On the other hand, the original 200-man team was not large enough to build the really large systems by brute-force methods. Consider OS/360, for example. At the peak over 1000 people were working on it--programmers, writers, machine operators, clerks, secretaries, managers, support groups, and so on. From 1963 through 1966 probably 5000 man-years went into its design, construction, and documentation. Our postulated 200-man team would have taken 25 years to have brought the product to its present stage, if men and months traded evenly!</p>
          <p xml:space="preserve" id="p_000241"><span class="text" id="span_000117" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000117">This then is the problem with the small, sharp team concept: </span><em id="em_000058" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000058">it is too slow for really big systems. </em><span class="text" id="span_000118" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000118">Consider the OS/360 job as it might be tackled with a small, sharp team. Postulate a 10-man team. As a bound, let them be seven times as productive as mediocre programmers in both programming and documentation, because they are sharp. Assume OS/360 was built only by mediocre programmers (which is </span><em id="em_000059" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000059">far </em><span class="text" id="span_000119" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000119">from the truth). As a bound, assume that another productivity improvement factor of seven comes from reduced communication on the part of the smaller team. Assume the </span><em id="em_000060" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000060">same </em><span class="text" id="span_000120" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000120">team stays on the entire job. Well, 5000/(10 × 7×7)</span><em id="em_000061" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000061"> = </em><span class="text" id="span_000121" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000121">10; they can do the 5000 man-year job in 10 years. Will the product be interesting 10 years after its initial design? Or will it have been made obsolete by the rapidly developing software technology?</span></p>
          <p xml:space="preserve" id="p_000242" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000242">The dilemma is a cruel one. For efficiency and conceptual integrity, one prefers a few good minds doing design and construction. Yet for large systems one wants a way to bring considerable manpower to bear, so that the product can make a timely appearance. How can these two needs be reconciled?</p>
          <pagenum page="normal" id="p32" smilref="The_Mythical_Man_Month_Essay00001.smil#p32">32</pagenum>
          <p xml:space="preserve" id="p_000243"><strong id="strong_000076" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000076">Mills's Proposal</strong></p>
          <p xml:space="preserve" id="p_000244"><span class="text" id="span_000122" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000122">A proposal by Harlan Mills offers a fresh and creative solution.</span><sup id="sup_000005" smilref="The_Mythical_Man_Month_Essay00001.smil#sup_000005">2,3</sup><span class="text" id="span_000123" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000123"> Mills proposes that each segment of a large job be tackled by a team, but that the team be organized like a surgical team rather than a hog-butchering team. That is, instead of each member cutting away on the problem, one does the cutting and the others give him every support that will enhance his effectiveness and productivity.</span></p>
          <p xml:space="preserve" id="p_000245" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000245">A little thought shows that this concept meets the desiderata, if it can be made to work. Few minds are involved in design and construction, yet many hands are brought to bear. Can it work? Who are the anesthesiologists and nurses on a programming team, and how is the work divided? Let me freely mix metaphors to suggest how such a team might work if enlarged to include all conceivable support.</p>
          <p xml:space="preserve" id="p_000246"><strong id="strong_000077" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000077">The surgeon</strong><span class="text" id="span_000124" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000124">. Mills calls him a </span><em id="em_000062" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000062">chief programmer. </em><span class="text" id="span_000125" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000125">He personally defines the functional and performance specifications, designs the program, codes it, tests it, and writes its documentation. He writes in a structured programming language such as PL/I, and has effective access to a computing system which not only runs his tests but also stores the various versions of his programs, allows easy file updating, and provides text editing for his documentation. He needs great talent, ten years experience, and considerable systems and application knowledge, whether in applied mathematics, business data handling, or whatever.</span></p>
          <p xml:space="preserve" id="p_000247"><strong id="strong_000078" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000078">The copilot. </strong><span class="text" id="span_000126" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000126">He is the alter ego of the surgeon, able to do any part of the job, but is less experienced. His main function is to share in the design as a thinker, discussant, and evaluator. The surgeon tries ideas on him, but is not bound by his advice. The copilot often represents his team in discussions of function and interface with other teams. He knows all the code intimately. He researches alternative design strategies. He obviously serves as insurance against disaster to the surgeon. He may even write code, but he is not responsible for any part of the code.</span></p>
          <pagenum page="normal" id="p33" smilref="The_Mythical_Man_Month_Essay00001.smil#p33">33</pagenum>
          <p xml:space="preserve" id="p_000248"><strong id="strong_000079" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000079">The administrator. </strong><span class="text" id="span_000127" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000127">The surgeon is boss, and he must have the last word on personnel, raises, space, and so on, but he must spend almost none of his time on these matters. Thus he needs a professional administrator who handles money, people, space, and machines, and who interfaces with the administrative machinery of the rest of the organization. Baker suggests that the administrator has a full-time job only if the project has substantial legal, contractual, reporting, or financial requirements because of the user-producer relationship. Otherwise, one administrator can serve two teams.</span></p>
          <p xml:space="preserve" id="p_000249"><strong id="strong_000080" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000080">The editor. </strong><span class="text" id="span_000128" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000128">The surgeon is responsible for generating the documentation--for maximum clarity he must write it. This is true of both external and internal descriptions. The editor, however, takes the draft or dictated manuscript produced by the surgeon and criticizes it, reworks it, provides it with references and bibliography, nurses it through several versions, and oversees the mechanics of production.</span></p>
          <p xml:space="preserve" id="p_000250"><strong id="strong_000081" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000081">Two secretaries. </strong><span class="text" id="span_000129" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000129">The administrator and the editor will each need a secretary; the administrator's secretary will handle project correspondence and non-product files.</span></p>
          <p xml:space="preserve" id="p_000251"><strong id="strong_000082" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000082">The program clerk. </strong><span class="text" id="span_000130" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000130">He is responsible for maintaining all the technical records of the team in a programming-product library. The clerk is trained as a secretary and has responsibility for both machine-readable and human-readable files.</span></p>
          <p xml:space="preserve" id="p_000252" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000252">All computer input goes to the clerk, who logs and keys it if required. The output listings go back to him to be filed and indexed. The most recent runs of any model are kept in a status notebook; all previous ones are filed in a chronological archive.</p>
          <p xml:space="preserve" id="p_000253"><span class="text" id="span_000131" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000131">Absolutely vital to Mills's concept is the transformation of programming "from private art to public practice" by making </span><em id="em_000063" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000063">all </em><span class="text" id="span_000132" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000132">the computer runs visible to all team members and identifying all programs and data as team property, not private property.</span></p>
          <p xml:space="preserve" id="p_000254" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000254">The specialized function of the program clerk relieves programmers of clerical chores, systematizes and ensures proper performance</p>
          <pagenum page="normal" id="p34" smilref="The_Mythical_Man_Month_Essay00001.smil#p34">34</pagenum>
          <p xml:space="preserve" id="p_000255" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000255">of those oft-neglected chores, and enhances the team's most valuable asset--its work-product. Clearly the concept as set forth above assumes batch runs. When interactive terminals are used, particularly those with no hard-copy output, the program clerk's functions do not diminish, but they change. Now he logs all updates of team program copies from private working copies, still handles all batch runs, and uses his own interactive facility to control the integrity and availability of the growing product.</p>
          <p xml:space="preserve" id="p_000256"><strong id="strong_000083" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000083">The toolsmith. </strong><span class="text" id="span_000133" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000133">File-editing, text-editing, and interactive debugging services are now readily available, so that a team will rarely need its own machine and machine-operating crew. But these services must be available with unquestionably satisfactory response and reliability; and the surgeon must be sole judge of the adequacy of the service available to him. He needs a toolsmith, responsible for ensuring this adequacy of the basic service and for constructing, maintaining, and upgrading special tools--mostly interactive computer services--needed by his team. Each team will need its own toolsmith, regardless of the excellence and reliability of any centrally provided service, for his job is to see to the tools needed or wanted by </span><em id="em_000064" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000064">his </em><span class="text" id="span_000134" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000134">surgeon, without regard to any other team's needs. The tool-builder will often construct specialized utilities, catalogued procedures, macro libraries.</span></p>
          <p xml:space="preserve" id="p_000257"><strong id="strong_000084" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000084">The tester. </strong><span class="text" id="span_000135" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000135">The surgeon will need a bank of suitable test cases for testing pieces of his work as he writes it, and then for testing the whole thing. The tester is therefore both an adversary who devises system test cases from the functional specs, and an assistant who devises test data for the day-by-day debugging. He would also plan testing sequences and set up the scaffolding required for component tests.</span></p>
          <p xml:space="preserve" id="p_000258"><strong id="strong_000085" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000085">The language lawyer</strong><span class="text" id="span_000136" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000136">. By the time Algol came along, people began to recognize that most computer installations have one or two people who delight in mastery of the intricacies of a programming language. And these experts turn out to be very useful and very widely consulted. The talent here is rather different from that of the surgeon, who is primarily a system designer and who thinks</span></p>
          <pagenum page="normal" id="p35" smilref="The_Mythical_Man_Month_Essay00001.smil#p35">35</pagenum>
          <p xml:space="preserve" id="p_000259" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000259">representations. The language lawyer can find a neat and efficient way to use the language to do difficult, obscure, or tricky things. Often he will need to do small studies (two or three days) on good technique. One language lawyer can service two or three surgeons.</p>
          <p xml:space="preserve" id="p_000260" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000260">This, then, is how 10 people might contribute in well-differentiated and specialized roles on a programming team built on the surgical model.</p>
          <p xml:space="preserve" id="p_000261"><strong id="strong_000086" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000086">How It Works</strong></p>
          <p xml:space="preserve" id="p_000262"><span class="text" id="span_000137" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000137">The team just defined meets the desiderata in several ways. Ten people, seven of them professionals, are at work on the problem, but the system is the product of one mind--or at most two, acting </span><em id="em_000065" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000065">uno animo.</em></p>
          <p xml:space="preserve" id="p_000263" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000263">Notice in particular the differences between a team of two programmers conventionally organized and the surgeon-copilot team. First, in the conventional team the partners divide the work, and each is responsible for design and implementation of part of the work. In the surgical team, the surgeon and copilot are each cognizant of all of the design and all of the code. This saves the labor of allocating space, disk accesses, etc. It also ensures the conceptual integrity of the work.</p>
          <p xml:space="preserve" id="p_000264"><span class="text" id="span_000138" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000138">Second, in the conventional team the partners are equal, and the inevitable differences of judgment must be talked out or compromised. Since the work and resources are divided, the differences in judgment are confined to overall strategy and interfacing, but they are compounded by differences of interest--e.g., whose space will be used for a buffer. In the surgical team, there are no differences of interest, and differences of judgment are settled by the surgeon unilaterally. These two differences--lack of division of the problem and the superior-subordinate relationship--make it possible for the surgical team to act </span><em id="em_000066" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000066">uno animo.</em></p>
          <p xml:space="preserve" id="p_000265" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000265">Yet the specialization of function of the remainder of the team is the key to its efficiency, for it permits a radically simpler communication pattern among the members, as Fig. 3.1 shows.</p>
          <pagenum page="normal" id="p36" smilref="The_Mythical_Man_Month_Essay00001.smil#p36">36</pagenum>
          <p xml:space="preserve" id="p_000266"><span class="text" id="span_000139" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000139">Baker's article</span><sup id="sup_000006" smilref="The_Mythical_Man_Month_Essay00001.smil#sup_000006">3</sup><span class="text" id="span_000140" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000140"> reports on a single, small-scale test of the team concept. It worked as predicted for that case, with phenomenally good results.</span></p>
          <p xml:space="preserve" id="p_000267"><span class="text" id="span_000141" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000141">[Chart: </span><strong id="strong_000087" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000087">Fig. 3.1</strong><span class="text" id="span_000142" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000142"> Communication patterns in 10-man programming teams.]</span></p>
          <p xml:space="preserve" id="p_000268"><strong id="strong_000088" smilref="The_Mythical_Man_Month_Essay00001.smil#strong_000088">Scaling Up</strong></p>
          <p xml:space="preserve" id="p_000269"><span class="text" id="span_000143" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000143">So far, so good. The problem, however, is how to build things that today take 5000 man-years, not things that take 20 or 30. A 10-man team can be effective no matter how it is organized, if the </span><em id="em_000067" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000067">whole </em><span class="text" id="span_000144" smilref="The_Mythical_Man_Month_Essay00001.smil#span_000144">job is within its purview. But how is the surgical team concept to be used on large jobs when several hundred people are brought to bear on the task?</span></p>
          <p xml:space="preserve" id="p_000270" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000270">The success of the scaling-up process depends upon the fact that the conceptual integrity of each piece has been radically improved--that the number of minds determining the design has</p>
          <pagenum page="normal" id="p37" smilref="The_Mythical_Man_Month_Essay00001.smil#p37">37</pagenum>
          <p xml:space="preserve" id="p_000271" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000271">been divided by seven. So it is possible to put 200 people on a problem and face the problem of coordinating only 20 minds, those of the surgeons.</p>
          <p xml:space="preserve" id="p_000272" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000272">For that coordination problem, however, separate techniques must be used, and these are discussed in succeeding chapters. Let it suffice here to say that the entire system also must have conceptual integrity, and that requires a system architect to design it all, from the top down. To make that job manageable, a sharp distinction must be made between architecture and implementation, and the system architect must confine himself scrupulously to architecture. However, such roles and techniques have been shown to be feasible and, indeed, very productive.</p>
          <pagenum page="normal" id="p38" smilref="The_Mythical_Man_Month_Essay00001.smil#p38">38</pagenum>
          <p xml:space="preserve" id="p_000273" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000273">[Blank Page]</p>
          <pagenum page="normal" id="p39" smilref="The_Mythical_Man_Month_Essay00001.smil#p39">39</pagenum>
          <p xml:space="preserve" id="p_000274" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000274">Aristocracy, Democracy, and System Design</p>
          <pagenum page="normal" id="p40" smilref="The_Mythical_Man_Month_Essay00001.smil#p40">40</pagenum>
          <p xml:space="preserve" id="p_000275" smilref="The_Mythical_Man_Month_Essay00001.smil#p_000275">[Image: The museum.]</p>
          <pagenum page="normal" id="p41" smilref="The_Mythical_Man_Month_Essay00001.smil#p41">41</pagenum>
        </level2>
        <level2 id="level2_000007">
          <h2 xml:space="preserve" id="h2_000007"><strong id="strong_000089"><em id="em_000068" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000068">Aristocracy, Democracy, and System Design</em></strong></h2>
          <p xml:space="preserve" id="p_000276"><em id="em_000069" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000069">This great church is an incomparable work of art. There is neither aridity nor confusion in the tenets it sets forth....</em></p>
          <p xml:space="preserve" id="p_000277"><em id="em_000070" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000070">It is the zenith of a style, the work of artists who had understood and assimilated all their predecessors ' successes, in complete possession of the techniques of their times, but using them without indiscreet display nor gratuitous feats of skill.</em></p>
          <p xml:space="preserve" id="p_000278"><em id="em_000071" smilref="The_Mythical_Man_Month_Essay00001.smil#em_000071">It was Jean d 'Orbais who undoubtedly conceived the general plan of the building, a plan which was respected, at least in its essential elements, by his successors. This is one of the reasons for the extreme coherence and unity of the edifice.</em></p>
          <p xml:space="preserve" id="p_000279"><em id="em_000072" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000072">REIMS CATHEDRAL GUIDEBOOK</em><sup id="sup_000007" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000007">1 </sup></p>
          <p xml:space="preserve" id="p_000280" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000280">Photographies Emmanuel Boudot-Lamotte</p>
          <p xml:space="preserve" id="p_000281"><strong id="strong_000090" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000090">41</strong></p>
          <pagenum page="normal" id="p42" smilref="The_Mythical_Man_Month_Essay00002.smil#p42">42</pagenum>
          <p xml:space="preserve" id="p_000282"><strong id="strong_000091" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000091">Conceptual Integrity</strong></p>
          <p xml:space="preserve" id="p_000283" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000283">Most European cathedrals show differences in plan or architectural style between parts built in different generations by different builders. The later builders were tempted to "improve" upon the designs of the earlier ones, to reflect both changes in fashion and differences in individual taste. So the peaceful Norman transept abuts and contradicts the soaring Gothic nave, and the result proclaims the pridefulness of the builders as much as the glory of God.</p>
          <p xml:space="preserve" id="p_000284" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000284">Against these, the architectural unity of Reims stands in glorious contrast. The joy that stirs the beholder comes as much from the integrity of the design as from any particular excellences. As the guidebook tells, this integrity was achieved by the self-abnegation of eight generations of builders, each of whom sacrificed some of his ideas so that the whole might be of pure design. The result proclaims not only the glory of God, but also His power to salvage fallen men from their pride.</p>
          <p xml:space="preserve" id="p_000285" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000285">Even though they have not taken centuries to build, most programming systems reflect conceptual disunity far worse than that of cathedrals. Usually this arises not from a serial succession of master designers, but from the separation of design into many tasks done by many men.</p>
          <p xml:space="preserve" id="p_000286"><span class="text" id="span_000145" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000145">I will contend that conceptual integrity is </span><em id="em_000073" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000073">the </em><span class="text" id="span_000146" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000146">most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas. In this chapter and the next two, we will examine the consequences of this theme for programming system design:</span></p>
          <p xml:space="preserve" id="p_000287" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000287">* How is conceptual integrity to be achieved?</p>
          <p xml:space="preserve" id="p_000288" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000288">* Does not this argument imply an elite, or aristocracy of architects, and a horde of plebeian implementers whose creative talents and ideas are suppressed?</p>
          <pagenum page="normal" id="p43" smilref="The_Mythical_Man_Month_Essay00002.smil#p43">43</pagenum>
          <p xml:space="preserve" id="p_000289" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000289">* How does one keep the architects from drifting off into the blue with unimplementable or costly specifications?</p>
          <p xml:space="preserve" id="p_000290" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000290">* How does one ensure that every trifling detail of an architectural specification gets communicated to the implementer, properly understood by him, and accurately incorporated into the product?</p>
          <p xml:space="preserve" id="p_000291"><strong id="strong_000092" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000092">Achieving Conceptual Integrity</strong></p>
          <p xml:space="preserve" id="p_000292" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000292">The purpose of a programming system is to make a computer easy to use. To do this, it furnishes languages and various facilities that are in fact programs invoked and controlled by language features. But these facilities are bought at a price: the external description of a programming system is ten to twenty times as large as the external description of the computer system itself. The user finds it far easier to specify any particular function, but there are far more to choose from, and far more options and formats to remember.</p>
          <p xml:space="preserve" id="p_000293" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000293">Ease of use is enhanced only if the time gained in functional specification exceeds the time lost in learning, remembering, and searching manuals. With modern programming systems this gain does exceed the cost, but in recent years the ratio of gain to cost seems to have fallen as more and more complex functions have been added. I am haunted by the memory of the ease of use of the IBM 650, even without an assembler or any other software at all.</p>
          <p xml:space="preserve" id="p_000294" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000294">Because ease of use is the purpose, this ratio of function to conceptual complexity is the ultimate test of system design. Neither function alone nor simplicity alone defines a good design.</p>
          <p xml:space="preserve" id="p_000295" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000295">This point is widely misunderstood. Operating System/360 is hailed by its builders as the finest ever built, because it indisputably has the most function. Function, and not simplicity, has always been the measure of excellence for its designers. On the other hand, the Time-Sharing System for the PDP-10 is hailed by its builders as the finest, because of its simplicity and the spareness</p>
          <pagenum page="normal" id="p44" smilref="The_Mythical_Man_Month_Essay00002.smil#p44">44</pagenum>
          <p xml:space="preserve" id="p_000296" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000296">of its concepts. By any measure, however, its function is not even in the same class as that of OS/360. As soon as ease of use is held up as the criterion, each of these is seen to be unbalanced, reaching for only half of the true goal.</p>
          <p xml:space="preserve" id="p_000297"><span class="text" id="span_000147" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000147">For a given level of function, however, that system is best in which one can specify things with the most simplicity and straightforwardness. </span><em id="em_000074" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000074">Simplicity </em><span class="text" id="span_000148" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000148">is not enough. Mooers's TRAC language and Algol 68 achieve simplicity as measured by the number of distinct elementary concepts. They are not, however, </span><em id="em_000075" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000075">straightforward. </em><span class="text" id="span_000149" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000149">The expression of the things one wants to do often requires involuted and unexpected combinations of the basic facilities. It is not enough to learn the elements and rules of combination; one must also learn the idiomatic usage, a whole lore of how the elements are combined in practice. Simplicity and straightforwardness proceed from conceptual integrity. Every part must reflect the same philosophies and the same balancing of desiderata. Every part must even use the same techniques in syntax and analogous notions in semantics. Ease of use, then, dictates unity of design, conceptual integrity.</span></p>
          <p xml:space="preserve" id="p_000298"><strong id="strong_000093" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000093">Aristocracy and Democracy</strong></p>
          <p xml:space="preserve" id="p_000299" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000299">Conceptual integrity in turn dictates that the design must proceed from one mind, or from a very small number of agreeing resonant minds.</p>
          <p xml:space="preserve" id="p_000300" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000300">Schedule pressures, however, dictate that system building needs many hands. Two techniques are available for resolving this dilemma. The first is a careful division of labor between architecture and implementation. The second is the new way of structuring programming implementation teams discussed in the previous chapter.</p>
          <p xml:space="preserve" id="p_000301" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000301">The separation of architectural effort from implementation is a very powerful way of getting conceptual integrity on very large projects. I myself have seen it used with great success on IBM's Stretch computer and on the System/360 computer product line.</p>
          <pagenum page="normal" id="p45" smilref="The_Mythical_Man_Month_Essay00002.smil#p45">45</pagenum>
          <p xml:space="preserve" id="p_000302" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000302">I have seen it fail through lack of application on Operating System/360.</p>
          <p xml:space="preserve" id="p_000303"><span class="text" id="span_000150" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000150">By the </span><em id="em_000076" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000076">architecture </em><span class="text" id="span_000151" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000151">of a system, I mean the complete and detailed specification of the user interface. For a computer this is the programming manual. For a compiler it is the language manual. For a control program it is the manuals for the language or languages used to invoke its functions. For the entire system it is the union of the manuals the user must consult to do his entire job.</span></p>
          <p xml:space="preserve" id="p_000304"><span class="text" id="span_000152" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000152">The architect of a system, like the architect of a building, is the user's agent. It is his job to bring professional and technical knowledge to bear in the unalloyed interest of the user, as opposed to the interests of the salesman, the fabricator, etc.</span><sup id="sup_000008" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000008">2</sup></p>
          <p xml:space="preserve" id="p_000305"><span class="text" id="span_000153" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000153">Architecture must be carefully distinguished from implementation. As Blaauw has said, "Where architecture tells </span><em id="em_000077" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000077">what </em><span class="text" id="span_000154" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000154">happens, implementation tells </span><em id="em_000078" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000078">how </em><span class="text" id="span_000155" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000155">it is made to happen."</span><sup id="sup_000009" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000009">3</sup><span class="text" id="span_000156" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000156"> He gives as a simple example a clock, whose architecture consists of the face, the hands, and the winding knob. When a child has learned this architecture, he can tell time as easily from a wristwatch as from a church tower. The implementation, however, and its realization, describe what goes on inside the case--powering by any of many mechanisms and accuracy control by any of many.</span></p>
          <p xml:space="preserve" id="p_000306"><span class="text" id="span_000157" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000157">In System/360, for example, a single computer architecture is implemented quite differently in each of some nine models. Conversely, a single implementation, the Model 30 data flow, memory, and microcode, serves at different times for four different architectures: a System/360 computer, a multiplex channel with up to 224 logically independent subchannels, a selector channel, and a 1401 computer.</span><sup id="sup_000010" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000010">4</sup></p>
          <p xml:space="preserve" id="p_000307"><span class="text" id="span_000158" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000158">The same distinction is equally applicable to programming systems. There is a U.S. standard Fortran IV. This is the architecture for many compilers. Within this architecture many implementations are possible: text-in-core or compiler-in-core, fast-compile or optimizing, syntax-directed or </span><em id="em_000079" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000079">ad-hoc. </em><span class="text" id="span_000159" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000159">Likewise any assembler language or job-control language admits of many implementations of the assembler or scheduler.</span></p>
          <pagenum page="normal" id="p46" smilref="The_Mythical_Man_Month_Essay00002.smil#p46">46</pagenum>
          <p xml:space="preserve" id="p_000308" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000308">Now we can deal with the deeply emotional question of aristocracy versus democracy. Are not the architects a new aristocracy, an intellectual elite, set up to tell the poor dumb implementers what to do? Has not all the creative work been sequestered for this elite, leaving the implementers as cogs in the machine? Won't one get a better product by getting the good ideas from all the team, following a democratic philosophy, rather than by restricting the development of specifications to a few?</p>
          <p xml:space="preserve" id="p_000309" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000309">As to the last question, it is the easiest. I will certainly not contend that only the architects will have good architectural ideas. Often the fresh concept does come from an implementer or from a user. However, all my own experience convinces me, and I have tried to show, that the conceptual integrity of a system determines its ease of use. Good features and ideas that do not integrate with a system's basic concepts are best left out. If there appear many such important but incompatible ideas, one scraps the whole system and starts again on an integrated system with different basic concepts.</p>
          <p xml:space="preserve" id="p_000310" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000310">As to the aristocracy charge, the answer must be yes and no. Yes, in the sense that there must be few architects, their product must endure longer than that of an implementer, and the architect sits at the focus of forces which he must ultimately resolve in the user's interest. If a system is to have conceptual integrity, someone must control the concepts. That is an aristocracy that needs no apology.</p>
          <p xml:space="preserve" id="p_000311" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000311">No, because the setting of external specifications is not more creative work than the designing of implementations. It is just different creative work. The design of an implementation, given an architecture, requires and allows as much design creativity, as many new ideas, and as much technical brilliance as the design of the external specifications. Indeed, the cost-performance ratio of the product will depend most heavily on the implementer, just as ease of use depends most heavily on the architect.</p>
          <p xml:space="preserve" id="p_000312" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000312">There are many examples from other arts and crafts that lead one to believe that discipline is good for art. Indeed, an artist's</p>
          <pagenum page="normal" id="p47" smilref="The_Mythical_Man_Month_Essay00002.smil#p47">47</pagenum>
          <p xml:space="preserve" id="p_000313" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000313">aphorism asserts, "Form is liberating." The worst buildings are those whose budget was too great for the purposes to be served. Bach's creative output hardly seems to have been squelched by the necessity of producing a limited-form cantata each week. I am sure that the Stretch computer would have had a better architecture had it been more tightly constrained; the constraints imposed by the System/360 Model 30's budget were in my opinion entirely beneficial for the Model 75's architecture.</p>
          <p xml:space="preserve" id="p_000314"><span class="text" id="span_000160" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000160">Similarly, I observe that the external provision of an architecture enhances, not cramps, the creative style of an implementing group. They focus at once on the part of the problem no one has addressed, and inventions begin to flow. In an unconstrained implementing group, most thought and debate goes into architectural decisions, and implementation proper gets short shrift.</span><sup id="sup_000011" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000011">5</sup></p>
          <p xml:space="preserve" id="p_000315"><span class="text" id="span_000161" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000161">This effect, which I have seen many times, is confirmed by R. W. Conway, whose group at Cornell built the PL/C compiler for the PL/I language. He says, "We finally decided to implement the language unchanged and unimproved, for the debates about language would have taken all our effort."</span><sup id="sup_000012" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000012">6</sup></p>
          <p xml:space="preserve" id="p_000316"><strong id="strong_000094" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000094">What Does the Implementer Do While Waiting?</strong></p>
          <p xml:space="preserve" id="p_000317" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000317">It is a very humbling experience to make a multimillion-dollar mistake, but it is also very memorable. I vividly recall the night we decided how to organize the actual writing of external specifications for OS/360. The manager of architecture, the manager of control program implementation, and I were threshing out the plan, schedule, and division of responsibilities.</p>
          <p xml:space="preserve" id="p_000318" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000318">The architecture manager had 10 good men. He asserted that they could write the specifications and do it right. It would take ten months, three more than the schedule allowed.</p>
          <p xml:space="preserve" id="p_000319" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000319">The control program manager had 150 men. He asserted that they could prepare the specifications, with the architecture team coordinating; it would be well-done and practical, and he could do it on schedule. Furthermore, if the architecture team did it, his 150 men would sit twiddling their thumbs for ten months.</p>
          <pagenum page="normal" id="p48" smilref="The_Mythical_Man_Month_Essay00002.smil#p48">48</pagenum>
          <p xml:space="preserve" id="p_000320"><span class="text" id="span_000162" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000162">To this the architecture manager responded that if I gave the control program team the responsibility, the result would </span><em id="em_000080" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000080">not </em><span class="text" id="span_000163" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000163">in fact be on time, but would also be three months late, and of much lower quality. I did, and it was. He was right on both counts. Moreover, the lack of conceptual integrity made the system far more costly to build and change, and I would estimate that it added a year to debugging time.</span></p>
          <p xml:space="preserve" id="p_000321" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000321">Many factors, of course, entered into that mistaken decision; but the overwhelming one was schedule time and the appeal of putting all those 150 implementers to work. It is this siren song whose deadly hazards I would now make visible.</p>
          <p xml:space="preserve" id="p_000322" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000322">When it is proposed that a small architecture team in fact write all the external specifications for a computer or a programming system, the implementers raise three objections:</p>
          <p xml:space="preserve" id="p_000323" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000323">* The specifications will be too rich in function and will not reflect practical cost considerations.</p>
          <p xml:space="preserve" id="p_000324" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000324">* The architects will get all the creative fun and shut out the inventiveness of the implementers.</p>
          <p xml:space="preserve" id="p_000325" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000325">* The many implementers will have to sit idly by while the specifications come through the narrow funnel that is the architecture team.</p>
          <p xml:space="preserve" id="p_000326" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000326">The first of these is a real danger, and it will be treated in the next chapter. The other two are illusions, pure and simple. As we have seen above, implementation is also a creative activity of the first order. The opportunity to be creative and inventive in implementation is not significantly diminished by working within a given external specification, and the order of creativity may even be enhanced by that discipline. The total product will surely be.</p>
          <p xml:space="preserve" id="p_000327" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000327">The last objection is one of timing and phasing. A quick answer is to refrain from hiring implementers until the specifications are complete. This is what is done when a building is constructed.</p>
          <p xml:space="preserve" id="p_000328" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000328">In the computer systems business, however, the pace is quicker, and one wants to compress the schedule as much as possible. How much can specification and building be overlapped?</p>
          <pagenum page="normal" id="p49" smilref="The_Mythical_Man_Month_Essay00002.smil#p49">49</pagenum>
          <p xml:space="preserve" id="p_000329" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000329">As Blaauw points out, the total creative effort involves three distinct phases: architecture, implementation, and realization. It turns out that these can in fact be begun in parallel and proceed simultaneously.</p>
          <p xml:space="preserve" id="p_000330" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000330">In computer design, for example, the implementer can start as soon as he has relatively vague assumptions about the manual, somewhat clearer ideas about the technology, and well-defined cost and performance objectives. He can begin designing data flows, control sequences, gross packaging concepts, and so on. He devises or adapts the tools he will need, especially the recordkeeping system, including the design automation system.</p>
          <p xml:space="preserve" id="p_000331" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000331">Meanwhile, at the realization level, circuits, cards, cables, frames, power supplies, and memories must each be designed, refined, and documented. This work proceeds in parallel with architecture and implementation.</p>
          <p xml:space="preserve" id="p_000332" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000332">The same thing is true in programming system design. Long before the external specifications are complete, the implementer has plenty to do. Given some rough approximations as to the function of the system that will be ultimately embodied in the external specifications, he can proceed. He must have well-defined space and time objectives. He must know the system configuration on which his product must run. Then he can begin designing module boundaries, table structures, pass or phase breakdowns, algorithms, and all kinds of tools. Some time, too, must be spent in communicating with the architect.</p>
          <p xml:space="preserve" id="p_000333"><span class="text" id="span_000164" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000164">Meanwhile, on the realization level there is much to be done also. Programming has a technology, too. If the machine is a new one, much work must be done on subroutine conventions, supervisory techniques, searching and sorting algorithms.</span><sup id="sup_000013" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000013">7</sup></p>
          <p xml:space="preserve" id="p_000334" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000334">Conceptual integrity does require that a system reflect a single philosophy and that the specification as seen by the user flow from a few minds. Because of the real division of labor into architecture, implementation, and realization, however, this does not imply that a system so designed will take longer to build. Experience shows the opposite, that the integral system goes together faster and</p>
          <pagenum page="normal" id="p50" smilref="The_Mythical_Man_Month_Essay00002.smil#p50">50</pagenum>
          <p xml:space="preserve" id="p_000335" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000335">takes less time to test. In effect, a widespread horizontal division of labor has been sharply reduced by a vertical division of labor, and the result is radically simplified communications and improved conceptual integrity.</p>
          <pagenum page="normal" id="p51" smilref="The_Mythical_Man_Month_Essay00002.smil#p51">51</pagenum>
          <p xml:space="preserve" id="p_000336" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000336">The Second-System Effect</p>
          <pagenum page="normal" id="p52" smilref="The_Mythical_Man_Month_Essay00002.smil#p52">52</pagenum>
          <p xml:space="preserve" id="p_000337" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000337">[Image: The drawing.]</p>
          <pagenum page="normal" id="p53" smilref="The_Mythical_Man_Month_Essay00002.smil#p53">53</pagenum>
        </level2>
        <level2 id="level2_000008">
          <h2 xml:space="preserve" id="h2_000008"><strong id="strong_000095"><em id="em_000081" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000081">The Second-System Effect</em></strong></h2>
          <p xml:space="preserve" id="p_000338"><em id="em_000082" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000082">Adde parvum parvo magnus acervus erit.</em></p>
          <p xml:space="preserve" id="p_000339"><span class="text" id="span_000165" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000165">[</span><em id="em_000083" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000083">Add little to little and there will be a big pile.</em><span class="text" id="span_000166" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000166">]</span></p>
          <p xml:space="preserve" id="p_000340"><em id="em_000084" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000084">OVID</em></p>
          <p xml:space="preserve" id="p_000341" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000341">Turning house for air traffic. Lithograph, Paris, 1882</p>
          <p xml:space="preserve" id="p_000342"><span class="text" id="span_000167" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000167">From </span><em id="em_000085" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000085">Le Vingtième Siècle </em><span class="text" id="span_000168" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000168">by A. Robida</span></p>
          <p xml:space="preserve" id="p_000343"><strong id="strong_000096" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000096">53</strong></p>
          <pagenum page="normal" id="p54" smilref="The_Mythical_Man_Month_Essay00002.smil#p54">54</pagenum>
          <p xml:space="preserve" id="p_000344" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000344">If one separates responsibility for functional specification from responsibility for building a fast, cheap product, what discipline bounds the architect's inventive enthusiasm?</p>
          <p xml:space="preserve" id="p_000345" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000345">The fundamental answer is thoroughgoing, careful, and sympathetic communication between architect and builder. Nevertheless there are finer-grained answers that deserve attention.</p>
          <p xml:space="preserve" id="p_000346"><strong id="strong_000097" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000097">Interactive Discipline for the Architect</strong></p>
          <p xml:space="preserve" id="p_000347" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000347">The architect of a building works against a budget, using estimating techniques that are later confirmed or corrected by the contractors' bids. It often happens that all the bids exceed the budget. The architect then revises his estimating technique upward and his design downward for another iteration. He may perhaps suggest to the contractors ways to implement his design more cheaply than they had devised.</p>
          <p xml:space="preserve" id="p_000348" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000348">An analogous process governs the architect of a computer system or a programming system. He has, however, the advantage of getting bids from the contractor at many early points in his design, almost any time he asks for them. He usually has the disadvantage of working with only one contractor, who can raise or lower his estimates to reflect his pleasure with the design. In practice, early and continuous communication can give the architect good cost readings and the builder confidence in the design without blurring the clear division of responsibilities.</p>
          <p xml:space="preserve" id="p_000349" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000349">The architect has two possible answers when confronted with an estimate that is too high: cut the design or challenge the estimate by suggesting cheaper implementations. This latter is inherently an emotion-generating activity. The architect is now challenging the builder's way of doing the builder's job. For it to be successful, the architect must</p>
          <p xml:space="preserve" id="p_000350" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000350">* remember that the builder has the inventive and creative responsibility for the implementation; so the architect suggests, not dictates;</p>
          <pagenum page="normal" id="p55" smilref="The_Mythical_Man_Month_Essay00002.smil#p55">55</pagenum>
          <p xml:space="preserve" id="p_000351"><span class="text" id="span_000169" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000169">* always be prepared to suggest </span><em id="em_000086" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000086">a </em><span class="text" id="span_000170" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000170">way of implementing anything he specifies, and be prepared to accept any other way that meets the objectives as well;</span></p>
          <p xml:space="preserve" id="p_000352" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000352">* deal quietly and privately in such suggestions;</p>
          <p xml:space="preserve" id="p_000353" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000353">* be ready to forego credit for suggested improvements.</p>
          <p xml:space="preserve" id="p_000354" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000354">Normally the builder will counter by suggesting changes to the architecture. Often he is right--some minor feature may have unexpectedly large costs when the implementation is worked out.</p>
          <p xml:space="preserve" id="p_000355"><strong id="strong_000098" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000098">Self-Discipline--The Second-System Effect</strong></p>
          <p xml:space="preserve" id="p_000356" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000356">An architect's first work is apt to be spare and clean. He knows he doesn't know what he's doing, so he does it carefully and with great restraint.</p>
          <p xml:space="preserve" id="p_000357" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000357">As he designs the first work, frill after frill and embellishment after embellishment occur to him. These get stored away to he used "next time." Sooner or later the first system is finished, and the architect, with firm confidence and a demonstrated mastery of that class of systems, is ready to build a second system.</p>
          <p xml:space="preserve" id="p_000358" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000358">This second is the most dangerous system a man ever designs. When he does his third and later ones, his prior experiences will confirm each other as to the general characteristics of such systems, and their differences will identify those parts of his experience that are particular and not generalizable.</p>
          <p xml:space="preserve" id="p_000359" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000359">The general tendency is to over-design the second system, using all the ideas and frills that were cautiously sidetracked on the first one. The result, as Ovid says, is a "big pile." For example, consider the IBM 709 architecture, later embodied in the 7090. This is an upgrade, a second system for the very successful and clean 704. The operation set is so rich and profuse that only about half of it was regularly used.</p>
          <p xml:space="preserve" id="p_000360" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000360">Consider as a stronger case the architecture, implementation, and even the realization of the Stretch computer, an outlet for the</p>
          <pagenum page="normal" id="p56" smilref="The_Mythical_Man_Month_Essay00002.smil#p56">56</pagenum>
          <p xml:space="preserve" id="p_000361" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000361">pent-up inventive desires of many people, and a second system for most of them. As Strachey says in a review:</p>
          <p xml:space="preserve" id="p_000362"><em id="em_000087" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000087">I get the impression that Stretch is in some way the end of one line of development. Like some early computer programs it is immensely ingenious, immensely complicated, and extremely effective, but somehow at the same time crude, wasteful, and inelegant, and one feels that there must be a better way of doing things.</em><sup id="sup_000014" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000014">1</sup></p>
          <p xml:space="preserve" id="p_000363"><span class="text" id="span_000171" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000171">Operating System/360 was the second system for most of its designers. Groups of its designers came from building the 1410-7010 disk operating system, the Stretch operating system, the Project Mercury real-time system, and IBSYS for the 7090. Hardly anyone had experience with </span><em id="em_000088" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000088">two </em><span class="text" id="span_000172" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000172">previous operating systems.</span><sup id="sup_000015" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000015">2</sup><span class="text" id="span_000173" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000173"> So OS/360 is a prime example of the second-system effect, a Stretch of the software art to which both the commendations and the reproaches of Strachey's critique apply unchanged.</span></p>
          <p xml:space="preserve" id="p_000364" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000364">For example, OS/360 devotes 26 bytes of the permanently resident date-turnover routine to the proper handling of December 31 on leap years (when it is Day 366). That might have been left to the operator.</p>
          <p xml:space="preserve" id="p_000365" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000365">The second-system effect has another manifestation somewhat different from pure functional embellishment. That is a tendency to refine techniques whose very existence has been made obsolete by changes in basic system assumptions. OS/360 has many examples of this.</p>
          <p xml:space="preserve" id="p_000366" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000366">Consider the linkage editor, designed to load separately-compiled programs and resolve their cross-references. Beyond this basic function it also handles program overlays. It is one of the finest overlay facilities ever built. It allows overlay structuring to be done externally, at linkage time, without being designed into the source code. It allows the overlay structure to be changed from run to run without recompilation. It furnishes a rich variety of useful options and facilities. In a sense it is the culmination of years of development of static overlay technique.</p>
          <pagenum page="normal" id="p57" smilref="The_Mythical_Man_Month_Essay00002.smil#p57">57</pagenum>
          <p xml:space="preserve" id="p_000367" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000367">Yet it is also the last and finest of the dinosaurs, for it belongs to a system in which multiprogramming is the normal mode and dynamic core allocation the basic assumption. This is in direct conflict with the notion of using static overlays. How much better the system would work if the efforts devoted to overlay management had been spent on making the dynamic core allocation and the dynamic cross-referencing facilities really fast!</p>
          <p xml:space="preserve" id="p_000368" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000368">Furthermore, the linkage editor requires so much space and itself contains many overlays that even when it is used just for linkage without overlay management, it is slower than most of the system compilers. The irony of this is that the purpose of the linker is to avoid recompilation. Like a skater whose stomach gets ahead of his feet, refinement proceeded until the system assumptions had been quite outrun.</p>
          <p xml:space="preserve" id="p_000369"><span class="text" id="span_000174" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000174">The TESTRAN debugging facility is another example of this tendency. It is the culmination of batch debugging facilities, furnishing truly elegant snapshot and core dump capabilities. It uses the control section concept and an ingenious generator technique to allow selective tracing and snapshotting without interpretive overhead or recompilation. The imaginative concepts of the Share Operating System</span><sup id="sup_000016" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000016">3</sup><span class="text" id="span_000175" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000175"> for the 709 have been brought to full bloom.</span></p>
          <p xml:space="preserve" id="p_000370" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000370">Meanwhile, the whole notion of batch debugging without recompilation was becoming obsolete. Interactive computing systems, using language interpreters or incremental compilers have provided the most fundamental challenge. But even in batch systems, the appearance of fast-compile/slow-execute compilers has made source-level debugging and snapshotting the preferred technique. How much better the system would have been if the TESTRAN effort had been devoted instead to building the interactive and fast-compile facilities earlier and better!</p>
          <p xml:space="preserve" id="p_000371" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000371">Yet another example is the scheduler, which provides truly excellent facilities for managing a fixed-batch job stream. In a real sense, this scheduler is the refined, improved, and embellished second system succeeding the 1410-7010 Disk Operating System,</p>
          <pagenum page="normal" id="p58" smilref="The_Mythical_Man_Month_Essay00002.smil#p58">58</pagenum>
          <p xml:space="preserve" id="p_000372" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000372">a batch system unmultiprogrammed except for input-output and intended chiefly for business applications. As such, the OS/360 scheduler is good. But it is almost totally uninfluenced by the OS/360 needs of remote job entry, multiprogramming, and permanently resident interactive subsystems. Indeed, the scheduler's design makes these hard.</p>
          <p xml:space="preserve" id="p_000373" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000373">How does the architect avoid the second-system effect? Well, obviously he can't skip his second system. But he can be conscious of the peculiar hazards of that system, and exert extra self-discipline to avoid functional ornamentation and to avoid extrapolation of functions that are obviated by changes in assumptions and purposes.</p>
          <p xml:space="preserve" id="p_000374"><span class="text" id="span_000176" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000176">A discipline that will open an architect's eyes is to assign each little function a value: capability </span><em id="em_000089" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000089">x </em><span class="text" id="span_000177" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000177">is worth not more than </span><em id="em_000090" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000090">m </em><span class="text" id="span_000178" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000178">bytes of memory and </span><em id="em_000091" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000091">n </em><span class="text" id="span_000179" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000179">microseconds per invocation. These values will guide initial decisions and serve during implementation as a guide and warning to all.</span></p>
          <p xml:space="preserve" id="p_000375" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000375">How does the project manager avoid the second-system effect? By insisting on a senior architect who has at least two systems under his belt. Too, by staying aware of the special temptations, he can ask the right questions to ensure that the philosophical concepts and objectives are fully reflected in the detailed design.</p>
          <pagenum page="normal" id="p59" smilref="The_Mythical_Man_Month_Essay00002.smil#p59">59</pagenum>
          <p xml:space="preserve" id="p_000376" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000376">Passing the Word</p>
          <pagenum page="normal" id="p60" smilref="The_Mythical_Man_Month_Essay00002.smil#p60">60</pagenum>
          <p xml:space="preserve" id="p_000377" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000377">[Image: The woman.]</p>
          <pagenum page="normal" id="p61" smilref="The_Mythical_Man_Month_Essay00002.smil#p61">61</pagenum>
        </level2>
        <level2 id="level2_000009">
          <h2 xml:space="preserve" id="h2_000009"><strong id="strong_000099"><em id="em_000092" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000092">Passing the Word</em></strong></h2>
          <p xml:space="preserve" id="p_000378"><em id="em_000093" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000093">He'll sit here and he'll say, "Do this! Do that!" </em><span class="text" id="span_000180" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000180">And nothing will happen.</span></p>
          <p xml:space="preserve" id="p_000379"><em id="em_000094" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000094">HARRYS. TRUMAN. ON PRESIDENTIAL POWER</em><strong id="strong_000100"><sup id="sup_000017" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000017">1</sup></strong></p>
          <p xml:space="preserve" id="p_000380"><span class="text" id="span_000181" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000181">"The Seven Trumpets" from </span><em id="em_000095" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000095">The Wells Apocalypse, </em><span class="text" id="span_000182" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000182">14th century The Bettman Archive</span></p>
          <p xml:space="preserve" id="p_000381"><strong id="strong_000101" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000101">61</strong></p>
          <pagenum page="normal" id="p62" smilref="The_Mythical_Man_Month_Essay00002.smil#p62">62</pagenum>
          <p xml:space="preserve" id="p_000382" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000382">Assuming that he has the disciplined, experienced architects and that there are many implemented, how shall the manager ensure that everyone hears, understands, and implements the architects' decisions? How can a group of 10 architects maintain the conceptual integrity of a system which 1000 men are building? A whole technology for doing this was worked out for the System/360 hardware design effort, and it is equally applicable to software projects.</p>
          <p xml:space="preserve" id="p_000383"><strong id="strong_000102" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000102">Written Specifications</strong><span class="text" id="span_000183" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000183">--</span><strong id="strong_000103" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000103">the Manual</strong></p>
          <p xml:space="preserve" id="p_000384"><span class="text" id="span_000184" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000184">The manual, or written specification, is a necessary tool, though not a sufficient one. The manual is the </span><em id="em_000096" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000096">external </em><span class="text" id="span_000185" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000185">specification of the product. It describes and prescribes every detail of what the user sees. As such, it is the chief product of the architect.</span></p>
          <p xml:space="preserve" id="p_000385" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000385">Round and round goes its preparation cycle, as feedback from users and implementers shows where the design is awkward to use or build. For the sake of implementers it is important that the changes be quantized--that there be dated versions appearing on a schedule.</p>
          <p xml:space="preserve" id="p_000386"><span class="text" id="span_000186" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000186">The manual must not only describe everything the user does see, including all interfaces; it must also refrain from describing what the user does not see. That is the implementer's business, and there his design freedom must be unconstrained. The architect must always be prepared to show </span><em id="em_000097" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000097">an </em><span class="text" id="span_000187" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000187">implementation for any feature he describes, but he must not attempt to dictate </span><em id="em_000098" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000098">the </em><span class="text" id="span_000188" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000188">implementation.</span></p>
          <p xml:space="preserve" id="p_000387" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000387">The style must be precise, full, and accurately detailed. A user will often refer to a single definition, so each one must repeat all the essentials and yet all must agree. This tends to make manuals dull reading, but precision is more important than liveliness.</p>
          <p xml:space="preserve" id="p_000388"><span class="text" id="span_000189" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000189">The unity of System/360's </span><em id="em_000099" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000099">Principles of Operation </em><span class="text" id="span_000190" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000190">springs from the fact that only two pens wrote it: Gerry Blaauw's and Andris Padegs'. The ideas are those of about ten men, but the casting of those decisions into prose specifications must be done by only one</span></p>
          <pagenum page="normal" id="p63" smilref="The_Mythical_Man_Month_Essay00002.smil#p63">63</pagenum>
          <p xml:space="preserve" id="p_000389"><span class="text" id="span_000191" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000191">or two, if the consistency of prose and product is to be maintained. For the writing of a definition will necessitate a host of mini-decisions which are not of full-debate importance. An example in System/360 is the detail of how the Condition Code is set after each operation. </span><em id="em_000100" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000100">Not </em><span class="text" id="span_000192" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000192">trivial, however, is the principle that such mini-decisions be made consistently throughout.</span></p>
          <p xml:space="preserve" id="p_000390"><span class="text" id="span_000193" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000193">I think the finest piece of manual writing I have ever seen is Blaauw's Appendix to </span><em id="em_000101" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000101">System/360 Principles of Operation. </em><span class="text" id="span_000194" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000194">This describes with care and precision the </span><em id="em_000102" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000102">limits </em><span class="text" id="span_000195" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000195">of System/360 compatibility. It defines compatibility, prescribes what is to be achieved, and enumerates those areas of external appearance where the architecture is intentionally silent and where results from one model may differ from those of another, where one copy of a given model may differ from another copy, or where a copy may differ even from itself after an engineering change. This is the level of precision to which manual writers aspire, and they must define what is </span><em id="em_000103" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000103">not </em><span class="text" id="span_000196" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000196">prescribed as carefully as what is.</span></p>
          <p xml:space="preserve" id="p_000391"><strong id="strong_000104" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000104">Formal Definitions</strong></p>
          <p xml:space="preserve" id="p_000392"><span class="text" id="span_000197" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000197">English, or any other human language, is not naturally a precision instrument for such definitions. Therefore the manual writer must strain himself and his language to achieve the precision needed. An attractive alternative is to use a formal notation for such definitions. After all, precision is the stock in trade, the </span><em id="em_000104" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000104">raison d'être </em><span class="text" id="span_000198" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000198">of formal notations.</span></p>
          <p xml:space="preserve" id="p_000393"><span class="text" id="span_000199" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000199">Let us examine the merits and weaknesses of formal definitions. As noted, formal definitions are precise. They tend to be complete; gaps show more conspicuously, so they are filled sooner. What they lack is comprehensibility. With English prose one can show structural principles, delineate structure in stages or levels, and give examples. One can readily mark exceptions and emphasize contrasts. Most important, one can explain </span><em id="em_000105" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000105">why. </em><span class="text" id="span_000200" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000200">The formal definitions put forward so far have inspired wonder at their elegance and confidence in their precision. But they have demanded</span></p>
          <pagenum page="normal" id="p64" smilref="The_Mythical_Man_Month_Essay00002.smil#p64">64</pagenum>
          <p xml:space="preserve" id="p_000394"><span class="text" id="span_000201" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000201">prose explanations to make their content easy to learn and teach. For these reasons, I think we will see future specifications to consist of both a formal definition </span><em id="em_000106" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000106">and </em><span class="text" id="span_000202" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000202">a prose definition.</span></p>
          <p xml:space="preserve" id="p_000395" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000395">An ancient adage warns, "Never go to sea with two chronometers; take one or three." The same thing clearly applies to prose and formal definitions. If one has both, one must be the standard, and the other must be a derivative description, clearly labeled as such. Either can be the primary standard. Algol 68 has a formal definition as standard and a prose definition as descriptive. PL/I has the prose as standard and the formal description as derivative. System/360 also has prose as standard with a derived formal description.</p>
          <p xml:space="preserve" id="p_000396"><span class="text" id="span_000203" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000203">Many tools are available for formal definition. The Backus-Naur Form is familiar for language definition, and it is amply discussed in the literature.</span><sup id="sup_000018" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000018">2</sup><span class="text" id="span_000204" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000204"> The formal description of PL/I uses new notions of abstract syntax, and it is adequately described.</span><sup id="sup_000019" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000019">3 </sup><span class="text" id="span_000205" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000205">Iverson's APL has been used to describe machines, most notably the IBM 7090</span><sup id="sup_000020" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000020">4</sup><span class="text" id="span_000206" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000206"> and System/360.</span><sup id="sup_000021" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000021">5</sup></p>
          <p xml:space="preserve" id="p_000397"><span class="text" id="span_000207" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000207">Bell and Newell have proposed new notations for describing both configurations and machine architectures, and they have illustrated these with several machines, including the DEC PDP-8,</span><sup id="sup_000022" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000022">6 </sup><span class="text" id="span_000208" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000208">the 7090,</span><sup id="sup_000023" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000023">6</sup><span class="text" id="span_000209" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000209"> and System/360.</span><sup id="sup_000024" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000024">7</sup></p>
          <p xml:space="preserve" id="p_000398" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000398">Almost all formal definitions turn out to embody or describe an implementation of the hardware or software system whose externals they are prescribing. Syntax can be described without this, but semantics are usually defined by giving a program that carries out the defined operation. This is of course an implementation, and as such it over-prescribes the architecture. So one must take care to indicate that the formal definition applies only to externals, and one must say what these are.</p>
          <p xml:space="preserve" id="p_000399" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000399">Not only is a formal definition an implementation, an implementation can serve as a formal definition. When the first compatible computers were built, this was exactly the technique used. The new machine was to match an existing machine. The manual was vague on some points? "Ask the machine!" A test program</p>
          <pagenum page="normal" id="p65" smilref="The_Mythical_Man_Month_Essay00002.smil#p65">65</pagenum>
          <p xml:space="preserve" id="p_000400" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000400">would be devised to determine the behavior, and the new machine would be built to match.</p>
          <p xml:space="preserve" id="p_000401" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000401">A programmed simulator of a hardware or software system can serve in precisely the same way. It is an implementation; it runs. So all questions of definition can be resolved by testing it.</p>
          <p xml:space="preserve" id="p_000402"><span class="text" id="span_000210" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000210">Using an implementation as a definition has some advantages. All questions can be settled unambiguously by experiment. Debate is never needed, so answers are quick. Answers are always as precise as one wants, and they are always correct, by definition. Opposed to these one has a formidable set of disadvantages. The implementation may over-prescribe even the externals. Invalid syntax always produces some result; in a policed system that result is an invalidity indication </span><em id="em_000107" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000107">and nothing more. </em><span class="text" id="span_000211" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000211">In an unpoliced system all kinds of side effects may appear, and these may have been used by programmers. When we undertook to emulate the IBM 1401 on System/360, for example, it developed that there were 30 different "curios"--side effects of supposedly invalid operations-- that had come into widespread use and had to be considered as part of the definition. The implementation as a definition overprescribed; it not only said what the machine must do, it also said a great deal about how it had to do it.</span></p>
          <p xml:space="preserve" id="p_000403"><span class="text" id="span_000212" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000212">Then, too, the implementation will sometimes give unexpected and unplanned answers when sharp questions are asked, and the </span><em id="em_000108" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000108">de facto </em><span class="text" id="span_000213" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000213">definition will often be found to be inelegant in these particulars precisely because they have never received any thought. This inelegance will often turn out to be slow or costly to duplicate in another implementation. For example, some machines leave trash in the multiplicand register after a multiplication. The precise nature of this trash turns out to be part of the </span><em id="em_000109" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000109">de facto </em><span class="text" id="span_000214" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000214">definition, yet duplicating it may preclude the use of a faster multiplication algorithm.</span></p>
          <p xml:space="preserve" id="p_000404" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000404">Finally, the use of an implementation as a formal definition is peculiarly susceptible to confusion as to whether the prose description or the formal description is in fact the standard. This is especially true of programmed simulations. One must also refrain</p>
          <pagenum page="normal" id="p66" smilref="The_Mythical_Man_Month_Essay00002.smil#p66">66</pagenum>
          <p xml:space="preserve" id="p_000405" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000405">from modifications to the implementation while it is serving as a standard.</p>
          <p xml:space="preserve" id="p_000406"><strong id="strong_000105" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000105">Direct Incorporation</strong></p>
          <p xml:space="preserve" id="p_000407" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000407">A lovely technique for disseminating and enforcing definitions is available for the software system architect. It is especially useful for establishing the syntax, if not the semantics, of intermodule interfaces. This technique is to design the declaration of the passed parameters or shared storage, and to require the implementations to include that declaration via a compile-time operation (a macro or a % INCLUDE in PL/I). If, in addition, the whole interface is referenced only by symbolic names, the declaration can be changed by adding or inserting new variables with only recompilation, not alteration, of the using program.</p>
          <p xml:space="preserve" id="p_000408"><strong id="strong_000106" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000106">Conferences and Courts</strong></p>
          <p xml:space="preserve" id="p_000409" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000409">Needless to say, meetings are necessary. The hundreds of man-to-man consultations must be supplemented by larger and more formal gatherings. We found two levels of these to be useful. The first is a weekly half-day conference of all the architects, plus official representatives of the hardware and software implementers, and the market planners. The chief system architect presides.</p>
          <p xml:space="preserve" id="p_000410" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000410">Anyone can propose problems or changes, but proposals are usually distributed in writing before the meeting. A new problem is usually discussed a while. The emphasis is on creativity, rather than merely decision. The group attempts to invent many solutions to problems, then a few solutions are passed to one or more of the architects for detailing into precisely worded manual change proposals.</p>
          <p xml:space="preserve" id="p_000411" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000411">Detailed change proposals then come up for decisions. These have been circulated and carefully considered by implementers and users, and the pros and cons are well delineated. If a consensus emerges, well and good. If not, the chief architect decides. Minutes</p>
          <pagenum page="normal" id="p67" smilref="The_Mythical_Man_Month_Essay00002.smil#p67">67</pagenum>
          <p xml:space="preserve" id="p_000412" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000412">are kept and decisions are formally, promptly, and widely disseminated.</p>
          <p xml:space="preserve" id="p_000413"><span class="text" id="span_000215" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000215">Decisions from the weekly conferences give quick results and allow work to proceed. If anyone is </span><em id="em_000110" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000110">too </em><span class="text" id="span_000216" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000216">unhappy, instant appeals to the project manager are possible, but this happens very rarely.</span></p>
          <p xml:space="preserve" id="p_000414" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000414">The fruitfulness of these meetings springs from several sources:</p>
          <p xml:space="preserve" id="p_000415"><strong id="strong_000107" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000107">1</strong><span class="text" id="span_000217" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000217">. The same group--architects, users, and implementers--meets weekly for months. No time is needed for bringing people up to date.</span></p>
          <p xml:space="preserve" id="p_000416"><strong id="strong_000108" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000108">2</strong><span class="text" id="span_000218" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000218">. The group is bright, resourceful, well versed in the issues, and deeply involved in the outcome. No one has an "advisory" role. Everyone is authorized to make binding commitments.</span></p>
          <p xml:space="preserve" id="p_000417"><strong id="strong_000109" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000109">3</strong><span class="text" id="span_000219" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000219">. When problems are raised, solutions are sought both within and outside the obvious boundaries.</span></p>
          <p xml:space="preserve" id="p_000418"><strong id="strong_000110" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000110">4</strong><span class="text" id="span_000220" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000220">. The formality of written proposals focuses attention, forces decision, and avoids committee-drafted inconsistencies.</span></p>
          <p xml:space="preserve" id="p_000419"><strong id="strong_000111" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000111">5</strong><span class="text" id="span_000221" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000221">. The clear vesting of decision-making power in the chief architect avoids compromise and delay.</span></p>
          <p xml:space="preserve" id="p_000420" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000420">As time goes by, some decisions don't wear well. Some minor matters have never been wholeheartedly accepted by one or another of the participants. Other decisions have developed unforeseen problems, and sometimes the weekly meeting didn't agree to reconsider these. So there builds up a backlog of minor appeals, open issues, or disgruntlements. To settle these we held annual supreme court sessions, lasting typically two weeks. (I would hold them every six months if I were doing it again.)</p>
          <p xml:space="preserve" id="p_000421" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000421">These sessions were held just before major freeze dates for the manual. Those present included not only the architecture group and the programmers' and implementers' architectural representatives, but also the managers of programming, marketing, and implementation efforts. The System/360 project manager presided. The agenda typically consisted of about 200 items, mostly minor, which were enumerated in charts placarded around the room. All</p>
          <pagenum page="normal" id="p68" smilref="The_Mythical_Man_Month_Essay00002.smil#p68">68</pagenum>
          <p xml:space="preserve" id="p_000422" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000422">sides were heard and decisions made. By the miracle of computerized text editing (and lots of fine staff work), each participant found an updated manual, embodying yesterday's decisions, at his seat every morning.</p>
          <p xml:space="preserve" id="p_000423" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000423">These "fall festivals" were useful not only for resolving decisions, but also for getting them accepted. Everyone was heard, everyone participated, everyone understood better the intricate constraints and interrelationships among decisions.</p>
          <p xml:space="preserve" id="p_000424"><strong id="strong_000112" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000112">Multiple Implementations</strong></p>
          <p xml:space="preserve" id="p_000425" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000425">System/360 architects had two almost unprecedented advantages: enough time to work carefully, and political clout equal to that of the implementers. The provision of enough time came from the schedule of the new technology; the political equality came from the simultaneous construction of multiple implementations. The necessity for strict compatibility among these served as the best possible enforcing agent for the specifications.</p>
          <p xml:space="preserve" id="p_000426" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000426">In most computer projects there comes a day when it is discovered that the machine and the manual don't agree. When the confrontation follows, the manual usually loses, for it can be changed far more quickly and cheaply than the machine. Not so, however, when there are multiple implementations. Then the delays and costs associated with fixing the errant machine can be overmatched by delays and costs in revising the machines that followed the manual faithfully.</p>
          <p xml:space="preserve" id="p_000427" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000427">This notion can be fruitfully applied whenever a programming language is being defined. One can be certain that several interpreters or compilers will sooner or later have to be built to meet various objectives. The definition will be cleaner and the discipline tighter if at least two implementations are built initially.</p>
          <p xml:space="preserve" id="p_000428"><strong id="strong_000113" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000113">The Telephone Log</strong></p>
          <p xml:space="preserve" id="p_000429" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000429">As implementation proceeds, countless questions of architectural interpretation arise, no matter how precise the specification. Obviously</p>
          <pagenum page="normal" id="p69" smilref="The_Mythical_Man_Month_Essay00002.smil#p69">69</pagenum>
          <p xml:space="preserve" id="p_000430" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000430">many such questions require amplifications and clarifications in the text. Others merely reflect misunderstandings.</p>
          <p xml:space="preserve" id="p_000431"><span class="text" id="span_000222" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000222">It is essential, however, to encourage the puzzled implementer to telephone the responsible architect and ask his question, rather than to guess and proceed. It is just as vital to recognize that the answers to such questions are </span><em id="em_000111" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000111">ex cathedra </em><span class="text" id="span_000223" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000223">architectural pronouncements that must be told to everyone.</span></p>
          <p xml:space="preserve" id="p_000432"><span class="text" id="span_000224" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000224">One useful mechanism is a </span><em id="em_000112" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000112">telephone log </em><span class="text" id="span_000225" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000225">kept by the architect. In it he records every question and every answer. Each week the logs of the several architects are concatenated, reproduced, and distributed to the users and implementers. While this mechanism is quite informal, it is both quick and comprehensive.</span></p>
          <p xml:space="preserve" id="p_000433"><strong id="strong_000114" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000114">Product Test</strong></p>
          <p xml:space="preserve" id="p_000434" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000434">The project manager's best friend is his daily adversary, the independent product-testing organization. This group checks machines and programs against specifications and serves as a devil's advocate, pinpointing every conceivable defect and discrepancy. Every development organization needs such an independent technical auditing group to keep it honest.</p>
          <p xml:space="preserve" id="p_000435" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000435">In the last analysis the customer is the independent auditor. In the merciless light of real use, every flaw will show. The product-testing group then is the surrogate customer, specialized for finding flaws. Time after time, the careful product tester will find places where the word didn't get passed, where the design decisions were not properly understood or accurately implemented. For this reason such a testing group is a necessary link in the chain by which the design word is passed, a link that needs to operate early and simultaneously with design.</p>
          <pagenum page="normal" id="p70" smilref="The_Mythical_Man_Month_Essay00002.smil#p70">70</pagenum>
          <p xml:space="preserve" id="p_000436" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000436">[Blank Page]</p>
          <pagenum page="normal" id="p71" smilref="The_Mythical_Man_Month_Essay00002.smil#p71">71</pagenum>
          <p xml:space="preserve" id="p_000437" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000437">Why Did the Tower of Babel Fail?</p>
          <pagenum page="normal" id="p72" smilref="The_Mythical_Man_Month_Essay00002.smil#p72">72</pagenum>
          <p xml:space="preserve" id="p_000438"><span class="text" id="span_000226" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000226">[Image: </span><em id="em_000113" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000113">Why Did the Tower of Babel Fail?</em><span class="text" id="span_000227" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000227">]</span></p>
          <pagenum page="normal" id="p73" smilref="The_Mythical_Man_Month_Essay00002.smil#p73">73</pagenum>
        </level2>
        <level2 id="level2_000010">
          <h2 xml:space="preserve" id="h2_000010"><strong id="strong_000115"><em id="em_000114" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000114">Why Did the Tower of Babel Fail?</em></strong></h2>
          <p xml:space="preserve" id="p_000439"><em id="em_000115" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000115">Now the whole earth used only one language, with few words. On the occasion of a migration from the east, men discovered a plain in the land of Shinar, and settled there. Then they said to one another, "Come, let us make bricks, burning them well." So they used bricks for stone, and bitumen for mortar. Then they said, "Come, let us build ourselves a city with a tower whose top shall reach the heavens (thus making a name for ourselves), so that we may not be scattered all over the earth." Then the Lord came down to look at the city and tower which human beings had built. The Lord said, "They are just one people, and they all have the same language. If this is what they can do as a beginning, then nothing that they resolve to do will be impossible for them. Come, let us go down, and there make such a babble of their language that they will not understand one another's speech." Thus the Lord dispersed them from there all over the earth, so that they had to stop building the city.</em></p>
          <p xml:space="preserve" id="p_000440"><em id="em_000116" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000116">GENESIS 11.1-8</em></p>
          <p xml:space="preserve" id="p_000441" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000441">P. Breughel, the Elder, "Turmbau zu Babel," 1563</p>
          <p xml:space="preserve" id="p_000442" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000442">Kunsthistorisches Museum, Vienna</p>
          <p xml:space="preserve" id="p_000443"><strong id="strong_000116" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000116">73</strong></p>
          <pagenum page="normal" id="p74" smilref="The_Mythical_Man_Month_Essay00002.smil#p74">74</pagenum>
          <p xml:space="preserve" id="p_000444"><strong id="strong_000117" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000117">A Management Audit of the Babel Project</strong></p>
          <p xml:space="preserve" id="p_000445" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000445">According to the Genesis account, the tower of Babel was man's second major engineering undertaking, after Noah's ark. Babel was the first engineering fiasco.</p>
          <p xml:space="preserve" id="p_000446" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000446">The story is deep and instructive on several levels. Let us, however, examine it purely as an engineering project, and see what management lessons can be learned. How well was their project equipped with the prerequisites for success? Did they have:</p>
          <p xml:space="preserve" id="p_000447"><strong id="strong_000118" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000118">1</strong><span class="text" id="span_000228" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000228">. A </span><em id="em_000117" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000117">clear mission? </em><span class="text" id="span_000229" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000229">Yes, although naively impossible. The project failed long before it ran into this fundamental limitation.</span></p>
          <p xml:space="preserve" id="p_000448"><strong id="strong_000119" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000119">2</strong><span class="text" id="span_000230" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000230">. </span><em id="em_000118" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000118">Manpower? </em><span class="text" id="span_000231" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000231">Plenty of it.</span></p>
          <p xml:space="preserve" id="p_000449"><strong id="strong_000120" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000120">3</strong><span class="text" id="span_000232" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000232">. </span><em id="em_000119" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000119">Materials? </em><span class="text" id="span_000233" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000233">Clay and asphalt are abundant in Mesopotamia.</span></p>
          <p xml:space="preserve" id="p_000450"><strong id="strong_000121" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000121">4</strong><span class="text" id="span_000234" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000234">. Enough </span><em id="em_000120" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000120">time? </em><span class="text" id="span_000235" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000235">Yes, there is no hint of any time constraint.</span></p>
          <p xml:space="preserve" id="p_000451"><strong id="strong_000122" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000122">5</strong><span class="text" id="span_000236" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000236">. Adequate </span><em id="em_000121" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000121">technology? </em><span class="text" id="span_000237" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000237">Yes, the pyramidal or conical structure is inherently stable and spreads the compressive load well. Clearly masonry was well understood. The project failed before it hit technological limitations.</span></p>
          <p xml:space="preserve" id="p_000452"><span class="text" id="span_000238" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000238">Well, if they had all of these things, why did the project fail? ' Where did they lack? In two respects--</span><em id="em_000122" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000122">communication, </em><span class="text" id="span_000239" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000239">and its consequent, </span><em id="em_000123" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000123">organization. </em><span class="text" id="span_000240" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000240">They were unable to talk with each other; hence they could not coordinate. When coordination failed, work ground to a halt. Reading between the lines we gather that lack of communication led to disputes, bad feelings, and group jealousies. Shortly the clans began to move apart, preferring isolation to wrangling.</span></p>
          <p xml:space="preserve" id="p_000453"><strong id="strong_000123" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000123">Communication in the Large Programming Project</strong></p>
          <p xml:space="preserve" id="p_000454" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000454">So it is today. Schedule disaster, functional misfits, and system bugs all arise because the left hand doesn't know what the right hand is doing. As work proceeds, the several teams slowly change the functions, sizes, and speeds of their own programs, and they explicitly or implicitly change their assumptions about the inputs available and the uses to be made of the outputs.</p>
          <pagenum page="normal" id="p75" smilref="The_Mythical_Man_Month_Essay00002.smil#p75">75</pagenum>
          <p xml:space="preserve" id="p_000455" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000455">For example, the implementer of a program-overlaying function may run into problems and reduce speed, relying on statistics that show how rarely this function will arise in application programs. Meanwhile, back at the ranch, his neighbor may be designing a major part of the supervisor so that it critically depends upon the speed of this function. This change in speed itself becomes a major specification change, and it needs to be proclaimed abroad and weighed from a system point of view.</p>
          <p xml:space="preserve" id="p_000456" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000456">How, then, shall teams communicate with one another? In as many ways as possible.</p>
          <p xml:space="preserve" id="p_000457"><span class="text" id="span_000241" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000241">* </span><em id="em_000124" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000124">Informally. </em><span class="text" id="span_000242" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000242">Good telephone service and a clear definition of intergroup dependencies will encourage the hundreds of calls upon which common interpretation of written documents depends.</span></p>
          <p xml:space="preserve" id="p_000458"><span class="text" id="span_000243" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000243">* </span><em id="em_000125" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000125">Meetings. </em><span class="text" id="span_000244" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000244">Regular project meetings, with one team after another giving technical briefings, are invaluable. Hundreds of minor misunderstandings get smoked out this way.</span></p>
          <p xml:space="preserve" id="p_000459"><span class="text" id="span_000245" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000245">* </span><em id="em_000126" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000126">Workbook. </em><span class="text" id="span_000246" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000246">A formal project workbook must be started at the beginning. This deserves a section by itself.</span></p>
          <p xml:space="preserve" id="p_000460"><strong id="strong_000124" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000124">The Project Workbook</strong></p>
          <p xml:space="preserve" id="p_000461"><strong id="strong_000125" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000125">What. </strong><span class="text" id="span_000247" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000247">The project workbook is not so much a separate document as it is a structure imposed on the documents that the project will be producing anyway.</span></p>
          <p xml:space="preserve" id="p_000462"><em id="em_000127" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000127">All </em><span class="text" id="span_000248" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000248">the documents of the project need to be part of this structure. This includes objectives, external specifications, interface specifications, technical standards, internal specifications, and administrative memoranda.</span></p>
          <p xml:space="preserve" id="p_000463"><strong id="strong_000126" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000126">Why. </strong><span class="text" id="span_000249" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000249">Technical prose is almost immortal. If one examines the genealogy of a customer manual for a piece of hardware or software, one can trace not only the ideas, but also many of the very sentences and paragraphs back to the first memoranda proposing the product or explaining the first design. For the technical writer, the paste-pot is as mighty as the pen.</span></p>
          <pagenum page="normal" id="p76" smilref="The_Mythical_Man_Month_Essay00002.smil#p76">76</pagenum>
          <p xml:space="preserve" id="p_000464" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000464">Since this is so, and since tomorrow's product-quality manuals will grow from today's memos, it is very important to get the structure of the documentation right. The early design of the project workbook ensures that the documentation structure itself is crafted, not haphazard. Moreover, the establishment of a structure molds later writing into segments that fit into that structure.</p>
          <p xml:space="preserve" id="p_000465" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000465">The second reason for the project workbook is control of the distribution of information. The problem is not to restrict information, but to ensure that relevant information gets to all the people who need it.</p>
          <p xml:space="preserve" id="p_000466" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000466">The first step is to number all memoranda, so that ordered lists of titles are available and each worker can see if he has what he wants. The organization of the workbook goes well beyond this to establish a tree-structure of memoranda. The tree-structure allows distribution lists to be maintained by subtree, if that is desirable.</p>
          <p xml:space="preserve" id="p_000467"><strong id="strong_000127" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000127">Mechanics</strong><span class="text" id="span_000250" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000250">. As with so many programming management problems, the technical memorandum problem gets worse nonlinearly as size increases. With 10 people, documents can simply be numbered. With 100 people, several linear sequences will often suffice. With 1000, scattered inevitably over several physical locations, the </span><em id="em_000128" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000128">need </em><span class="text" id="span_000251" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000251">for a structured workbook increases and the </span><em id="em_000129" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000129">size </em><span class="text" id="span_000252" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000252">of the workbook increases. How then shall the mechanics be handled?</span></p>
          <p xml:space="preserve" id="p_000468" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000468">I think this was well done on the OS/360 project. The need for a well-structured workbook was strongly urged by O. S. Locken, who had seen its effectiveness on his previous project, the 1410-7010 operating system.</p>
          <p xml:space="preserve" id="p_000469"><span class="text" id="span_000253" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000253">We quickly decided that </span><em id="em_000130" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000130">each </em><span class="text" id="span_000254" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000254">programmer should see </span><em id="em_000131" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000131">all </em><span class="text" id="span_000255" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000255">the material, i.e., should have a copy of the workbook in his own office.</span></p>
          <p xml:space="preserve" id="p_000470" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000470">Of critical importance is timely updating. The workbook must be current. This is very difficult to do if whole documents must be retyped for changes. In a looseleaf book, however, only pages need to be changed. We had available a computer-driven text-editing system, and this proved invaluable for timely maintenance. Offset</p>
          <pagenum page="normal" id="p77" smilref="The_Mythical_Man_Month_Essay00002.smil#p77">77</pagenum>
          <p xml:space="preserve" id="p_000471" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000471">masters were prepared directly on the computer printer, and turnaround time was less than a day. The recipient of all these updated pages has an assimilation problem, however. When he first receives a changed page, he wants to know, "What has been changed?" When he later consults it, he wants to know, "What is the definition today?"</p>
          <p xml:space="preserve" id="p_000472" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000472">The latter need is met by the continually maintained document. Highlighting of changes requires other steps. First, one must mark changed text on the page, e.g., by a vertical bar in the margin alongside every altered line. Second, one needs to distribute with the new pages a short, separately written change summary that lists the changes and remarks on their significance.</p>
          <p xml:space="preserve" id="p_000473" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000473">Our project had not been under way six months before we hit another problem. The workbook was about five feet thick! If we had stacked up the 100 copies serving programmers in our offices in Manhattan's Time-Life Building, they would have towered above the building itself. Furthermore, the daily change distribution averaged two inches, some 150 pages to be interfiled in the whole. Maintenance of the workbook began to take a significant time from each workday.</p>
          <p xml:space="preserve" id="p_000474" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000474">At this point we switched to microfiche, a change that saved a million dollars, even allowing for the cost of a microfiche reader for each office. We were able to arrange excellent turnaround on microfiche production; the workbook shrank from three cubic feet to one-sixth of a cubic foot and, most significantly, updates appeared in hundred-page chunks, reducing the interfiling problem a hundredfold.</p>
          <p xml:space="preserve" id="p_000475"><span class="text" id="span_000256" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000256">Microfiche has its drawbacks. From the manager's point of view the awkward interfiling of paper pages ensured that the changes were </span><em id="em_000132" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000132">read, </em><span class="text" id="span_000257" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000257">which was the purpose of the workbook. Microfiche would make workbook maintenance too easy, unless the update fiche are distributed with a paper document enumerating the changes.</span></p>
          <p xml:space="preserve" id="p_000476" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000476">Also, a microfiche cannot readily be highlighted, marked, and commented by the reader. Documents with which the reader has</p>
          <pagenum page="normal" id="p78" smilref="The_Mythical_Man_Month_Essay00002.smil#p78">78</pagenum>
          <p xml:space="preserve" id="p_000477" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000477">interacted are more effective for the author and more useful for the reader.</p>
          <p xml:space="preserve" id="p_000478" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000478">On balance I think the microfiche was a very happy mechanism, and I would recommend it over a paper workbook for very large projects.</p>
          <p xml:space="preserve" id="p_000479"><strong id="strong_000128" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000128">How would one do it today? </strong><span class="text" id="span_000258" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000258">With today's system technology available, I think the technique of choice is to keep the workbook on the direct-access file, marked with change bars and revision dates. Each user would consult it from a display terminal (typewriters are too slow). A change summary, prepared daily, would be stored in LIFO fashion at a fixed access point. The programmer would probably read that daily, but if he missed a day he would need only read longer the next day. As he read the change summary, he could interrupt to consult the changed text itself.</span></p>
          <p xml:space="preserve" id="p_000480" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000480">Notice that the workbook itself is not changed. It is still the assemblage of all project documentation, structured according to a careful design. The only change is in the mechanics of distribution and consultation. D.C. Engelbart and his colleagues at the Stanford Research Institute have built such a system and are using it to build and maintain documentation for the ARPA network.</p>
          <p xml:space="preserve" id="p_000481"><span class="text" id="span_000259" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000259">D. L. Parnas of Carnegie-Mellon University has proposed a still more radical solution.</span><sup id="sup_000025" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000025">1</sup><span class="text" id="span_000260" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000260"> His thesis is that the programmer is most effective if shielded from, rather than exposed to the details of construction of system parts other than his own. This presupposes that all interfaces are completely and precisely defined. While that is definitely sound design, dependence upon its perfect accomplishment is a recipe for disaster. A good information system both exposes interface errors and stimulates their correction.</span></p>
          <p xml:space="preserve" id="p_000482"><strong id="strong_000129" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000129">Organization in the Large Programming Project</strong></p>
          <p xml:space="preserve" id="p_000483"><span class="text" id="span_000261" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000261">If there are </span><em id="em_000133" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000133">n </em><span class="text" id="span_000262" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000262">workers on a project, there are (</span><em id="em_000134" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000134">n</em><sup id="sup_000026" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000026">2</sup><em id="em_000135" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000135">-n</em><span class="text" id="span_000263" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000263">)/2 interfaces across which there may be communication, and there are potentially almost 2" teams within which coordination must occur. The purpose of organization is to reduce the amount of communication</span></p>
          <pagenum page="normal" id="p79" smilref="The_Mythical_Man_Month_Essay00002.smil#p79">79</pagenum>
          <p xml:space="preserve" id="p_000484" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000484">and coordination necessary; hence organization is a radical attack on the communication problems treated above.</p>
          <p xml:space="preserve" id="p_000485"><span class="text" id="span_000264" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000264">The means by which communication is obviated are </span><em id="em_000136" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000136">division of labor </em><span class="text" id="span_000265" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000265">and </span><em id="em_000137" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000137">specialization of function. </em><span class="text" id="span_000266" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000266">The tree-like structure of organizations reflects the diminishing need for detailed communication when division and specialization of labor are applied.</span></p>
          <p xml:space="preserve" id="p_000486" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000486">In fact, a tree organization really arises as a structure of authority and responsibility. The principle that no man can serve two masters dictates that the authority structure be tree-like. But the communication structure is not so restricted, and the tree is a barely passable approximation to the communication structure, which is a network. The inadequacies of the tree approximation give rise to staff groups, task forces, committees, and even the matrix-type organization used in many engineering laboratories.</p>
          <p xml:space="preserve" id="p_000487" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000487">Let us consider a tree-like programming organization, and examine the essentials which any subtree must have in order to be effective. They are:</p>
          <p xml:space="preserve" id="p_000488"><strong id="strong_000130" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000130">1</strong><span class="text" id="span_000267" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000267">. a mission</span></p>
          <p xml:space="preserve" id="p_000489"><strong id="strong_000131" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000131">2</strong><span class="text" id="span_000268" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000268">. a producer</span></p>
          <p xml:space="preserve" id="p_000490"><strong id="strong_000132" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000132">3</strong><span class="text" id="span_000269" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000269">. a technical director or architect</span></p>
          <p xml:space="preserve" id="p_000491"><strong id="strong_000133" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000133">4</strong><span class="text" id="span_000270" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000270">. a schedule</span></p>
          <p xml:space="preserve" id="p_000492"><strong id="strong_000134" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000134">5</strong><span class="text" id="span_000271" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000271">. a division of labor</span></p>
          <p xml:space="preserve" id="p_000493"><strong id="strong_000135" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000135">6</strong><span class="text" id="span_000272" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000272">. interface definitions among the parts</span></p>
          <p xml:space="preserve" id="p_000494" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000494">All of this is obvious and conventional except the distinction between the producer and the technical director. Let us first consider the two roles, then their relationship.</p>
          <p xml:space="preserve" id="p_000495" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000495">What is the role of the producer? He assembles the team, divides the work, and establishes the schedule. He acquires and keeps on acquiring the necessary resources. This means that a major part of his role is communication outside the team, upwards and sideways. He establishes the pattern of communication and reporting within the team. Finally, he ensures that the schedule is met, shifting resources and organization to respond to changing circumstances.</p>
          <pagenum page="normal" id="p80" smilref="The_Mythical_Man_Month_Essay00002.smil#p80">80</pagenum>
          <p xml:space="preserve" id="p_000496" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000496">How about the technical director? He conceives of the design to be built, identifies its subparts, specifies how it will look from outside, and sketches its internal structure. He provides unity and conceptual integrity to the whole design; thus he serves as a limit on system complexity. As individual technical problems arise, he invents solutions for them or shifts the system design as required. He is, in Al Capp's lovely phrase, "inside-man at the skunk works." His communications are chiefly within the team. His work is almost completely technical.</p>
          <p xml:space="preserve" id="p_000497" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000497">Now it is clear that the talents required for these two roles are quite different. Talents come in many different combinations; and the particular combination embodied in the producer and the director must govern the relationship between them. Organizations must be designed around the people available; not people fitted into pure-theory organizations.</p>
          <p xml:space="preserve" id="p_000498" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000498">Three relationships are possible, and all three are found in successful practice.</p>
          <p xml:space="preserve" id="p_000499"><strong id="strong_000136" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000136">The producer and the technical director may be the same man. </strong><span class="text" id="span_000273" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000273">This is readily workable on very small teams, perhaps three to six programmers. On larger projects it is very rarely workable, for two reasons. First, the man with strong management talent and strong technical talent is rarely found. Thinkers are rare; doers are rarer; and thinker-doers are rarest.</span></p>
          <p xml:space="preserve" id="p_000500" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000500">Second, on the larger project each of the roles is necessarily a full-time job, or more. It is hard for the producer to delegate enough of his duties to give him any technical time. It is impossible for the director to delegate his without compromising the conceptual integrity of the design.</p>
          <p xml:space="preserve" id="p_000501"><strong id="strong_000137" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000137">The producer may be boss, the director his right-hand man. </strong><span class="text" id="span_000274" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000274">The difficulty here is to establish the director's </span><em id="em_000138" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000138">authority </em><span class="text" id="span_000275" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000275">to make technical decisions without impacting his time as would putting him in the management chain-of-command.</span></p>
          <p xml:space="preserve" id="p_000502" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000502">Obviously the producer must proclaim the director's technical authority, and he must back it in an extremely high proportion of</p>
          <pagenum page="normal" id="p81" smilref="The_Mythical_Man_Month_Essay00002.smil#p81">81</pagenum>
          <p xml:space="preserve" id="p_000503" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000503">the test cases that will arise. For this to be possible, the producer and the director must see alike on fundamental technical philosophy; they must talk out the main technical issues privately, before they really become timely; and the producer must have a high respect for the director's technical prowess.</p>
          <p xml:space="preserve" id="p_000504" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000504">Less obviously, the producer can do all sorts of subtle things with the symbols of status (office size, carpet, furnishing, carbon copies, etc.) to proclaim that the director, although outside the management line, is a source of decision power.</p>
          <p xml:space="preserve" id="p_000505" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000505">This can be made to work very effectively. Unfortunately it is rarely tried. The job done least well by project managers is to utilize the technical genius who is not strong on management talent.</p>
          <p xml:space="preserve" id="p_000506"><strong id="strong_000138" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000138">The director may be boss, and the producer his right-hand man. </strong><span class="text" id="span_000276" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000276">Robert Heinlein, in </span><em id="em_000139" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000139">The Man Who Sold the Moon, </em><span class="text" id="span_000277" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000277">describes such an arrangement in a graphic for-instance:</span></p>
          <p xml:space="preserve" id="p_000507"><em id="em_000140" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000140">Coster buried his face in his hands, then looked up. "I know it. I know what needs to be done</em><span class="text" id="span_000278" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000278">--</span><em id="em_000141" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000141">but every time I try to tackle a technical problem some bloody fool wants me to make a decision about trucks </em><span class="text" id="span_000279" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000279">--</span><em id="em_000142" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000142">or telephones</em><span class="text" id="span_000280" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000280">--</span><em id="em_000143" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000143">or some damn thing. I'm sorry, Mr. Harriman. I thought I could do it. "</em></p>
          <p xml:space="preserve" id="p_000508"><em id="em_000144" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000144">Harriman said very gently, "Don't let it throw you. Bob. You haven </em><span class="text" id="span_000281" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000281">7 </span><em id="em_000145" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000145">had much sleep lately, have you? Tell you what</em><span class="text" id="span_000282" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000282">--</span><em id="em_000146" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000146">we'll put over a fast one on Ferguson. I'll take that desk you 're at for a few days and build you a set-up to protect you against such things. I want that brain of yours thinking about reaction vectors and fuel efficiencies and design stresses, not about contracts for trucks. "Harriman stepped to the door, looked around the outer office and spotted a man who might or might not be the office's chief clerk. "Hey you! C'mere."</em></p>
          <p xml:space="preserve" id="p_000509"><em id="em_000147" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000147">The man looked startled, got up, came to the door and said, "Yes?"</em></p>
          <p xml:space="preserve" id="p_000510"><em id="em_000148" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000148">"I want that desk in the corner and all the stuff that's on it moved to an empty office on this floor, right away."</em></p>
          <pagenum page="normal" id="p82" smilref="The_Mythical_Man_Month_Essay00002.smil#p82">82</pagenum>
          <p xml:space="preserve" id="p_000511"><em id="em_000149" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000149">He supervised getting Coster and his other desk moved into another office, saw to it that the phone in the new office was disconnected, and, as an afterthought, had a couch moved in there, too. "We'll install a projector, and a drafting machine and bookcases and other junk like that tonight, " he told Coster. "Just make a list of anything you need </em><span class="text" id="span_000283" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000283">--</span><em id="em_000150" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000150">to work on </em><span class="text" id="span_000284" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000284">engineering." </span><em id="em_000151" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000151">He went back to the nominal chief-engineer 's office and got happily to work trying to figure where the organization stood and what was wrong with it.</em></p>
          <p xml:space="preserve" id="p_000512"><em id="em_000152" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000152">Some four hours later he took Berkeley in to meet Coster. The chief engineer was asleep at his desk, head cradled on his arms. Harriman started to back out, but Coster roused. "Oh! Sorry," he said, blushing, "I must have dozed off."</em></p>
          <p xml:space="preserve" id="p_000513"><em id="em_000153" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000153">"That's why I brought you the couch," said Harriman. "It's more restful. Bob, meet Jock Berkeley. He's your new slave. You remain chief engineer and top, undisputed boss. Jock is Lord High Everything Else. From now on you've got absolutely nothing to worry about</em><span class="text" id="span_000285" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000285">-- </span><em id="em_000154" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000154">except for the little detail of building a Moon ship."</em></p>
          <p xml:space="preserve" id="p_000514"><em id="em_000155" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000155">They shook hands. "Just one thing I ask, Mr. Coster," Berkeley said seriously, "bypass me all you want to</em><span class="text" id="span_000286" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000286">--</span><em id="em_000156" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000156">you'll have to run the technical show</em><span class="text" id="span_000287" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000287">--</span><em id="em_000157" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000157">but for God'</em><span class="text" id="span_000288" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000288">s </span><em id="em_000158" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000158">sake record it so I'll know what's going on. I'm going to have a switch placed on your desk that will operate a sealed recorder at my desk. "</em></p>
          <p xml:space="preserve" id="p_000515"><em id="em_000159" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000159">"Fine!" Coster was looking, Harriman thought, younger already.</em></p>
          <p xml:space="preserve" id="p_000516"><em id="em_000160" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000160">"And if you want something that is not technical, don't do it yourself. Just flip a switch and whistle; it'll get done!" Berkeley glanced at Harriman. "The Boss says he wants to talk with you about the real job. I'll leave you and get busy." He left.</em></p>
          <p xml:space="preserve" id="p_000517"><em id="em_000161" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000161">Harriman sat down; Coster followed suit and said, "Whew!"</em></p>
          <p xml:space="preserve" id="p_000518"><em id="em_000162" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000162">"Feel better?"</em></p>
          <p xml:space="preserve" id="p_000519"><em id="em_000163" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000163">"I like the looks of that fellow Berkeley."</em></p>
          <pagenum page="normal" id="p83" smilref="The_Mythical_Man_Month_Essay00002.smil#p83">83</pagenum>
          <p xml:space="preserve" id="p_000520"><em id="em_000164" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000164">"That's good; he's your twin brother from now on. Stop worrying; I've used him before. You'll think you're living in a well-run hospital."</em><sup id="sup_000027" smilref="The_Mythical_Man_Month_Essay00002.smil#sup_000027">2</sup></p>
          <p xml:space="preserve" id="p_000521" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000521">This account hardly needs any analytic commentary. This arrangement, too, can be made to work effectively.</p>
          <p xml:space="preserve" id="p_000522" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000522">I suspect that the last arrangement is best for small teams, as discussed in Chapter 3, "The Surgical Team." I think the producer as boss is a more suitable arrangement for the larger subtrees of a really big project.</p>
          <p xml:space="preserve" id="p_000523" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000523">The Tower of Babel was perhaps the first engineering fiasco, but it was not the last. Communication and its consequent, organization, are critical for success. The techniques of communication and organization demand from the manager much thought and as much experienced competence as the software technology itself.</p>
          <pagenum page="normal" id="p84" smilref="The_Mythical_Man_Month_Essay00002.smil#p84">84</pagenum>
          <p xml:space="preserve" id="p_000524" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000524">[Blank Page]</p>
          <pagenum page="normal" id="p85" smilref="The_Mythical_Man_Month_Essay00002.smil#p85">85</pagenum>
          <p xml:space="preserve" id="p_000525" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000525">Calling the Shot</p>
          <pagenum page="normal" id="p86" smilref="The_Mythical_Man_Month_Essay00002.smil#p86">86</pagenum>
          <p xml:space="preserve" id="p_000526"><span class="text" id="span_000289" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000289">[Image: </span><em id="em_000165" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000165">Calling the Shot</em><span class="text" id="span_000290" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000290">.]</span></p>
          <pagenum page="normal" id="p87" smilref="The_Mythical_Man_Month_Essay00002.smil#p87">87</pagenum>
        </level2>
        <level2 id="level2_000011">
          <h2 xml:space="preserve" id="h2_000011"><strong id="strong_000139"><em id="em_000166" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000166">Calling the Shot</em></strong></h2>
          <p xml:space="preserve" id="p_000527"><em id="em_000167" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000167">Practice is the best of all instructors.</em></p>
          <p xml:space="preserve" id="p_000528"><em id="em_000168" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000168">PUBULIUS</em></p>
          <p xml:space="preserve" id="p_000529"><em id="em_000169" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000169">Experience is a dear teacher, but fools will learn at no other.</em></p>
          <p xml:space="preserve" id="p_000530"><em id="em_000170" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000170">POOR RICHARDS ALMANAC</em></p>
          <p xml:space="preserve" id="p_000531" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000531">Douglass Crockwell, "Ruth calls his shot," World Series, 1932 Reproduced by permission of Esquire Magazine and Douglass Crockwell, © 1945 (renewed 1973) by Esquire, Inc., and courtesy of the National Baseball Museum.</p>
          <p xml:space="preserve" id="p_000532"><strong id="strong_000140" smilref="The_Mythical_Man_Month_Essay00002.smil#strong_000140">87</strong></p>
          <pagenum page="normal" id="p88" smilref="The_Mythical_Man_Month_Essay00002.smil#p88">88</pagenum>
          <p xml:space="preserve" id="p_000533" smilref="The_Mythical_Man_Month_Essay00002.smil#p_000533">How long will a system programming job take? How much effort will be required? How does one estimate?</p>
          <p xml:space="preserve" id="p_000534"><span class="text" id="span_000291" smilref="The_Mythical_Man_Month_Essay00002.smil#span_000291">I have earlier suggested ratios that seem to apply to planning time, coding, component test, and system test. First, one must say that one does </span><em id="em_000171" smilref="The_Mythical_Man_Month_Essay00002.smil#em_000171">not </em><span class="text" id="span_000292" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000292">estimate the entire task by estimating the coding portion only and then applying the ratios. The coding is only one-sixth or so of the problem, and errors in its estimate or in the ratios could lead to ridiculous'results.</span></p>
          <p xml:space="preserve" id="p_000535"><span class="text" id="span_000293" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000293">Second, one must say that data for building isolated small programs are not applicable to programming systems products. For a program averaging about 3200 words, for example, Sackman, Erikson, and Grant report an average code-plus-debug time of about 178 hours for a single programmer, a figure which would extrapolate to give an annual productivity of 35,800 statements per year. A program half that size took less than one-fourth as long, and extrapolated productivity is almost 80,000 statements per year.</span><sup id="sup_000028" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000028">1</sup><span class="text" id="span_000294" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000294"> Planning, documentation, testing, system integration, and training times must be added. The linear extrapolation of such sprint figures is meaningless. Extrapolation of times for the hundred-yard dash shows that a man can run a mile in under three minutes.</span></p>
          <p xml:space="preserve" id="p_000536"><span class="text" id="span_000295" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000295">Before dismissing them, however, let us note that these numbers, although not for strictly comparable problems, suggest that effort goes as a power of size </span><em id="em_000172" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000172">even </em><span class="text" id="span_000296" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000296">when no communication is involved except that of a man with his memories.</span></p>
          <p xml:space="preserve" id="p_000537"><span class="text" id="span_000297" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000297">Figure 8.1 tells the sad story. It illustrates results reported from a study done by Nanus and Farr</span><sup id="sup_000029" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000029">2</sup><span class="text" id="span_000298" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000298"> at System Development Corporation. This shows an exponent of 1.5; that is,</span></p>
          <p xml:space="preserve" id="p_000538"><span class="text" id="span_000299" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000299">effort = (constant) × (number of instructions)</span><sup id="sup_000030" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000030">1.5</sup><span class="text" id="span_000300" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000300">.</span></p>
          <p xml:space="preserve" id="p_000539"><span class="text" id="span_000301" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000301">Another SDC study reported by Weinwurm</span><sup id="sup_000031" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000031">3</sup><span class="text" id="span_000302" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000302"> also shows an exponent near 1.5.</span></p>
          <p xml:space="preserve" id="p_000540"><span class="text" id="span_000303" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000303">A few studies on programmer productivity have been made, and several estimating techniques have been proposed. Morin has prepared a survey of the published data.</span><sup id="sup_000032" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000032">4</sup><span class="text" id="span_000304" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000304"> Here I shall give only a few items that seem especially illuminating.</span></p>
          <pagenum page="normal" id="p89" smilref="The_Mythical_Man_Month_Essay00003.smil#p89">89</pagenum>
          <p xml:space="preserve" id="p_000541"><strong id="strong_000141" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000141">Portman's Data</strong></p>
          <p xml:space="preserve" id="p_000542"><span class="text" id="span_000305" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000305">Charles Portman, manager of ICL's Software Division, Computer Equipment Organization (Northwest) at Manchester, offers another useful personal insight.</span><sup id="sup_000033" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000033">5</sup></p>
          <p xml:space="preserve" id="p_000543"><span class="text" id="span_000306" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000306">[Chart: </span><strong id="strong_000142" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000142">Fig. 8.1</strong><span class="text" id="span_000307" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000307"> Programming effort as a function of program size.]</span></p>
          <p xml:space="preserve" id="p_000544" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000544">He found his programming teams missing schedules by about one-half--each job was taking approximately twice as long as estimated. The estimates were very careful, done by experienced teams estimating man-hours for several hundred subtasks on a PERT chart. When the slippage pattern appeared, he asked them to keep careful daily logs of time usage. These showed that the estimating error could be entirely accounted for by the fact that his teams were only realizing 50 percent of the working week as actual programming and debugging time. Machine downtime, higher-priority short unrelated jobs, meetings, paperwork, company</p>
          <pagenum page="normal" id="p90" smilref="The_Mythical_Man_Month_Essay00003.smil#p90">90</pagenum>
          <p xml:space="preserve" id="p_000545"><span class="text" id="span_000308" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000308">business, sickness, personal time, etc. accounted for the rest. In short, the estimates made an unrealistic assumption about the number of technical work hours per man-year. My own experience quite confirms his conclusion.</span><sup id="sup_000034" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000034">6</sup></p>
          <p xml:space="preserve" id="p_000546"><strong id="strong_000143" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000143">Aron's Data</strong></p>
          <p xml:space="preserve" id="p_000547"><span class="text" id="span_000309" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000309">Joel Aron, manager of Systems Technology at IBM in Gaithersburg, Maryland, has studied programmer productivity when working on nine large systems (briefly, </span><em id="em_000173" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000173">large </em><span class="text" id="span_000310" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000310">means more than 25 programmers and 30,000 deliverable instructions).</span><sup id="sup_000035" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000035">7</sup><span class="text" id="span_000311" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000311"> He divides such systems according to interactions among programmers (and system parts) and finds productivities as follows:</span></p>
          <p xml:space="preserve" id="p_000548" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000548">Very few interactions 10,000 instructions per man-year</p>
          <p xml:space="preserve" id="p_000549" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000549">Some interactions 5,000</p>
          <p xml:space="preserve" id="p_000550" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000550">Many interactions 1,500</p>
          <p xml:space="preserve" id="p_000551" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000551">The man-years do not include support and system test activities, only design and programming. When these figures are diluted by a factor of two to cover system test, they closely match Harr's data.</p>
          <p xml:space="preserve" id="p_000552"><strong id="strong_000144" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000144">Harr's Data</strong></p>
          <p xml:space="preserve" id="p_000553"><span class="text" id="span_000312" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000312">John Harr, manager of programming for the Bell Telephone Laboratories' Electronic Switching System, reported his and others' experience in a paper at the 1969 Spring Joint Computer Conference.</span><sup id="sup_000036" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000036">8</sup><span class="text" id="span_000313" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000313"> These data are shown in Figs. 8.2, 8.3, and 8.4.</span></p>
          <p xml:space="preserve" id="p_000554" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000554">Of these, Fig. 8.2 is the most detailed and the most useful. The first two jobs are basically control programs; the second two are basically language translators. Productivity is stated in terms of debugged words per man-year. This includes programming, component test, and system test. It is not clear how much of the planning effort, or effort in machine support, writing, and the like, is included.</p>
          <pagenum page="normal" id="p91" smilref="The_Mythical_Man_Month_Essay00003.smil#p91">91</pagenum>
          <p xml:space="preserve" id="p_000555" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000555">The productivities likewise fall into two classifications; those for control programs are about 600 words per man-year; those for translators are about 2200 words per man-year. Note that all four programs are of similar size--the variation is in size of the work groups, length of time, and number of modules. Which is cause and which is effect? Did the control programs require more people because they were more complicated? Or did they require more modules and more man-months because they were assigned more people? Did they take longer because of the greater complexity, or because more people were assigned? One can't be sure. The control programs were surely more complex. These uncertainties aside, the numbers describe the real productivities achieved on a large system, using present-day programming techniques. As such they are a real contribution.</p>
          <p xml:space="preserve" id="p_000556"><strong id="strong_000145" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000145">Fig. 8.2</strong><span class="text" id="span_000314" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000314"> Summary of four No. 1 ESS program jobs</span></p>
          <table id="table_000001">
            <tr id="tr_000001">
              <td colspan="1" rowspan="1" id="td_000001" />
              <td colspan="1" rowspan="1" id="td_000002">
                <p xml:space="preserve" id="p_000557" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000557">Prog. units</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000003">
                <p xml:space="preserve" id="p_000558" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000558">Number of programmers</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000004">
                <p xml:space="preserve" id="p_000559" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000559">Years</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000005">
                <p xml:space="preserve" id="p_000560" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000560">Man-years</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000006">
                <p xml:space="preserve" id="p_000561" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000561">Program words</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000007">
                <p xml:space="preserve" id="p_000562" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000562">Words/ man-yr.</p>
              </td>
            </tr>
            <tr id="tr_000002">
              <td colspan="1" rowspan="1" id="td_000008">
                <p xml:space="preserve" id="p_000563" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000563">Operational</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000009">
                <p xml:space="preserve" id="p_000564" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000564">50</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000010">
                <p xml:space="preserve" id="p_000565" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000565">83</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000011">
                <p xml:space="preserve" id="p_000566" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000566">4</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000012">
                <p xml:space="preserve" id="p_000567" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000567">101</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000013">
                <p xml:space="preserve" id="p_000568" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000568">52,000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000014">
                <p xml:space="preserve" id="p_000569" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000569">515</p>
              </td>
            </tr>
            <tr id="tr_000003">
              <td colspan="1" rowspan="1" id="td_000015">
                <p xml:space="preserve" id="p_000570" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000570">Maintenance</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000016">
                <p xml:space="preserve" id="p_000571" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000571">36</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000017">
                <p xml:space="preserve" id="p_000572" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000572">60</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000018">
                <p xml:space="preserve" id="p_000573" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000573">4</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000019">
                <p xml:space="preserve" id="p_000574" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000574">81</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000020">
                <p xml:space="preserve" id="p_000575" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000575">51,000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000021">
                <p xml:space="preserve" id="p_000576" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000576">630</p>
              </td>
            </tr>
            <tr id="tr_000004">
              <td colspan="1" rowspan="1" id="td_000022">
                <p xml:space="preserve" id="p_000577" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000577">Compiler</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000023">
                <p xml:space="preserve" id="p_000578" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000578">13</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000024">
                <p xml:space="preserve" id="p_000579" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000579">9</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000025">
                <p xml:space="preserve" id="p_000580" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000580">2%</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000026">
                <p xml:space="preserve" id="p_000581" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000581">17</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000027">
                <p xml:space="preserve" id="p_000582" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000582">38,000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000028">
                <p xml:space="preserve" id="p_000583" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000583">2230</p>
              </td>
            </tr>
            <tr id="tr_000005">
              <td colspan="1" rowspan="1" id="td_000029">
                <p xml:space="preserve" id="p_000584" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000584">Translator (Data assembler)</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000030">
                <p xml:space="preserve" id="p_000585" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000585">15</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000031">
                <p xml:space="preserve" id="p_000586" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000586">13</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000032">
                <p xml:space="preserve" id="p_000587"><em id="em_000174" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000174">2%</em></p>
              </td>
              <td colspan="1" rowspan="1" id="td_000033">
                <p xml:space="preserve" id="p_000588" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000588">11</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000034">
                <p xml:space="preserve" id="p_000589" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000589">25,000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000035">
                <p xml:space="preserve" id="p_000590" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000590">2270</p>
              </td>
            </tr>
          </table>
          <p xml:space="preserve" id="p_000591" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000591">Figures 8.3 and 8.4 show some interesting data on programming and debugging rates as-compared to predicted rates.</p>
          <pagenum page="normal" id="p92" smilref="The_Mythical_Man_Month_Essay00003.smil#p92">92</pagenum>
          <p xml:space="preserve" id="p_000592"><span class="text" id="span_000315" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000315">[Chart: </span><strong id="strong_000146" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000146">Fig. 8.3</strong><span class="text" id="span_000316" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000316"> ESS predicted and actual programming rates.]</span></p>
          <p xml:space="preserve" id="p_000593"><span class="text" id="span_000317" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000317">[Chart: </span><strong id="strong_000147" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000147">Fig. 8.4</strong><span class="text" id="span_000318" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000318"> ESS predicted and actual debugging rates.]</span></p>
          <pagenum page="normal" id="p93" smilref="The_Mythical_Man_Month_Essay00003.smil#p93">93</pagenum>
          <p xml:space="preserve" id="p_000594"><strong id="strong_000148" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000148">OS/360 Data</strong></p>
          <p xml:space="preserve" id="p_000595" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000595">IBM OS/360 experience, while not available in the detail of Harr's data, confirms it. Productivities in range of 600-800 debugged instructions per man-year were experienced by control program groups. Productivities in the 2000-3000 debugged instructions per man-year were achieved by language translator groups. These include planning done by the group, coding component test, system test, and some support activities. They are comparable to Harr's data, so far as I can tell.</p>
          <p xml:space="preserve" id="p_000596"><span class="text" id="span_000319" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000319">Aron's data, Harr's data, and the OS/360 data all confirm striking differences in productivity related to the complexity and difficulty of the task itself. My guideline in the morass of estimating complexity is that compilers are three times as bad as normal batch application programs, and operating systems are three times as bad as compilers.</span><sup id="sup_000037" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000037">9</sup></p>
          <p xml:space="preserve" id="p_000597"><strong id="strong_000149" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000149">Corbató's Data</strong></p>
          <p xml:space="preserve" id="p_000598"><span class="text" id="span_000320" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000320">Both Harr's data and OS/360 data are for assembly language programming. Little data seem to have been published on system programming productivity using higher-level languages. Corbató of MIT's Project MAC reports, however, a mean productivity of 1200 lines of debugged PL/I statements per man-year on the MULTICS system (between 1 and 2 million words).</span><sup id="sup_000038" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000038">10</sup></p>
          <p xml:space="preserve" id="p_000599" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000599">This number is very exciting. Like the other projects, MULTICS includes control programs and language translators. Like the others, it is producing a system programming product, tested and documented. The data seem to be comparable in terms of kind of effort included. And the productivity number is a good average between the control program and translator productivities of other projects.</p>
          <p xml:space="preserve" id="p_000600"><span class="text" id="span_000321" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000321">But Corbató's number is </span><em id="em_000175" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000175">lines </em><span class="text" id="span_000322" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000322">per man-year, not </span><em id="em_000176" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000176">words! </em><span class="text" id="span_000323" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000323">Each statement in his system corresponds to about three to five words of handwritten code! This suggests two important conclusions.</span></p>
          <pagenum page="normal" id="p94" smilref="The_Mythical_Man_Month_Essay00003.smil#p94">94</pagenum>
          <p xml:space="preserve" id="p_000601"><span class="text" id="span_000324" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000324">* Productivity seems constant in terms of elementary statements, a conclusion that is reasonable in terms of the thought a statement requires and the errors it may include.</span><sup id="sup_000039" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000039">11</sup></p>
          <p xml:space="preserve" id="p_000602"><span class="text" id="span_000325" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000325">* Programming productivity may be increased as much as five times when a suitable high-level language is used.</span><sup id="sup_000040" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000040">12</sup></p>
          <pagenum page="normal" id="p95" smilref="The_Mythical_Man_Month_Essay00003.smil#p95">95</pagenum>
          <p xml:space="preserve" id="p_000603" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000603">Ten Pounds in a Five-Pound Sack</p>
          <pagenum page="normal" id="p96" smilref="The_Mythical_Man_Month_Essay00003.smil#p96">96</pagenum>
          <p xml:space="preserve" id="p_000604"><span class="text" id="span_000326" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000326">[Image: </span><em id="em_000177" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000177">Ten Pounds in a Five-Pound Sack</em><span class="text" id="span_000327" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000327">.]</span></p>
          <pagenum page="normal" id="p97" smilref="The_Mythical_Man_Month_Essay00003.smil#p97">97</pagenum>
        </level2>
        <level2 id="level2_000012">
          <h2 xml:space="preserve" id="h2_000012"><strong id="strong_000150"><em id="em_000178" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000178">Ten Pounds in a Five-Pound Sack</em></strong></h2>
          <p xml:space="preserve" id="p_000605"><em id="em_000179" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000179">The author should gaze at Noah, and ... learn, as they did in the Ark, to crowd a great deal of matter into a very small compass.</em></p>
          <p xml:space="preserve" id="p_000606"><em id="em_000180" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000180">SYDNEY SMITH. </em><span class="text" id="span_000328" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000328">EDINBURGH REVIEW</span></p>
          <p xml:space="preserve" id="p_000607" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000607">Engraved from a painting by Heywood Hardy The Bettman Archive</p>
          <p xml:space="preserve" id="p_000608"><strong id="strong_000151" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000151">97</strong></p>
          <pagenum page="normal" id="p98" smilref="The_Mythical_Man_Month_Essay00003.smil#p98">98</pagenum>
          <p xml:space="preserve" id="p_000609"><strong id="strong_000152" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000152">Program Space as Cost</strong></p>
          <p xml:space="preserve" id="p_000610" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000610">How big is it? Aside from running time, the space occupied by a program is a principal cost. This is true even for proprietary programs, where the user pays the author a fee that is essentially a share of the development cost. Consider the IBM APL interactive software system. It rents for $400 per month and, when used, takes at least 160 K bytes of memory. On a Model 165, memory rents for about $12 per kilobyte per month. If the program is available full-time, one pays $400 software rent and $1920 memory rent for using the program. If one uses the APL system only four hours a day, the costs are $400 software rent and $320 memory rent per month.</p>
          <p xml:space="preserve" id="p_000611" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000611">One frequently hears horror expressed that a 2 M byte machine may have 400 K devoted to its operating system. This is as foolish as criticizing a Boeing 747 because it costs $27 million. One must also ask, "What does it do?" What does one get in ease-of-use and in performance (via efficient system utilization) for the dollars so spent? Could the $4800 per month thus invested in memory rental have been more fruitfully spent for other hardware, for programmers, for application programs?</p>
          <p xml:space="preserve" id="p_000612"><span class="text" id="span_000329" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000329">The system designer puts part of his total hardware resource into resident-program memory when he thinks it will do more for the user in that form than as adders, disks, etc. To do otherwise would be grossly irresponsible. And the result must be judged as a whole. No one can criticize a programming system for size </span><em id="em_000181" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000181">per se </em><span class="text" id="span_000330" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000330">and at the same time consistently advocate closer integration of hardware and software design.</span></p>
          <p xml:space="preserve" id="p_000613" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000613">Since size is such a large part of the user cost of a programming system product, the builder must set size targets, control size, and devise size-reduction techniques, just as the hardware builder sets component-count targets, controls component count, and devises count-reduction techniques. Like any cost, size itself is not bad, but unnecessary size is.</p>
          <pagenum page="normal" id="p99" smilref="The_Mythical_Man_Month_Essay00003.smil#p99">99</pagenum>
          <p xml:space="preserve" id="p_000614"><strong id="strong_000153" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000153">Size Control</strong></p>
          <p xml:space="preserve" id="p_000615" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000615">For the project manager, size control is partly a technical job and partly a managerial one. One has to study users and their applications to set the sizes of the systems to be offered. Then these systems have to be subdivided, and each component given a size target. Since size-speed trade-offs come in rather big quantum jumps, setting size targets is a tricky business, requiring knowledge of the available trade-offs within each piece. The wise manager also saves himself a kitty, to be allocated as work proceeds.</p>
          <p xml:space="preserve" id="p_000616" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000616">In OS/360, even though all of this was done very carefully, still other lessons had to be painfully learned.</p>
          <p xml:space="preserve" id="p_000617" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000617">First, setting size targets for core is not enough; one has to budget all aspects of size. In most previous operating systems, systems residence had been on tape, and the long search times of tape meant that one was not tempted to use it casually to bring in program segments. OS/360 was disk-resident, like its immediate predecessors, the Stretch Operating System and the 1410-7010 Disk Operating System. Its builders rejoiced in the freedom of cheap disk accesses. The initial result was disastrous to performance.</p>
          <p xml:space="preserve" id="p_000618"><span class="text" id="span_000331" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000331">In setting core sizes for each component, we had not simultaneously set access budgets. As anyone with 20-20 hindsight would expect, a programmer who found his program slopping over his core target broke it into overlays. This process in itself added to the total size and slowed execution down. Most seriously, our management control system neither measured nor caught this. Each man reported as to how much </span><em id="em_000182" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000182">core </em><span class="text" id="span_000332" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000332">he was using, and since he was within target, no one worried.</span></p>
          <p xml:space="preserve" id="p_000619" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000619">Fortunately, there came a day early in the effort when the OS/360 performance simulator began to work. The first result indicated deep trouble. Fortran H, on a Model 65 with drums, simulated compiling at five statements per minute! Digging-in showed that the control program modules were each making</p>
          <pagenum page="normal" id="p100" smilref="The_Mythical_Man_Month_Essay00003.smil#p100">100</pagenum>
          <p xml:space="preserve" id="p_000620" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000620">many, many disk accesses. Even high-frequency supervisor modules were making many trips to the well, and the result was quite analogous to page thrashing.</p>
          <p xml:space="preserve" id="p_000621"><span class="text" id="span_000333" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000333">The first moral is clear: Set </span><em id="em_000183" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000183">total </em><span class="text" id="span_000334" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000334">size budgets as well as resident-space budgets; set budgets on backing-store accesses as well as on sizes.</span></p>
          <p xml:space="preserve" id="p_000622" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000622">The next lesson was very similar. The space budgets were set before precise functional allocations were made to each module. As a result, any programmer in size trouble examined his code to see what he could throw over the fence into a neighbor's space. So buffers managed by the control program became part of the user's space. More seriously, so did all kinds of control blocks, and the effect was utterly compromising to the security and protection of the system.</p>
          <p xml:space="preserve" id="p_000623" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000623">So the second moral is also clear: Define exactly what a module must do when you specify how big it must be.</p>
          <p xml:space="preserve" id="p_000624" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000624">A third and deeper lesson shows through these experiences. The project was large enough and management communication poor enough to prompt many members of the team to see themselves as contestants making brownie points, rather than as builders making programming products. Each suboptimized his piece to meet his targets; few stopped to think about the total effect on the customer. This breakdown in orientation and communication is a major hazard for large projects. All during implementation, the system architects must maintain continual vigilance to ensure continued system integrity. Beyond this policing mechanism, however, lies the matter of attitude of the implementers themselves. Fostering a total-system, user-oriented attitude may well be the most important function of the programming manager.</p>
          <p xml:space="preserve" id="p_000625"><strong id="strong_000154" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000154">Space Techniques</strong></p>
          <p xml:space="preserve" id="p_000626" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000626">No amount of space budgeting and control can make a program small. That requires invention and craftsmanship.</p>
          <pagenum page="normal" id="p101" smilref="The_Mythical_Man_Month_Essay00003.smil#p101">101</pagenum>
          <p xml:space="preserve" id="p_000627" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000627">Obviously, more function means more space, speed being held constant. So the first area of craftsmanship is in trading function for size. Here there comes an early and deep policy question. How much of that choice shall be reserved for the user? One can design a program with many optional features, each of which takes a little space. One can design a generator that will take an option list and tailor a program to it. But for any particular set of options, a more monolithic program would take less space. It's rather like a car; if the map light, cigarette lighter, and clock are priced together as a single option, the package will cost less than if one can choose each separately. So the designer must decide how fine-grained the user choice of options will be.</p>
          <p xml:space="preserve" id="p_000628" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000628">In designing a system for a range of memory sizes, another basic question arises. A limiting effect keeps the range of suitability from being made arbitrarily wide, even with fine-grained modularity of function. In the smallest system, most modules will be overlaid. A substantial part of the smallest system's resident space must be set aside as a transient or paging area into which other parts are fetched. The size of this determines the size of all modules. And breaking functions into small modules costs both performance and space. So a large system, which can afford a transient area twenty times as large, only saves accesses thereby. It still suffers in both speed and space because the module size is so small. This effect limits the maximum efficient system that can be generated from the modules of a small system.</p>
          <p xml:space="preserve" id="p_000629" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000629">The second area of craftsmanship is space-time trade-offs. For a given function, the more space, the faster. This is true over an amazingly large range. It is this fact that makes it feasible to set space budgets.</p>
          <p xml:space="preserve" id="p_000630" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000630">The manager can do two things to help his team make good space-time trade-offs. One is to ensure that they are trained in programming technique, not just left to rely on native wit and previous experience. For a new language or machine this is especially important. The peculiarities of its skillful use need to be</p>
          <pagenum page="normal" id="p102" smilref="The_Mythical_Man_Month_Essay00003.smil#p102">102</pagenum>
          <p xml:space="preserve" id="p_000631" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000631">learned quickly and shared widely, perhaps with special prizes or praises for new techniques.</p>
          <p xml:space="preserve" id="p_000632" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000632">The second is to recognize that programming has a technology, and components need to be fabricated. Every project needs a notebook full of good subroutines or macros for queuing, searching, hashing, and sorting. For each such function the notebook should have at least two programs, the quick and the squeezed. The development of such technology is an important realization task that can be done in parallel with system architecture.</p>
          <p xml:space="preserve" id="p_000633"><strong id="strong_000155" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000155">Representation Is the Essence of Programming</strong></p>
          <p xml:space="preserve" id="p_000634"><span class="text" id="span_000335" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000335">Beyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of stategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an </span><em id="em_000184" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000184">n</em><span class="text" id="span_000336" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000336"> log </span><em id="em_000185" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000185">n </em><span class="text" id="span_000337" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000337">sort for an </span><em id="em_000186" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000186">n</em><sup id="sup_000041" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000041">2</sup><span class="text" id="span_000338" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000338"> set of comparisons.</span></p>
          <p xml:space="preserve" id="p_000635" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000635">Much more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of a program lies. Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won't usually need your flowcharts; they'll be obvious.</p>
          <p xml:space="preserve" id="p_000636"><span class="text" id="span_000339" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000339">It is easy to multiply examples of the power of representations. I recall a young man undertaking to build an elaborate console interpreter for an IBM 650. He ended up packing it onto an incredibly small amount of space by building an interpreter for the interpreter, recognizing that human interactions are slow and infrequent, but space was dear. Digitek's elegant little Fortran compiler uses a very dense, specialized representation for the compiler code itself, so that external storage is not needed. That time lost in decoding this representation is gained back tenfold by avoiding input-output. (The exercises at the end of Chapter 6 in Brooks and Iverson, </span><em id="em_000187" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000187">Automatic Data Processing</em><sup id="sup_000042" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000042">1</sup><span class="text" id="span_000340" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000340"> include a collection of such examples, as do many of Knuth's exercises.</span><sup id="sup_000043" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000043">2</sup><span class="text" id="span_000341" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000341">)</span></p>
          <pagenum page="normal" id="p103" smilref="The_Mythical_Man_Month_Essay00003.smil#p103">103</pagenum>
          <p xml:space="preserve" id="p_000637"><span class="text" id="span_000342" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000342">The programmer at wit's end for lack of space can often do best by disentangling himself from his code, rearing back, and contemplating his data. Representation </span><em id="em_000188" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000188">is </em><span class="text" id="span_000343" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000343">the essence of programming.</span></p>
          <pagenum page="normal" id="p104" smilref="The_Mythical_Man_Month_Essay00003.smil#p104">104</pagenum>
          <p xml:space="preserve" id="p_000638" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000638">[Blank Page]</p>
          <pagenum page="normal" id="p105" smilref="The_Mythical_Man_Month_Essay00003.smil#p105">105</pagenum>
          <p xml:space="preserve" id="p_000639" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000639">The Documentary Hypothesis</p>
          <pagenum page="normal" id="p106" smilref="The_Mythical_Man_Month_Essay00003.smil#p106">106</pagenum>
          <p xml:space="preserve" id="p_000640"><span class="text" id="span_000344" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000344">[Image: </span><em id="em_000189" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000189">The Documentary Hypothesis</em><span class="text" id="span_000345" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000345">.]</span></p>
          <pagenum page="normal" id="p107" smilref="The_Mythical_Man_Month_Essay00003.smil#p107">107</pagenum>
        </level2>
        <level2 id="level2_000013">
          <h2 xml:space="preserve" id="h2_000013"><strong id="strong_000156"><em id="em_000190" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000190">The Documentary Hypothesis</em></strong></h2>
          <p xml:space="preserve" id="p_000641"><em id="em_000191" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000191">The hypothesis:</em></p>
          <p xml:space="preserve" id="p_000642"><em id="em_000192" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000192">Amid a wash of paper, a small number of documents become the critical pivots around which every project's management revolves. These are the manager's chief personal tools.</em></p>
          <p xml:space="preserve" id="p_000643" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000643">W. Bengough, "Scene in the old Congressional Library," 1897</p>
          <p xml:space="preserve" id="p_000644" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000644">The Bettman Archive</p>
          <p xml:space="preserve" id="p_000645"><strong id="strong_000157" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000157">107</strong></p>
          <pagenum page="normal" id="p108" smilref="The_Mythical_Man_Month_Essay00003.smil#p108">108</pagenum>
          <p xml:space="preserve" id="p_000646" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000646">The technology, the surrounding organization, and the traditions of the craft conspire to define certain items of paperwork that a project must prepare. To the new manager, fresh from operating as a craftsman himself, these seem an unmitigated nuisance, an unnecessary distraction, and a white tide that threatens to engulf him. And indeed, most of them are exactly that.</p>
          <p xml:space="preserve" id="p_000647" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000647">Bit by bit, however, he comes to realize that a certain small set of these documents embodies and expresses much of his managerial work. The preparation of each one serves as a major occasion for focusing thought and crystallizing discussions that otherwise would wander endlessly. Its maintenance becomes his surveillance and warning mechanism. The document itself serves as a check list, a status control, and a data base for his reporting.</p>
          <p xml:space="preserve" id="p_000648" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000648">In order to see how this should work for a software project, let us examine the specific documents useful in other contexts and see if a generalization emerges.</p>
          <p xml:space="preserve" id="p_000649"><strong id="strong_000158" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000158">Documents for a Computer Product</strong></p>
          <p xml:space="preserve" id="p_000650" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000650">Suppose one is building a machine. What are the critical documents?</p>
          <p xml:space="preserve" id="p_000651"><strong id="strong_000159" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000159">Objectives. </strong><span class="text" id="span_000346" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000346">This defines the need to be met and the goals, desiderata, constraints, and priorities.</span></p>
          <p xml:space="preserve" id="p_000652"><strong id="strong_000160" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000160">Specifications. </strong><span class="text" id="span_000347" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000347">This is a computer manual plus performance specifications. It is one of the first documents generated in proposing a new product, and the last document finished.</span></p>
          <p xml:space="preserve" id="p_000653"><strong id="strong_000161" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000161">Schedule</strong></p>
          <p xml:space="preserve" id="p_000654"><strong id="strong_000162" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000162">Budget. </strong><span class="text" id="span_000348" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000348">Not merely a constraint, the budget is one of the manager's most useful documents. Existence of the budget forces technical decisions that otherwise would be avoided; and, more important, it forces and clarifies policy decisions.</span></p>
          <p xml:space="preserve" id="p_000655"><strong id="strong_000163" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000163">Organization chart</strong></p>
          <p xml:space="preserve" id="p_000656"><strong id="strong_000164" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000164">Space allocations</strong></p>
          <pagenum page="normal" id="p109" smilref="The_Mythical_Man_Month_Essay00003.smil#p109">109</pagenum>
          <p xml:space="preserve" id="p_000657"><strong id="strong_000165" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000165">Estimate, forecast, prices. </strong><span class="text" id="span_000349" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000349">These three have cyclic interlocking, which determines the success or failure of the project:</span></p>
          <p xml:space="preserve" id="p_000658" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000658">[Formula removed]</p>
          <p xml:space="preserve" id="p_000659" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000659">To generate a market forecast, one needs performance specifications and postulated prices. The quantities from the forecast combine with component counts from the design to determine the manufacturing cost estimate, and they determine the per-unit share of development and fixed costs. These costs in turn determine prices.</p>
          <p xml:space="preserve" id="p_000660"><span class="text" id="span_000350" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000350">If the prices are </span><em id="em_000193" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000193">below </em><span class="text" id="span_000351" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000351">those postulated, a joyous success spiral begins. Forecasts rise, unit costs drop, and prices drop yet further.</span></p>
          <p xml:space="preserve" id="p_000661"><span class="text" id="span_000352" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000352">If the prices are </span><em id="em_000194" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000194">above </em><span class="text" id="span_000353" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000353">those postulated, a disastrous spiral begins, and all hands must struggle to break it. Performance must be squeezed up and new applications developed to support larger forecasts. Costs must be squeezed down to yield lower estimates. The stress of this cycle is a discipline that often evokes the best work of marketer and engineer.</span></p>
          <p xml:space="preserve" id="p_000662" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000662">It can also bring about ridiculous vacillation. I recall a machine whose instruction counter popped in or out of memory every six months during a three-year development cycle. At one phase a little more performance would be wanted, so the instruction counter was implemented in transistors. At the next phase cost reduction was the theme, so the counter would be implemented as a memory location. On another project the best engineering manager I ever saw served often as a giant flywheel, his inertia damping the fluctuations that came from market and management people.</p>
          <p xml:space="preserve" id="p_000663"><strong id="strong_000166" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000166">Documents for a University Department</strong></p>
          <p xml:space="preserve" id="p_000664" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000664">In spite of the immense differences in purpose and activity, a similar number of similar documents form the critical set for the</p>
          <pagenum page="normal" id="p110" smilref="The_Mythical_Man_Month_Essay00003.smil#p110">110</pagenum>
          <p xml:space="preserve" id="p_000665" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000665">chairman of a university department. Almost every decision by dean, faculty meeting, or chairman is a specification or change of these documents:</p>
          <p xml:space="preserve" id="p_000666"><strong id="strong_000167" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000167">Objectives</strong></p>
          <p xml:space="preserve" id="p_000667"><strong id="strong_000168" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000168">Course descriptions</strong></p>
          <p xml:space="preserve" id="p_000668"><strong id="strong_000169" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000169">Degree requirements</strong></p>
          <p xml:space="preserve" id="p_000669"><strong id="strong_000170" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000170">Research proposals (hence plans, when funded)</strong></p>
          <p xml:space="preserve" id="p_000670"><strong id="strong_000171" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000171">Class schedule and teaching assignments</strong></p>
          <p xml:space="preserve" id="p_000671"><strong id="strong_000172" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000172">Budget</strong></p>
          <p xml:space="preserve" id="p_000672"><strong id="strong_000173" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000173">Space allocation</strong></p>
          <p xml:space="preserve" id="p_000673"><strong id="strong_000174" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000174">Assignment of staff and graduate students</strong></p>
          <p xml:space="preserve" id="p_000674" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000674">Notice that the components are very like those of the computer project: objectives, product specifications, time allocations, money allocations, space allocations, and people allocations. Only the pricing documents are missing; here the legislature does that task. The similarities are not accidental--the concerns of any management task are what, when, how much, where, and who.</p>
          <p xml:space="preserve" id="p_000675"><strong id="strong_000175" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000175">Documents for a Software Project</strong></p>
          <p xml:space="preserve" id="p_000676" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000676">In many software projects, people begin by holding meetings to debate structure; then they start writing programs. No matter how small the project, however, the manager is wise to begin immediately to formalize at least mini-documents to serve as his data base. And he turns out to need documents much like those of other managers.</p>
          <p xml:space="preserve" id="p_000677"><strong id="strong_000176" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000176">What: objectives. </strong><span class="text" id="span_000354" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000354">This defines the need to be met and the goals, desiderata, constraints, and priorities.</span></p>
          <p xml:space="preserve" id="p_000678"><strong id="strong_000177" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000177">What: product specifications. </strong><span class="text" id="span_000355" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000355">This begins as a proposal and ends up as the manual and internal documentation. Speed and space specifications are a critical part.</span></p>
          <pagenum page="normal" id="p111" smilref="The_Mythical_Man_Month_Essay00003.smil#p111">111</pagenum>
          <p xml:space="preserve" id="p_000679"><strong id="strong_000178" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000178">When: schedule</strong></p>
          <p xml:space="preserve" id="p_000680"><strong id="strong_000179" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000179">How much: budget</strong></p>
          <p xml:space="preserve" id="p_000681"><strong id="strong_000180" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000180">Where: space allocation</strong></p>
          <p xml:space="preserve" id="p_000682"><strong id="strong_000181" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000181">Who: organization chart. </strong><span class="text" id="span_000356" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000356">This becomes intertwined with the interface specification, as Conway's Law predicts: "Organizations which design systems are constrained to produce systems which are copies of the communication structures of these organizations."</span><sup id="sup_000044" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000044">1</sup><span class="text" id="span_000357" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000357"> Conway goes on to point out that the organization chart will initially reflect the first system design, which is almost surely not the right one. If the system design is to be free to change, the organization must be prepared to change.</span></p>
          <p xml:space="preserve" id="p_000683"><strong id="strong_000182" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000182">Why Have Formal Documents?</strong></p>
          <p xml:space="preserve" id="p_000684" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000684">First, writing the decisions down is essential. Only when one writes do the gaps appear and the inconsistencies protrude. The act of writing turns out to require hundreds of mini-decisions, and it is the existence of these that distinguishes clear, exact policies from fuzzy ones.</p>
          <p xml:space="preserve" id="p_000685" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000685">Second, the documents will communicate the decisions to others. The manager will be continually amazed that policies he took for common knowledge are totally unknown by some member of his team. Since his fundamental job is to keep everybody going in the same direction, his chief daily task will be communication, not decision-making, and his documents will immensely lighten this load.</p>
          <p xml:space="preserve" id="p_000686" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000686">Finally, a manager's documents give him a data base and checklist. By reviewing them periodically he sees where he is, and he sees what changes of emphasis or shifts in direction are needed.</p>
          <p xml:space="preserve" id="p_000687" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000687">I do not share the salesman-projected vision of the "management total-information system," wherein the executive strokes an inquiry into a computer, and a display screen flashes his answer. There are many fundamental reasons why this will never happen.</p>
          <pagenum page="normal" id="p112" smilref="The_Mythical_Man_Month_Essay00003.smil#p112">112</pagenum>
          <p xml:space="preserve" id="p_000688"><span class="text" id="span_000358" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000358">One reason is that only a small part--perhaps 20 percent--of the executive's time is spent on tasks where he needs information from outside his head. The rest is communication: hearing, reporting, teaching, exhorting, counseling, encouraging. But for the fraction that </span><em id="em_000195" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000195">is </em><span class="text" id="span_000359" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000359">data-based, the handful of critical documents are vital, and they will meet almost all needs.</span></p>
          <p xml:space="preserve" id="p_000689" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000689">The task of the manager is to develop a plan and then to realize it. But only the written plan is precise and communicable. Such a plan consists of documents on what, when, how much, where, and who. This small set of critical documents encapsulates much of the manager's work. If their comprehensive and critical nature is recognized in the beginning, the manager can approach them as friendly tools rather than annoying busywork. He will set his direction much more crisply and quickly by doing so.</p>
          <pagenum page="normal" id="p113" smilref="The_Mythical_Man_Month_Essay00003.smil#p113">113</pagenum>
          <p xml:space="preserve" id="p_000690" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000690">Plan to Throw One Away</p>
          <pagenum page="normal" id="p114" smilref="The_Mythical_Man_Month_Essay00003.smil#p114">114</pagenum>
          <p xml:space="preserve" id="p_000691"><span class="text" id="span_000360" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000360">[Image: </span><em id="em_000196" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000196">Plan to Throw One Away.</em><span class="text" id="span_000361" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000361">]</span></p>
          <pagenum page="normal" id="p115" smilref="The_Mythical_Man_Month_Essay00003.smil#p115">115</pagenum>
        </level2>
        <level2 id="level2_000014">
          <h2 xml:space="preserve" id="h2_000014"><strong id="strong_000183"><em id="em_000197" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000197">Plan to Throw One Away</em></strong></h2>
          <p xml:space="preserve" id="p_000692"><em id="em_000198" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000198">There is nothing in this world constant but inconstancy.</em></p>
          <p xml:space="preserve" id="p_000693"><em id="em_000199" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000199">SWIFT</em></p>
          <p xml:space="preserve" id="p_000694"><em id="em_000200" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000200">It is common sense to take a method and try it. If it fails, admit it frankly and try another. But above all, try something.</em></p>
          <p xml:space="preserve" id="p_000695"><em id="em_000201" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000201">FRANKLIN D. ROOSEVELT</em></p>
          <p xml:space="preserve" id="p_000696" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000696">Collapse of the aerodynamically misdesigned Tacoma Narrows Bridge,</p>
          <p xml:space="preserve" id="p_000697" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000697">1940</p>
          <p xml:space="preserve" id="p_000698" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000698">UPI Photo/The Bettman Archive</p>
          <p xml:space="preserve" id="p_000699"><strong id="strong_000184" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000184">115</strong></p>
          <pagenum page="normal" id="p116" smilref="The_Mythical_Man_Month_Essay00003.smil#p116">116</pagenum>
          <p xml:space="preserve" id="p_000700"><strong id="strong_000185" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000185">Pilot Plants and Scaling Up</strong></p>
          <p xml:space="preserve" id="p_000701"><span class="text" id="span_000362" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000362">Chemical engineers learned long ago that a process that works in the laboratory cannot be implemented in a factory in only one step. An intermediate step called the </span><em id="em_000202" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000202">pilot plant </em><span class="text" id="span_000363" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000363">is necessary to give experience in scaling quantities up and in operating in nonprotective environments. For example, a laboratory process for desalting water will be tested in a pilot plant of 10,000 gallon/day capacity before being used for a 2,000,000 gallon/day community water system.</span></p>
          <p xml:space="preserve" id="p_000702" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000702">Programming system builders have also been exposed to this lesson, but it seems to have not yet been learned. Project after project designs a set of algorithms and then plunges into construction of customer-deliverable software on a schedule that demands delivery of the first thing built.</p>
          <p xml:space="preserve" id="p_000703"><span class="text" id="span_000364" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000364">In most projects, the first system built is barely usable. It may be too slow, too big, awkward to use, or all three. There is no alternative but to start again, smarting but smarter, and build a redesigned version in which these problems are solved. The discard and redesign may be done in one lump, or it may be done piece-by-piece. But all large-system experience shows that it will be done.</span><sup id="sup_000045" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000045">2</sup><span class="text" id="span_000365" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000365"> Where a new system concept or new technology is used, one has to build a system to throw away, for even the best planning is not so omniscient as to get it right the first time.</span></p>
          <p xml:space="preserve" id="p_000704"><span class="text" id="span_000366" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000366">The management question, therefore, is not </span><em id="em_000203" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000203">whether </em><span class="text" id="span_000367" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000367">to build a pilot system and throw it away. You </span><em id="em_000204" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000204">will </em><span class="text" id="span_000368" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000368">do that. The only question is whether to plan in advance to build a throwaway, or to promise to deliver the throwaway to customers. Seen this way, the answer is much clearer. Delivering that throwaway to customers buys time, but it does so only at the cost of agony for the user, distraction for the builders while they do the redesign, and a bad reputation for the product that the best redesign will find hard to live down.</span></p>
          <p xml:space="preserve" id="p_000705"><strong id="strong_000186" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000186">Hence</strong> <em id="em_000205" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000205">plan to throw one away; you will, anyhow.</em></p>
          <pagenum page="normal" id="p117" smilref="The_Mythical_Man_Month_Essay00003.smil#p117">117</pagenum>
          <p xml:space="preserve" id="p_000706"><strong id="strong_000187" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000187">The Only Constancy Is Change Itself</strong></p>
          <p xml:space="preserve" id="p_000707"><span class="text" id="span_000369" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000369">Once one recognizes that a pilot system must be built and discarded, and that a redesign with changed ideas is inevitable, it becomes useful to face the whole phenomenon of change. The first step is to accept the fact of change as a way of life, rather than an untoward and annoying exception. Cosgrove has perceptively pointed out that the programmer delivers satisfaction of a user need rather than any tangible product. And both the actual need and the user's perception of that need will change as programs are built, tested, and used.</span><sup id="sup_000046" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000046">3</sup></p>
          <p xml:space="preserve" id="p_000708" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000708">Of course this is also true of the needs met by hardware products, whether new cars or new computers. But the very existence of a tangible object serves to contain and quantize user demand for changes. Both the tractability and the invisibility of the software product expose its builders to perpetual changes in requirements.</p>
          <p xml:space="preserve" id="p_000709" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000709">Far be it from me to suggest that all changes in customer objectives and requirements must, can, or should be incorporated in the design. Clearly a threshold has to be established, and it must get higher and higher as development proceeds, or no product ever appears.</p>
          <p xml:space="preserve" id="p_000710"><span class="text" id="span_000370" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000370">Nevertheless, some changes in objectives are inevitable, and it is better to be prepared for them than to assume that they won't come. Not only are changes in objective inevitable, changes in development strategy and technique are also inevitable. The throw-one-away concept is itself just an acceptance of the fact that as one learns, he changes the design.</span><sup id="sup_000047" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000047">4</sup></p>
          <p xml:space="preserve" id="p_000711"><strong id="strong_000188" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000188">Plan the System for Change</strong></p>
          <p xml:space="preserve" id="p_000712" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000712">The ways of designing a system for such change are well known and widely discussed in the literature--perhaps more widely dis-</p>
          <pagenum page="normal" id="p118" smilref="The_Mythical_Man_Month_Essay00003.smil#p118">118</pagenum>
          <p xml:space="preserve" id="p_000713" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000713">cussed than practiced. They include careful modularization, extensive subroutining, precise and complete definition of intermodule interfaces, and complete documentation of these. Less obviously one wants standard calling sequences and table-driven techniques used wherever possible.</p>
          <p xml:space="preserve" id="p_000714" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000714">Most important is the use of a high-level language and self-documenting techniques so as to reduce errors induced by changes. Using compile-time operations to incorporate standard declarations helps powerfully in making changes.</p>
          <p xml:space="preserve" id="p_000715" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000715">Quantization of change is an essential technique. Every product should have numbered versions, and each version must have its own schedule and a freeze date, after which changes go into the next version.</p>
          <p xml:space="preserve" id="p_000716"><strong id="strong_000189" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000189">Plan the Organization for Change</strong></p>
          <p xml:space="preserve" id="p_000717" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000717">Cosgrove advocates treating all plans, milestones, and schedules as tentative, so as to facilitate change. This goes much too far--the common failing of programming groups today is too little management control, not too much.</p>
          <p xml:space="preserve" id="p_000718" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000718">Nevertheless, he offers a great insight. He observes that the reluctance to document designs is not due merely to laziness or time pressure. Instead it comes from the designer's reluctance to commit himself to the defense of decisions which he knows to be tentative. "By documenting a design, the designer exposes himself to the criticisms of everyone, and he must be able to defend everything he writes. If the organizational structure is threatening in any way, nothing is going to be documented until it is completely defensible."</p>
          <p xml:space="preserve" id="p_000719" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000719">Structuring an organization for change is much harder than designing a system for change. Each man must be assigned to jobs that broaden him, so that the whole force is technically flexible. On a large project the manager needs to keep two or three top programmers as a technical cavalry that can gallop to the rescue wherever the battle is thickest.</p>
          <pagenum page="normal" id="p119" smilref="The_Mythical_Man_Month_Essay00003.smil#p119">119</pagenum>
          <p xml:space="preserve" id="p_000720" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000720">Management structures also need to be changed as the system changes. This means that the boss must give a great deal of attention to keeping his managers and his technical people as interchangeable as their talents allow.</p>
          <p xml:space="preserve" id="p_000721" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000721">The barriers are sociological, and they must be fought with constant vigilance. First, managers themselves often think of senior people as "too valuable" to use for actual programming. Next, management jobs carry higher prestige. To overcome this problem some laboratories, such as Bell Labs, abolish all job titles. Each professional employee is a "member of the technical staff." Others, like IBM, maintain a dual ladder of advancement, as Fig. 11.1 shows. The corresponding rungs are in theory equivalent.</p>
          <p xml:space="preserve" id="p_000722"><span class="text" id="span_000371" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000371">[Chart: </span><strong id="strong_000190" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000190">Fig. 11.1</strong><span class="text" id="span_000372" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000372"> IBM dual ladder of advancement.]</span></p>
          <p xml:space="preserve" id="p_000723" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000723">It is easy to establish corresponding salary scales for rungs. It is much harder to give them corresponding prestige. Offices have to be of equal size and appointment. Secretarial and other support services must correspond. A reassignment from the technical ladder to a corresponding level on the managerial one should never be accompanied by a raise, and it should be announced always as</p>
          <pagenum page="normal" id="p120" smilref="The_Mythical_Man_Month_Essay00003.smil#p120">120</pagenum>
          <p xml:space="preserve" id="p_000724" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000724">a "reassignment," never as a "promotion." The reverse reassignment should always carry a raise; overcompensating for the cultural forces is necessary.</p>
          <p xml:space="preserve" id="p_000725" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000725">Managers need to be sent to technical refresher courses, senior technical people to management training. Project objectives, progress, and management problems must be shared with the whole body of senior people.</p>
          <p xml:space="preserve" id="p_000726" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000726">Whenever talents permit, senior people must be kept technically and emotionally ready to manage groups or to delight in building programs with their own hands. Doing this surely is a lot of work; but it surely is worth it!</p>
          <p xml:space="preserve" id="p_000727" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000727">The whole notion of organizing surgical-type programming teams is a radical attack on this problem. It has the effect of making a senior man feel that he does not demean himself when he builds programs, and it attempts to remove the social obstacles that deprive him of that creative joy.</p>
          <p xml:space="preserve" id="p_000728" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000728">Furthermore, that structure is designed to minimize the number of interfaces. As such, it makes the system maximally easy to change, and it becomes relatively easy to reassign a whole surgical team to a different programming task when organizational changes are necessary. It is really the long-run answer to the problem of flexible organization.</p>
          <p xml:space="preserve" id="p_000729"><strong id="strong_000191" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000191">Two Steps Forward and One Step Back</strong></p>
          <p xml:space="preserve" id="p_000730"><span class="text" id="span_000373" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000373">A program doesn't stop changing when it is delivered for customer use. The changes after delivery are called </span><em id="em_000206" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000206">program maintenance, </em><span class="text" id="span_000374" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000374">but the process is fundamentally different from hardware maintenance.</span></p>
          <p xml:space="preserve" id="p_000731" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000731">Hardware maintenance for a computer system involves three activities--replacing deteriorated components, cleaning and lubricating, and putting in engineering changes that fix design defects. (Most, but not all, engineering changes fix defects in the realization or implementation, rather than the architecture, and so are invisible to the user.)</p>
          <pagenum page="normal" id="p121" smilref="The_Mythical_Man_Month_Essay00003.smil#p121">121</pagenum>
          <p xml:space="preserve" id="p_000732" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000732">Program maintenance involves no cleaning, lubrication, or repair of deterioration. It consists chiefly of changes that repair design defects. Much more often than with hardware, these changes include added functions. Usually they are visible to the user.</p>
          <p xml:space="preserve" id="p_000733" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000733">The total cost of maintaining a widely used program is typically 40 percent or more of the cost of developing it. Surprisingly, this cost is strongly affected by the number of users. More users find more bugs.</p>
          <p xml:space="preserve" id="p_000734"><span class="text" id="span_000375" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000375">Betty Campbell, of MIT's Laboratory for Nuclear Science, points out an interesting cycle in the life of a particular release of a program. It is shown in Fig. 11.2. Initially, old bugs found and solved in previous releases tend to reappear in a new release. New functions of the new release turn out to have defects. These things get shaken out, and all goes well for several months. Then the bug rate begins to climb again. Miss Campbell believes this is due to the arrival of users at a new plateau of sophistication, where they begin to exercise fully the new capabilities of the release. This intense workout then smokes out the more subtle bugs in the new features.</span><sup id="sup_000048" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000048">5</sup></p>
          <p xml:space="preserve" id="p_000735"><span class="text" id="span_000376" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000376">[Image: </span><strong id="strong_000192" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000192">Fig. 11.2 </strong><span class="text" id="span_000377" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000377">Bug occurrence as a function of release age.]</span></p>
          <pagenum page="normal" id="p122" smilref="The_Mythical_Man_Month_Essay00003.smil#p122">122</pagenum>
          <p xml:space="preserve" id="p_000736" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000736">The fundamental problem with program maintenance is that fixing a defect has a substantial (20-50 percent) chance of introducing another. So the whole process is two steps forward and one step back.</p>
          <p xml:space="preserve" id="p_000737" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000737">Why aren't defects fixed more cleanly? First, even a subtle defect shows itself as a local failure of some kind. In fact it often has system-wide ramifications, usually nonobvious. Any attempt to fix it with minimum effort will repair the local and obvious, but unless the structure is pure or the documentation very fine, the far-reaching effects of the repair will be overlooked. Second, the repairer is usually not the man who wrote the code, and often he is a junior programmer or trainee.</p>
          <p xml:space="preserve" id="p_000738"><span class="text" id="span_000378" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000378">As a consequence of the introduction of new bugs, program maintenance requires far more system testing per statement written than any other programming. Theoretically, after each fix one must run the entire bank of test cases previously run against the system, to ensure that it has not been damaged in an obscure way. In practice such </span><em id="em_000207" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000207">regression testing </em><span class="text" id="span_000379" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000379">must indeed approximate this theoretical ideal, and it is very costly.</span></p>
          <p xml:space="preserve" id="p_000739" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000739">Clearly, methods of designing programs so as to eliminate or at least illuminate side effects can have an immense payoff in maintenance costs. So can methods of implementing designs with fewer people, fewer interfaces, and hence fewer bugs.</p>
          <p xml:space="preserve" id="p_000740"><strong id="strong_000193" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000193">One Step Forward and One Step Back</strong></p>
          <p xml:space="preserve" id="p_000741"><span class="text" id="span_000380" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000380">Lehman and Belady have studied the history of successive releases in a large operating system.</span><sup id="sup_000049" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000049">6</sup><span class="text" id="span_000381" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000381"> They find that the total number of modules increases linearly with release number, but that the number of modules affected increases exponentially with release number. All repairs tend to destroy the structure, to increase the entropy and disorder of the system. Less and less effort is spent on fixing original design flaws; more and more is spent on fixing flaws introduced by earlier fixes. As time passes, the system becomes less and less well-ordered. Sooner or later the fixing</span></p>
          <pagenum page="normal" id="p123" smilref="The_Mythical_Man_Month_Essay00003.smil#p123">123</pagenum>
          <p xml:space="preserve" id="p_000742" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000742">ceases to gain any ground. Each forward step is matched by a backward one. Although in principle usable forever, the system has worn out as a base for progress. Furthermore, machines change, configurations change, and user requirements change, so the system is not in fact usable forever. A brand-new, from-the-ground-up redesign is necessary.</p>
          <p xml:space="preserve" id="p_000743" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000743">And so from a statistical mechanical model, Belady and Lehman arrive for programming-systems at a more general conclusion supported by the experience of all the earth. "Things are always at their best in the beginning," said Pascal. C. S. Lewis has stated it more perceptively:</p>
          <p xml:space="preserve" id="p_000744"><em id="em_000208" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000208">That is the key to history. Terrific energy is expended</em><span class="text" id="span_000382" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000382">--</span><em id="em_000209" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000209">civilizations are built up</em><span class="text" id="span_000383" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000383">--</span><em id="em_000210" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000210">excellent institutions devised; but each time something goes wrong. Some fatal flaw always brings the selfish and cruel people to the top, and then it all slides back into misery and ruin. In fact, the machine conks. It seems to start up all right and runs a few yards, and then it breaks down.</em><sup id="sup_000050" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000050">7</sup></p>
          <p xml:space="preserve" id="p_000745" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000745">Systems program building is an entropy-decreasing process, hence inherently metastable. Program maintenance is an entropy-increasing process, and even its most skillful execution only delays the subsidence of the system into unfixable obsolescence.</p>
          <pagenum page="normal" id="p124" smilref="The_Mythical_Man_Month_Essay00003.smil#p124">124</pagenum>
          <p xml:space="preserve" id="p_000746" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000746">[Blank Page]</p>
          <pagenum page="normal" id="p125" smilref="The_Mythical_Man_Month_Essay00003.smil#p125">125</pagenum>
          <p xml:space="preserve" id="p_000747" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000747">Sharp Tools</p>
          <pagenum page="normal" id="p126" smilref="The_Mythical_Man_Month_Essay00003.smil#p126">126</pagenum>
          <p xml:space="preserve" id="p_000748"><span class="text" id="span_000384" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000384">[Image: </span><em id="em_000211" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000211">Sharp Tools</em><span class="text" id="span_000385" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000385">.]</span></p>
          <pagenum page="normal" id="p127" smilref="The_Mythical_Man_Month_Essay00003.smil#p127">127</pagenum>
        </level2>
        <level2 id="level2_000015">
          <h2 xml:space="preserve" id="h2_000015"><strong id="strong_000194"><em id="em_000212" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000212">Sharp Tools</em></strong></h2>
          <p xml:space="preserve" id="p_000749"><em id="em_000213" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000213">A good workman is known by his fools.</em></p>
          <p xml:space="preserve" id="p_000750"><em id="em_000214" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000214">PROVERB</em></p>
          <p xml:space="preserve" id="p_000751" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000751">A. Pisano, "Lo Scultore," from the Campanile di Santa Maria del Fiore, Florence, c. 1335 Scala/Art Resource, NY</p>
          <p xml:space="preserve" id="p_000752"><strong id="strong_000195" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000195">127</strong></p>
          <pagenum page="normal" id="p128" smilref="The_Mythical_Man_Month_Essay00003.smil#p128">128</pagenum>
          <p xml:space="preserve" id="p_000753" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000753">Even at this late date, many programming projects are still operated like machine shops so far as tools are concerned. Each master mechanic has his own personal set, collected over a lifetime and carefully locked and guarded--the visible evidences of personal skills. Just so, the programmer keeps little editors, sorts, binary dumps, disk space utilities, etc., stashed away in his file.</p>
          <p xml:space="preserve" id="p_000754" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000754">Such an approach, however, is foolish for a programming project. First, the essential problem is communication, and individualized tools hamper rather than aid communication. Second, the technology changes when one changes machines or working language, so tool lifetime is short. Finally, it is obviously much more efficient to have common development and maintenance of the general-purpose programming tools.</p>
          <p xml:space="preserve" id="p_000755" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000755">General-purpose tools are not enough, however. Both specialized needs and personal preferences dictate the need for specialized tools as well; so in discussing programming teams I have postulated one toolmaker per team. This man masters all the common tools and is able to instruct his client-boss in their use. He also builds the specialized tools his boss needs.</p>
          <p xml:space="preserve" id="p_000756" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000756">The manager of a project, then, needs to establish a philosophy and set aside resources for the building of common tools. At the same time he must recognize the need for specialized tools, and not begrudge his working teams their own tool-building. This temptation is insidious. One feels that if all those scattered tool builders were gathered in to augment the common tool team, greater efficiency would result. But it is not so.</p>
          <p xml:space="preserve" id="p_000757"><span class="text" id="span_000386" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000386">What are the tools about which the manager must philosophize, plan, and organize? First, a </span><em id="em_000215" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000215">computer facility. </em><span class="text" id="span_000387" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000387">This requires machines, and a scheduling philosophy must be adopted. It requires an </span><em id="em_000216" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000216">operating system, </em><span class="text" id="span_000388" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000388">and service philosophies must be established. It requires </span><em id="em_000217" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000217">language, </em><span class="text" id="span_000389" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000389">and a language policy must be laid down. Then there are </span><em id="em_000218" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000218">utilities, debugging aids, test-case generators, </em><span class="text" id="span_000390" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000390">and a </span><em id="em_000219" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000219">text-processing system </em><span class="text" id="span_000391" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000391">to handle documentation. Let us look at these one by one.</span><sup id="sup_000051" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000051">1</sup></p>
          <pagenum page="normal" id="p129" smilref="The_Mythical_Man_Month_Essay00003.smil#p129">129</pagenum>
          <p xml:space="preserve" id="p_000758"><strong id="strong_000196" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000196">Target Machines</strong></p>
          <p xml:space="preserve" id="p_000759"><span class="text" id="span_000392" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000392">Machine support is usefully divided into the </span><em id="em_000220" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000220">target machine </em><span class="text" id="span_000393" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000393">and the </span><em id="em_000221" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000221">vehicle machines. </em><span class="text" id="span_000394" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000394">The target machine is the one for which software is being written, and on which it must ultimately be tested. The vehicle machines are those that provide the services used in building the system. If one is building a new operating system for an old machine, it may serve not only as the target, but as the vehicle as well.</span></p>
          <p xml:space="preserve" id="p_000760"><strong id="strong_000197" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000197">What kind of target facility? </strong><span class="text" id="span_000395" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000395">Teams building new supervisors or other system-heart software will of course need machines of their own. Such systems will need operators and a system programmer or two who keeps the standard support on the machine current and serviceable.</span></p>
          <p xml:space="preserve" id="p_000761" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000761">If a separate machine is needed, it is a rather peculiar thing-- it need not be fast, but it needs at least a million bytes of main storage, a hundred million bytes of on-line disk, and terminals. Only alphanumeric terminals are needed, but they must go much faster than the 15 characters per second that characterizes typewriters. A large memory adds greatly to productivity by allowing overlaying and size trimming to be done after functional testing.</p>
          <p xml:space="preserve" id="p_000762" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000762">The debugging machine, or its software, also needs to be instrumented, so that counts and measurements of all kinds of program parameters can be automatically made during debugging. Memory-use patterns, for instance, are powerful diagnostics of the causes of weird logical behavior or unexpectedly slow performance.</p>
          <p xml:space="preserve" id="p_000763"><strong id="strong_000198" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000198">Scheduling. </strong><span class="text" id="span_000396" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000396">When the target machine is new, as when its first operating system is being built, machine time is scarce, and scheduling it is a major problem. The requirement for target machine time has a peculiar growth curve. In OS/360 development we had good System/360 simulators and other vehicles. From previous experience we projected how many hours of S/360 time we would need, and began to acquire early machines from factory production.</span></p>
          <pagenum page="normal" id="p130" smilref="The_Mythical_Man_Month_Essay00003.smil#p130">130</pagenum>
          <p xml:space="preserve" id="p_000764" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000764">But they sat idle, month after month. Then all at once all 16 systems were fully loaded, and rationing was the problem. The utilization looked something like Fig. 12.1. Everyone began to debug his first components at the same time, and thereafter most of the team was constantly debugging something.</p>
          <p xml:space="preserve" id="p_000765"><span class="text" id="span_000397" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000397">[Chart: </span><strong id="strong_000199" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000199">Fig. 12.1</strong><span class="text" id="span_000398" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000398"> Growth in use of target machines.]</span></p>
          <p xml:space="preserve" id="p_000766" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000766">We centralized all our machines and tape library and set up a professional and experienced machine-room team to run them. To maximize scarce S/360 time, we ran all debugging runs in batch on whichever system was free and appropriate. We tried for four shots per day (two-and-one-half-hour turnaround) and demanded four-hour turnaround. An auxiliary 1401 with terminals was used to schedule runs, to keep track of the thousands of jobs, and to monitor turnaround time.</p>
          <p xml:space="preserve" id="p_000767" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000767">But all that organization was quite overdone. After a few months of slow turnaround, mutual recriminations, and other agony, we went to allocating machine time in substantial blocks.</p>
          <pagenum page="normal" id="p131" smilref="The_Mythical_Man_Month_Essay00003.smil#p131">131</pagenum>
          <p xml:space="preserve" id="p_000768" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000768">The whole fifteen-man sort team, for example, would be given a system for a four-to-six-hour block. It was up to them to schedule themselves on it. If it sat idle, no outsider could use it.</p>
          <p xml:space="preserve" id="p_000769" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000769">That, it develops, was a better way to allocate and schedule. Although machine utilization may have been a little lower (and often it wasn't), productivity was way up. For each man on such a team, ten shots in a six-hour block are far more productive than ten shots spaced three hours apart, because sustained concentration reduces thinking time. After such a sprint, a team usually needed a day or two to catch up on the paperwork before asking for another block. Often as few as three programmers can fruitfully share and subschedule a block of time. This seems to be the best way to use a target machine when debugging a new operating system.</p>
          <p xml:space="preserve" id="p_000770" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000770">It has always been so in practice, though never in theory. System debugging has always been a graveyard-shift occupation, like astronomy. Twenty years ago, on the 701, I was initiated into the productive informality of the predawn hours, when all the machine-room bosses are fast asleep at home, and the operators are disinclined to be sticklers for rules. Three machine generations have passed; technologies have changed totally; operating systems have arisen; and yet this preferred method of working hasn't changed. It endures because it is most productive. The time has come to recognize its productivity and embrace the fruitful practice openly.</p>
          <p xml:space="preserve" id="p_000771"><strong id="strong_000200" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000200">Vehicle Machines and Data Services</strong></p>
          <p xml:space="preserve" id="p_000772"><strong id="strong_000201" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000201">Simulators. </strong><span class="text" id="span_000399" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000399">If the target computer is new, one needs a logical simulator for it. This gives a debugging vehicle long before the real target exists. Equally important, it gives access to a </span><em id="em_000222" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000222">dependable </em><span class="text" id="span_000400" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000400">debugging vehicle even after one has a target machine available. </span><em id="em_000223" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000223">Dependable </em><span class="text" id="span_000401" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000401">is not the same as </span><em id="em_000224" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000224">accurate. </em><span class="text" id="span_000402" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000402">The simulator will surely fail in some respect to be a faithful and accurate implementation</span></p>
          <pagenum page="normal" id="p132" smilref="The_Mythical_Man_Month_Essay00003.smil#p132">132</pagenum>
          <p xml:space="preserve" id="p_000773"><span class="text" id="span_000403" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000403">of the new machine's architecture. But it will be the </span><em id="em_000225" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000225">same </em><span class="text" id="span_000404" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000404">implementation from one day to the next, and the new hardware will not.</span></p>
          <p xml:space="preserve" id="p_000774" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000774">We are accustomed nowadays to having computer hardware work correctly almost all the time. Unless an application programmer sees a system behaving inconsistently from run to identical run, he is well advised to look for bugs in his code rather than in his engine.</p>
          <p xml:space="preserve" id="p_000775"><span class="text" id="span_000405" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000405">This experience, however, is bad training for the programming of support for a new machine. Lab-built, preproduction, or early hardware does </span><em id="em_000226" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000226">not </em><span class="text" id="span_000406" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000406">work as defined, does </span><em id="em_000227" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000227">not </em><span class="text" id="span_000407" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000407">work reliably, and does </span><em id="em_000228" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000228">not </em><span class="text" id="span_000408" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000408">stay the same from day to day. As bugs are found, engineering changes are made in all machine copies, including those of the programming group. This shifting base is bad enough. Hardware failures, usually intermittent, are worse. The uncertainty is worst of all, for it robs one of incentive to dig diligently in his code for a bug--it may not be there at all. So a dependable simulator on a well-aged vehicle retains its usefulness far longer than one would expect.</span></p>
          <p xml:space="preserve" id="p_000776"><strong id="strong_000202" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000202">Compiler and assembler vehicles. </strong><span class="text" id="span_000409" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000409">For the same reasons, one wants compilers and assemblers that run on dependable vehicles but compile object code for the target system. This can then start being debugged on the simulator.</span></p>
          <p xml:space="preserve" id="p_000777" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000777">With high-level language programming, one can do much of the debugging by compiling for and testing object code on the vehicle machine before beginning to test target-machine code at all. This gives the efficiency of direct execution, rather than that of simulation, combined with the dependability of the stable machine.</p>
          <p xml:space="preserve" id="p_000778"><strong id="strong_000203" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000203">Program libraries and accounting. </strong><span class="text" id="span_000410" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000410">A very successful and important use of a vehicle machine in the OS/360 development effort was for the maintenance of program libraries. A system developed under the leadership of W. R. Crowley had two 7010's connected, sharing a large disk data bank. The 7010's also provided an S/360</span></p>
          <pagenum page="normal" id="p133" smilref="The_Mythical_Man_Month_Essay00003.smil#p133">133</pagenum>
          <p xml:space="preserve" id="p_000779" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000779">assembler. All the code tested or under test was kept in this library, both source code and assembled load modules. The library was in fact divided into sublibraries with different access rules.</p>
          <p xml:space="preserve" id="p_000780"><span class="text" id="span_000411" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000411">First, each group or programmer had an area where he kept copies of his programs, his test cases, and the scaffolding he needed for component testing. In this </span><em id="em_000229" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000229">playpen </em><span class="text" id="span_000412" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000412">area there were no restrictions on what a man could do with his own programs; they were his.</span></p>
          <p xml:space="preserve" id="p_000781"><span class="text" id="span_000413" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000413">When a man had his component ready for integration into a larger piece, he passed a copy over to the manager of that larger system, who put this copy into a </span><em id="em_000230" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000230">system integration sublibrary. </em><span class="text" id="span_000414" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000414">Now the original programmer could not change it, except by permission of the integration manager. As the system came together, the latter would proceed with all sorts of system tests, identifying bugs and getting fixes.</span></p>
          <p xml:space="preserve" id="p_000782"><span class="text" id="span_000415" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000415">From time to time a system version would be ready for wider use. Then it would be promoted to the </span><em id="em_000231" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000231">current version sublibrary. </em><span class="text" id="span_000416" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000416">This copy was sacrosanct, touched only to fix crippling bugs. It was available for use in integration and testing of all new module versions. A program directory on the 7010 kept track of each version of each module, its status, its whereabouts, and its changes.</span></p>
          <p xml:space="preserve" id="p_000783"><span class="text" id="span_000417" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000417">Two notions are important here. The first is </span><em id="em_000232" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000232">control, </em><span class="text" id="span_000418" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000418">the idea of program copies belonging to managers who alone can authorize their change. The second is that of </span><em id="em_000233" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000233">formal separation </em><span class="text" id="span_000419" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000419">and </span><em id="em_000234" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000234">progression </em><span class="text" id="span_000420" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000420">from the playpen, to integration, to release.</span></p>
          <p xml:space="preserve" id="p_000784"><span class="text" id="span_000421" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000421">In my opinion this was one of the best-done things in the OS/360 effort. It is a piece of management technology that seems to have been independently developed on several massive programming projects including those at Bell Labs, ICL, and Cambridge University.</span><sup id="sup_000052" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000052">2</sup><span class="text" id="span_000422" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000422"> It is applicable to documentation as well as to programs. It is an indispensable technology.</span></p>
          <p xml:space="preserve" id="p_000785"><strong id="strong_000204" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000204">Program tools</strong><span class="text" id="span_000423" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000423">. As new debugging techniques appear, the old ones diminish but do not vanish. Thus one needs dumps, source-file editors, snapshot dumps, even traces.</span></p>
          <pagenum page="normal" id="p134" smilref="The_Mythical_Man_Month_Essay00003.smil#p134">134</pagenum>
          <p xml:space="preserve" id="p_000786" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000786">Likewise one needs a full set of utilities for putting decks on disks, making tape copies, printing files, changing catalogs. If one commissions a project toolmaker early in the process, these can be done once and can be ready by time they are needed.</p>
          <p xml:space="preserve" id="p_000787"><strong id="strong_000205" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000205">Documentation system. </strong><span class="text" id="span_000424" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000424">Among all tools, the one that saves the most labor may well be a computerized text-editing system, operating on a dependable vehicle. We had a very handy one, devised by J. W. Franklin. Without it I expect OS/360 manuals would have been far later and more cryptic. There are those who would argue that the OS/360 six-foot shelf of manuals represents verbal diarrhea, that the very voluminosity introduces a new kind of incomprehensibility. And there is some truth in that.</span></p>
          <p xml:space="preserve" id="p_000788" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000788">But I respond in two ways. First, the OS/360 documentation is overwhelming in bulk, but the reading plan is carefully laid out; if one uses it selectively, he can ignore most of the bulk most of the time. One must consider the OS/360 documentation as a library or an encyclopedia, not a set of mandatory texts.</p>
          <p xml:space="preserve" id="p_000789"><span class="text" id="span_000425" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000425">Second, this is far preferable to the severe underdocumentation that characterizes most programming systems. I will quickly agree, however, that the writing could be vastly improved in some places, and that the result of better writing would be reduced bulk. Some parts (e.g., </span><em id="em_000235" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000235">Concepts and Facilities</em><span class="text" id="span_000426" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000426">) are very well-written now.</span></p>
          <p xml:space="preserve" id="p_000790"><strong id="strong_000206" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000206">Performance simulator. </strong><span class="text" id="span_000427" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000427">Better have one. Build it outside-in, as we will discuss in the next chapter. Use the same top-down design for the performance simulator, the logical simulator, and the product. Start it very early. Listen to it when it speaks.</span></p>
          <p xml:space="preserve" id="p_000791"><strong id="strong_000207" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000207">High-Level Language and Interactive Programming</strong></p>
          <p xml:space="preserve" id="p_000792" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000792">The most important two tools for system programming today are two that were not used in OS/360 development almost a decade ago. They are still not widely used, but all evidence points to their power and applicability. They are (1) high-level language and (2) interactive programming. I am convinced that only inertia and</p>
          <pagenum page="normal" id="p135" smilref="The_Mythical_Man_Month_Essay00003.smil#p135">135</pagenum>
          <p xml:space="preserve" id="p_000793" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000793">sloth prevent the universal adoption of these tools; the technical difficulties are no longer valid excuses.</p>
          <p xml:space="preserve" id="p_000794"><strong id="strong_000208" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000208">High-level language. </strong><span class="text" id="span_000428" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000428">The chief reasons for using a high-level language are productivity and debugging speed. We have discussed productivity earlier (Chapter 8). There is not a lot of numerical evidence, but what there is suggests improvement by integral factors, not just incremental percentages.</span></p>
          <p xml:space="preserve" id="p_000795" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000795">The debugging improvement comes from the fact that there are fewer bugs, and they are easier to find. There are fewer because one avoids an entire level of exposure to error, a level on which one makes not only syntactic errors but semantic ones, such as misusing registers. The bugs are easier to find because the compiler diagnostics help find them and, more important, because it is very easy to insert debugging snapshots.</p>
          <p xml:space="preserve" id="p_000796" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000796">For me, these productivity and debugging reasons are overwhelming. I cannot easily conceive of a programming system I would build in assembly language.</p>
          <p xml:space="preserve" id="p_000797" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000797">Well, what about the classical objections to such a tool? There are three: It doesn't let me do what I want. The object code is too big. The object code is too slow.</p>
          <p xml:space="preserve" id="p_000798"><span class="text" id="span_000429" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000429">As to function, I believe the objection is no longer valid. All testimony indicates that one can do what he needs to do, but that it takes work to find out how, and one may occasionally need unlovely artifices.</span><sup id="sup_000053" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000053">3,4</sup></p>
          <p xml:space="preserve" id="p_000799" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000799">As to space, the new optimizing compilers are beginning to be very satisfactory, and this improvement will continue.</p>
          <p xml:space="preserve" id="p_000800"><span class="text" id="span_000430" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000430">As to speed, optimizing compilers now produce some code that is faster than most programmer's handwritten code, Furthermore, one can usually solve speed problems by replacing from one to five percent of a compiler-generated program by handwritten substitute after the former is fully debugged.</span><sup id="sup_000054" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000054">5</sup></p>
          <p xml:space="preserve" id="p_000801"><span class="text" id="span_000431" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000431">What high-level language should one use for system programming? The only reasonable candidate today is PL/I.</span><sup id="sup_000055" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000055">6</sup><span class="text" id="span_000432" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000432"> It has a very</span></p>
          <pagenum page="normal" id="p136" smilref="The_Mythical_Man_Month_Essay00003.smil#p136">136</pagenum>
          <p xml:space="preserve" id="p_000802" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000802">full set of functions; it is matched to operating system environments; and a variety of compilers are available, some interactive, some fast, some very diagnostic, and some producing highly optimized code. I myself find it faster to work out algorithms in APL; then I translate these to PL/I for matching to the system environment.</p>
          <p xml:space="preserve" id="p_000803"><strong id="strong_000209" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000209">Interactive programming</strong><span class="text" id="span_000433" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000433">. One of the justifications for MIT's Multics project was its usefulness for building programming systems. Multics (and following it, IBM's TSS) differs in concept from other interactive computing systems in exactly those respects necessary for systems programming: many levels of sharing and protection for data and programs, extensive library management, and facilities for cooperative work among terminal users. I am convinced that interactive systems will never displace batch systems for many applications. But I think the Multics team has made its most convincing case in the system-programming application.</span></p>
          <p xml:space="preserve" id="p_000804"><span class="text" id="span_000434" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000434">There is not yet much evidence available on the true fruitful-ness of such apparently powerful tools. There </span><em id="em_000236" smilref="The_Mythical_Man_Month_Essay00003.smil#em_000236">is </em><span class="text" id="span_000435" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000435">a widespread recognition that debugging is the hard and slow part of system programming, and slow turnaround is the bane of debugging. So the logic of interactive programming seems inexorable.</span><sup id="sup_000056" smilref="The_Mythical_Man_Month_Essay00003.smil#sup_000056">7</sup></p>
          <p xml:space="preserve" id="p_000805"><strong id="strong_000210" smilref="The_Mythical_Man_Month_Essay00003.smil#strong_000210">Fig. 12.2 </strong><span class="text" id="span_000436" smilref="The_Mythical_Man_Month_Essay00003.smil#span_000436">Comparative productivity under batch and conversational programming</span></p>
          <table id="table_000002">
            <tr id="tr_000006">
              <td colspan="1" rowspan="1" id="td_000036">
                <p xml:space="preserve" id="p_000806" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000806">Program</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000037">
                <p xml:space="preserve" id="p_000807" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000807">Size</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000038">
                <p xml:space="preserve" id="p_000808" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000808">Batch (B) or Conversational (C)</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000039">
                <p xml:space="preserve" id="p_000809" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000809">Instructions/man-year</p>
              </td>
            </tr>
            <tr id="tr_000007">
              <td colspan="1" rowspan="1" id="td_000040">
                <p xml:space="preserve" id="p_000810" smilref="The_Mythical_Man_Month_Essay00003.smil#p_000810">ESS code</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000041">
                <p xml:space="preserve" id="p_000811" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000811">800,000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000042">
                <p xml:space="preserve" id="p_000812" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000812">B</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000043">
                <p xml:space="preserve" id="p_000813" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000813">500-1000</p>
              </td>
            </tr>
            <tr id="tr_000008">
              <td colspan="1" rowspan="1" id="td_000044">
                <p xml:space="preserve" id="p_000814" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000814">7094 ESS support</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000045">
                <p xml:space="preserve" id="p_000815" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000815">120.000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000046">
                <p xml:space="preserve" id="p_000816" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000816">B</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000047">
                <p xml:space="preserve" id="p_000817" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000817">2100-3400</p>
              </td>
            </tr>
            <tr id="tr_000009">
              <td colspan="1" rowspan="1" id="td_000048">
                <p xml:space="preserve" id="p_000818" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000818">360 ESS support</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000049">
                <p xml:space="preserve" id="p_000819" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000819">32,000</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000050">
                <p xml:space="preserve" id="p_000820" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000820">C</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000051">
                <p xml:space="preserve" id="p_000821" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000821">8000</p>
              </td>
            </tr>
            <tr id="tr_000010">
              <td colspan="1" rowspan="1" id="td_000052">
                <p xml:space="preserve" id="p_000822" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000822">360 ESS support</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000053">
                <p xml:space="preserve" id="p_000823" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000823">8,300</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000054">
                <p xml:space="preserve" id="p_000824" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000824">B</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000055">
                <p xml:space="preserve" id="p_000825" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000825">4000</p>
              </td>
            </tr>
          </table>
          <pagenum page="normal" id="p137" smilref="The_Mythical_Man_Month_Essay00004.smil#p137">137</pagenum>
          <p xml:space="preserve" id="p_000826"><span class="text" id="span_000437" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000437">Further, we hear good testimonies from many who have built little systems or parts of systems in this way. The only numbers I have seen for effects on programming of large systems were reported by John Harr of Bell Labs. They are shown in Fig. 12.2. These numbers are for writing, assembling, and debugging programs. The first program is mostly control program; the other three are language translators, editors, and such. Harr's data suggest that an interactive facility at least doubles productivity in system programming.</span><sup id="sup_000057" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000057">8</sup></p>
          <p xml:space="preserve" id="p_000827" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000827">The effective use of most interactive tools requires that the work be done in a high-level language, for teletype and typewriter terminals cannot be used to debug by dumping memory. With a high-level language, source can be easily edited and selective printouts easily done. Together they make a pair of sharp tools indeed.</p>
          <pagenum page="normal" id="p138" smilref="The_Mythical_Man_Month_Essay00004.smil#p138">138</pagenum>
          <p xml:space="preserve" id="p_000828" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000828">[Blank Page]</p>
          <pagenum page="normal" id="p139" smilref="The_Mythical_Man_Month_Essay00004.smil#p139">139</pagenum>
          <p xml:space="preserve" id="p_000829" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000829">The Whole and the Parts</p>
          <pagenum page="normal" id="p140" smilref="The_Mythical_Man_Month_Essay00004.smil#p140">140</pagenum>
          <p xml:space="preserve" id="p_000830" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000830">[Image: The cartoon.]</p>
          <pagenum page="normal" id="p141" smilref="The_Mythical_Man_Month_Essay00004.smil#p141">141</pagenum>
        </level2>
        <level2 id="level2_000016">
          <h2 xml:space="preserve" id="h2_000016"><strong id="strong_000211"><em id="em_000237" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000237">The Whole and the Parts</em></strong></h2>
          <p xml:space="preserve" id="p_000831"><em id="em_000238" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000238">I can call spirits from the vasty deep.</em></p>
          <p xml:space="preserve" id="p_000832"><em id="em_000239" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000239">Why so can I, or so can any man; but will they come when you do call for them?</em></p>
          <p xml:space="preserve" id="p_000833"><em id="em_000240" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000240">SHAKESPEARE, KING HENRY </em><span class="text" id="span_000438" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000438">IV, </span><em id="em_000241" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000241">PART </em><span class="text" id="span_000439" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000439">I</span></p>
          <p xml:space="preserve" id="p_000834" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000834">© The Walt Disney Company</p>
          <p xml:space="preserve" id="p_000835"><strong id="strong_000212" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000212">141</strong></p>
          <pagenum page="normal" id="p142" smilref="The_Mythical_Man_Month_Essay00004.smil#p142">142</pagenum>
          <p xml:space="preserve" id="p_000836" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000836">The modern magic, like the old, has its boastful practitioners: "I can write programs that control air traffic, intercept ballistic missiles, reconcile bank accounts, control production lines." To which the answer comes, "So can I, and so can any man, but do they work when you do write them?"</p>
          <p xml:space="preserve" id="p_000837" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000837">How does one build a program to work? How does one test a program? And how does one integrate a tested set of component programs into a tested and dependable system? We have touched upon the techniques here and there; let us now consider them somewhat more systematically.</p>
          <p xml:space="preserve" id="p_000838"><strong id="strong_000213" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000213">Designing the Bugs Out</strong></p>
          <p xml:space="preserve" id="p_000839"><strong id="strong_000214" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000214">Bug-proofing the definition. </strong><span class="text" id="span_000440" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000440">The most pernicious and subtle bugs are system bugs arising from mismatched assumptions made by the authors of various components. The approach to conceptual integrity discussed above in Chapters 4, 5, and 6 addresses these problems directly. In short, conceptual integrity of the product not only makes it easier to use, it also makes it easier to build and less subject to bugs.</span></p>
          <p xml:space="preserve" id="p_000840"><span class="text" id="span_000441" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000441">So does the detailed, painstaking architectural effort implied by that approach. V. A. Vyssotsky, of Bell Telephone Laboratories' Safeguard Project, says, "The crucial task is to get the product defined. Many, many failures concern exactly those aspects that were never quite specified."</span><sup id="sup_000058" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000058">1</sup><span class="text" id="span_000442" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000442"> Careful function definition, careful specification, and the disciplined exorcism of frills of function and flights of technique all reduce the number of system bugs that have to be found.</span></p>
          <p xml:space="preserve" id="p_000841"><strong id="strong_000215" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000215">Testing the specification. </strong><span class="text" id="span_000443" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000443">Long before any code exists, the specification must be handed to an outside testing group to be scrutinized for completeness and clarity. As Vyssotsky says, the developers themselves cannot do this: "They won't tell you they don't understand it; they will happily invent their way through the gaps and obscurities."</span></p>
          <pagenum page="normal" id="p143" smilref="The_Mythical_Man_Month_Essay00004.smil#p143">143</pagenum>
          <p xml:space="preserve" id="p_000842"><strong id="strong_000216" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000216">Top-down design. </strong><span class="text" id="span_000444" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000444">In a very clear 1971 paper, Niklaus Wirth formalized a design procedure which had been used for years by the best programmers.</span><sup id="sup_000059" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000059">2</sup><span class="text" id="span_000445" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000445"> Furthermore, his notions, although stated for program design, apply completely to the design of complex systems of programs. The division of system building into architecture, implementation, and realization is an embodiment of these notions; furthermore, each of the architecture, implementation, and realization can be best done by top-down methods.</span></p>
          <p xml:space="preserve" id="p_000843"><span class="text" id="span_000446" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000446">Briefly, Wirth's procedure is to identify design as a sequence of </span><em id="em_000242" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000242">refinement steps. </em><span class="text" id="span_000447" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000447">One sketches a rough task definition and a rough solution method that achieves the principal result. Then one examines the definition more closely to see how the result differs from what is wanted, and one takes the large steps of the solution and breaks them down into smaller steps. Each refinement in the definition of the task becomes a refinement in the algorithm for solution, and each may be accompanied by a refinement in the data representation.</span></p>
          <p xml:space="preserve" id="p_000844"><span class="text" id="span_000448" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000448">From this process one identifies </span><em id="em_000243" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000243">modules </em><span class="text" id="span_000449" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000449">of solution or of data whose further refinement can proceed independently of other work. The degree of this modularity determines the adaptability and changeability of the program.</span></p>
          <p xml:space="preserve" id="p_000845" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000845">Wirth advocates using as high-level a notation as is possible at each step, exposing the concepts and concealing the details until further refinement becomes necessary.</p>
          <p xml:space="preserve" id="p_000846" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000846">A good top-down design avoids bugs in several ways. First, the clarity of structure and representation makes the precise statement of requirements and functions of the modules easier. Second, the partitioning and independence of modules avoids system bugs. Third, the suppression of detail makes flaws in the structure more apparent. Fourth, the design can be tested at each of its refinement steps, so testing can start earlier and focus on the proper level of detail at each step.</p>
          <p xml:space="preserve" id="p_000847" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000847">The process of step-wise refinement does not mean that one never has to go back, scrap the top level, and start the whole thing</p>
          <pagenum page="normal" id="p144" smilref="The_Mythical_Man_Month_Essay00004.smil#p144">144</pagenum>
          <p xml:space="preserve" id="p_000848" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000848">again as he encounters some unexpectedly knotty detail. Indeed, that happens often. But it is much easier to see exactly when and why one should throw away a gross design and start over. Many poor systems come from an attempt to salvage a bad basic design and patch it with all kinds of cosmetic relief. Top-down design reduces the temptation.</p>
          <p xml:space="preserve" id="p_000849" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000849">I am persuaded that top-down design is the most important new programming formalization of the decade.</p>
          <p xml:space="preserve" id="p_000850"><strong id="strong_000217" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000217">Structured programming. </strong><span class="text" id="span_000450" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000450">Another important set of new ideas for designing the bugs out of programs derives largely from Dijkstra,</span><sup id="sup_000060" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000060">3</sup><span class="text" id="span_000451" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000451"> and is built on a theoretical structure by Böhm and Jacopini.</span><sup id="sup_000061" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000061">4</sup></p>
          <p xml:space="preserve" id="p_000851" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000851">Basically the approach is to design programs whose control structures consist only of loops defined by a statement such as DO WHILE, and conditional portions delineated into groups of statements marked with brackets and conditioned by an IF ... THEN ... ELSE. Böhm and Jacopini show these structures to be theoretically sufficient; Dijkstra argues that the alternative, unrestrained branching via GO TO, produces structures that lend themselves to logical errors.</p>
          <p xml:space="preserve" id="p_000852" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000852">The basic notion is surely sound. Many criticisms have been made, and additional control structures, such as an n-way branch (the so-called CASE statement) for distinguishing among many contingencies, and a disaster bail-out (GO TO ABNORMAL END) are very convenient. Further, some have become very doctrinaire about avoiding all GO TO's, and that seems excessive.</p>
          <p xml:space="preserve" id="p_000853" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000853">The important point, and the one vital to constructing bug-free programs, is that one wants to think about the control structures of a system as control structures, not as individual branch statements. This way of thinking is a major step forward.</p>
          <p xml:space="preserve" id="p_000854"><strong id="strong_000218" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000218">Component Debugging</strong></p>
          <p xml:space="preserve" id="p_000855" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000855">The procedures for debugging programs have been through a great cycle in the past twenty years, and in some ways they are back</p>
          <pagenum page="normal" id="p145" smilref="The_Mythical_Man_Month_Essay00004.smil#p145">145</pagenum>
          <p xml:space="preserve" id="p_000856" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000856">where they started. The cycle has gone through four steps, and it is fun to trace them and see the motivation for each.</p>
          <p xml:space="preserve" id="p_000857"><strong id="strong_000219" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000219">On-machine debugging. </strong><span class="text" id="span_000452" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000452">Early machines had relatively poor input-output equipment, and long input-output delays. Typically, the machine read and wrote paper tape or magnetic tape and off-line facilities were used for tape preparation and printing. This made tape input-output intolerably awkward for debugging, so the console was used instead. Thus debugging was designed to allow as many trials as possible per machine session.</span></p>
          <p xml:space="preserve" id="p_000858" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000858">The programmer carefully designed his debugging procedure --planning where to stop, what memory locations to examine, what do find there, and what to do if he didn't. This meticulous programming of himself as a debugging machine might well take half as long as writing the computer program to be debugged.</p>
          <p xml:space="preserve" id="p_000859" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000859">The cardinal sin was to push START boldly without having segmented the program into test sections with planned stops.</p>
          <p xml:space="preserve" id="p_000860"><strong id="strong_000220" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000220">Memory dumps. </strong><span class="text" id="span_000453" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000453">On-machine debugging was very effective. In a two-hour session, one could get perhaps a dozen shots. But computers were very scarce, and very costly, and the thought of all that machine time going to waste was horrifying.</span></p>
          <p xml:space="preserve" id="p_000861" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000861">So when high-speed printers were attached on-line, the technique changed. One ran a program until a check failed, and then dumped the whole memory. Then began the laborious desk work, accounting for each memory location's contents. The desk time was not much different than that for on-machine debugging; but it occurred after the test run, in deciphering, rather than before, in planning. Debugging for any particular user took much longer, because test shots depended upon batch turnaround time. The whole procedure, however, was designed to minimize computer time use, and to serve as many programmers as possible.</p>
          <p xml:space="preserve" id="p_000862"><strong id="strong_000221" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000221">Snapshots.</strong><span class="text" id="span_000454" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000454"> The machines on which memory dumping was developed had 2000-4000 words, or 8K to 16K bytes of memory. But memory sizes grew by leaps and bounds, and total memory dumping became impractical. So people developed techniques for selective</span></p>
          <pagenum page="normal" id="p146" smilref="The_Mythical_Man_Month_Essay00004.smil#p146">146</pagenum>
          <p xml:space="preserve" id="p_000863" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000863">dumping, selective tracing, and for inserting snapshots into programs. The OS/360 TESTRAN is an end-of-the-line in this direction, allowing one to insert snapshots into a program without reassembly or recompilation.</p>
          <p xml:space="preserve" id="p_000864"><strong id="strong_000222" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000222">Interactive debugging</strong><span class="text" id="span_000455" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000455">. In 1959 Codd and his coworkers</span><sup id="sup_000062" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000062">5</sup><span class="text" id="span_000456" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000456"> and Strachey</span><sup id="sup_000063" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000063">6</sup><span class="text" id="span_000457" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000457"> each reported work aimed at time-shared debugging, a way of achieving both the instant turnaround of on-machine debugging and the efficient machine use of batch debugging. The computer would have multiple programs in memory, ready for execution. A terminal, controlled only by program, would be associated with each program being debugged. Debugging would be under control of a supervisory program. When the programmer at a terminal stopped his program to examine progress or to make changes, the supervisor would run another program, thus keeping the machines busy.</span></p>
          <p xml:space="preserve" id="p_000865"><span class="text" id="span_000458" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000458">Codd's multiprogramming system was developed, but the emphasis was on throughput enhancement by efficient input-output utilization, and interactive debugging was not implemented. Strachey's ideas were improved and implemented in 1963 in an experimental system for the 7090 by Corbató and colleagues at MIT.</span><sup id="sup_000064" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000064">7 </sup><span class="text" id="span_000459" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000459">This development led to the MULTICS, TSS, and other timesharing systems of today.</span></p>
          <p xml:space="preserve" id="p_000866" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000866">The chief user-perceived differences between on-machine debugging as first practiced and the interactive debugging of today are the facilities made possible by the presence of the supervisory program and its associated language interpreters. One can program and debug in a high-level language. Efficient editing facilities make changes and snapshots easy.</p>
          <p xml:space="preserve" id="p_000867" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000867">Return to the instant-turnaround capability of on-machine debugging has not yet brought a return to the preplanning of debugging sessions. In a sense such preplanning is not so necessary as before, since machine time doesn't waste away while one sits and thinks.</p>
          <p xml:space="preserve" id="p_000868"><span class="text" id="span_000460" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000460">Nevertheless, Gold's interesting experimental results show that three times as much progress in interactive debugging is made on the first interaction of each session as on subsequent interactions.</span><sup id="sup_000065" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000065">8</sup></p>
          <pagenum page="normal" id="p147" smilref="The_Mythical_Man_Month_Essay00004.smil#p147">147</pagenum>
          <p xml:space="preserve" id="p_000869" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000869">This strongly suggests that we are not realizing the potential of interaction due to lack of session planning. The time has come to dust off the old on-machine techniques.</p>
          <p xml:space="preserve" id="p_000870" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000870">I find that proper use of a good terminal system requires two hours at the desk for each two-hour session on the terminal. Half of this time is spent in sweeping up after the last session: updating my debugging log, filing updated program listings in my system notebook, explaining strange phenomena. The other half is spent in preparation: planning changes and improvements and designing detailed tests for next time. Without such planning, it is hard to stay productive for as much as two hours. Without the post-session sweep-up, it is hard to keep the succession of terminal sessions systematic and forward-moving.</p>
          <p xml:space="preserve" id="p_000871"><strong id="strong_000223" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000223">Test cases. </strong><span class="text" id="span_000461" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000461">As for the design of actual debugging procedures and test cases, Gruenberger has an especially good treatment,</span><sup id="sup_000066" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000066">9</sup><span class="text" id="span_000462" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000462"> and there are shorter treatments in other standard texts.10,11</span></p>
          <p xml:space="preserve" id="p_000872"><strong id="strong_000224" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000224">System Debugging</strong></p>
          <p xml:space="preserve" id="p_000873"><span class="text" id="span_000463" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000463">The unexpectedly hard part of building a programming system is system test. I have already discussed some of the reasons for both the difficulty and its unexpectedness. From all of that, one should be convinced of two things: system debugging will take longer than one expects, and its difficulty justifies a thoroughly systematic and planned approach. Let us now see what such an approach involves.</span><sup id="sup_000067" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000067">12</sup></p>
          <p xml:space="preserve" id="p_000874"><strong id="strong_000225" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000225">Use debugged components. </strong><span class="text" id="span_000464" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000464">Common sense, if not common practice, dictates that one should begin system debugging only after the pieces seem to work.</span></p>
          <p xml:space="preserve" id="p_000875" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000875">Common practice departs from this in two ways. First is the bolt-it-together-and-try approach. This seems to be based on the notion that there will be system (i.e., interface) bugs in addition to the component bugs. The sooner one puts the pieces together, the sooner the system bugs will emerge. Somewhat less sophisticated is the notion that by using the pieces to test each other, one</p>
          <pagenum page="normal" id="p148" smilref="The_Mythical_Man_Month_Essay00004.smil#p148">148</pagenum>
          <p xml:space="preserve" id="p_000876" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000876">avoids a lot of test scaffolding. Both of these are obviously true, but experience shows that they are not the whole truth--the use of clean, debugged components saves much more time in system testing than that spent on scaffolding and thorough component test.</p>
          <p xml:space="preserve" id="p_000877"><span class="text" id="span_000465" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000465">A little more subtle is the "documented bug" approach. This says that a component is ready to enter system test when all the flaws are </span><em id="em_000244" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000244">found, </em><span class="text" id="span_000466" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000466">well before the time when all are </span><em id="em_000245" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000245">fixed. </em><span class="text" id="span_000467" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000467">Then in system testing, so the theory goes, one knows the expected effects of these bugs and can ignore those effects, concentrating on the new phenomena.</span></p>
          <p xml:space="preserve" id="p_000878"><span class="text" id="span_000468" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000468">All this is just wishful thinking, invented to rationalize away the pain of slipped schedules. One does </span><em id="em_000246" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000246">not </em><span class="text" id="span_000469" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000469">know all the expected effects of known bugs. If things were straightforward, system testing wouldn't be hard. Furthermore, the fixing of the documented component bugs will surely inject unknown bugs, and then system test is confused.</span></p>
          <p xml:space="preserve" id="p_000879"><strong id="strong_000226" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000226">Build plenty of scaffolding. </strong><span class="text" id="span_000470" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000470">By scaffolding I mean all programs and data built for debugging purposes but never intended to be in the final product. It is not unreasonable for there to be half as much code in scaffolding as there is in product.</span></p>
          <p xml:space="preserve" id="p_000880"><span class="text" id="span_000471" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000471">One form of scaffolding is the </span><em id="em_000247" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000247">dummy component, </em><span class="text" id="span_000472" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000472">which consists only of interfaces and perhaps some faked data or some small test cases. For example, a system may include a sort program which isn't finished yet. Its neighbors can be tested by using a dummy program that merely reads and tests the format of input data, and spews out a set of well-formatted meaningless but ordered data.</span></p>
          <p xml:space="preserve" id="p_000881"><span class="text" id="span_000473" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000473">Another form is the </span><em id="em_000248" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000248">miniature file. A </em><span class="text" id="span_000474" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000474">very common form of system bug is misunderstanding of formats for tape and disk files. So it is worthwhile to build some little files that have only a few typical records, but all the descriptions, pointers, etc.</span></p>
          <p xml:space="preserve" id="p_000882"><span class="text" id="span_000475" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000475">The limiting case of miniature file is the </span><em id="em_000249" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000249">dummy file, </em><span class="text" id="span_000476" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000476">which really isn't there at all. OS/360's Job Control Language provides such facility, and it is extremely useful for component debugging.</span></p>
          <pagenum page="normal" id="p149" smilref="The_Mythical_Man_Month_Essay00004.smil#p149">149</pagenum>
          <p xml:space="preserve" id="p_000883"><span class="text" id="span_000477" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000477">Yet another form of scaffolding are </span><em id="em_000250" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000250">auxiliary programs. </em><span class="text" id="span_000478" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000478">Generators for test data, special analysis printouts, cross-reference table analyzers, are all examples of the special-purpose jigs and fixtures one may want to build.</span><sup id="sup_000068" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000068">13</sup></p>
          <p xml:space="preserve" id="p_000884"><strong id="strong_000227" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000227">Control changes. </strong><span class="text" id="span_000479" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000479">Tight control during test is one of the impressive techniques of hardware debugging, and it applies as well to software systems.</span></p>
          <p xml:space="preserve" id="p_000885" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000885">First, somebody must be in charge. He and he alone must authorize component changes or substitution of one version for another.</p>
          <p xml:space="preserve" id="p_000886" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000886">Then, as discussed above, there must be controlled copies of the system: one locked-up copy of the latest versions, used for component testing; one copy under test, with fixes being installed; playpen copies where each man can work away on his component, doing both fixes and extensions.</p>
          <p xml:space="preserve" id="p_000887" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000887">In System/360 engineering models, one saw occasional strands of purple wire among the routine yellow wires. When a bug was found, two things were done. A quick fix was devised and installed on the system, so testing could proceed. This change was put on in purple wire, so it stuck out like a sore thumb. It was entered in the log. Meanwhile, an official change document was prepared and started into the design automation mill. Eventually this resulted in updated drawings and wire lists, and a new back panel in which the change was implemented in printed circuitry or yellow wire. Now the physical model and the paper were together again, and the purple wire was gone.</p>
          <p xml:space="preserve" id="p_000888" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000888">Programming needs a purple-wire technique, and it badly needs tight control and deep respect for the paper that ultimately is the product. The vital ingredients of such technique are the logging of all changes in a journal and the distinction, carried conspicuously in source code, between quick patches and thought-through, tested, documented fixes.</p>
          <p xml:space="preserve" id="p_000889"><strong id="strong_000228" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000228">Add one component at a time. </strong><span class="text" id="span_000480" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000480">This precept, too, is obvious, but optimism and laziness tempt us to violate it. To do it requires</span></p>
          <pagenum page="normal" id="p150" smilref="The_Mythical_Man_Month_Essay00004.smil#p150">150</pagenum>
          <p xml:space="preserve" id="p_000890" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000890">dummies and other scaffolding, and that takes work. And after all, perhaps all that work won't be needed? Perhaps there are no bugs?</p>
          <p xml:space="preserve" id="p_000891" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000891">No! Resist the temptation! That is what systematic system testing is all about. One must assume that there will be lots of bugs, and plan an orderly procedure for snaking them out.</p>
          <p xml:space="preserve" id="p_000892" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000892">Note that one must have thorough test cases, testing the partial systems after each new piece is added. And the old ones, run successfully on the last partial sum, must be rerun on the new one to test for system regression.</p>
          <p xml:space="preserve" id="p_000893"><strong id="strong_000229" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000229">Quantize updates</strong><span class="text" id="span_000481" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000481">. As the system comes up, the component builders will from time to time appear, bearing hot new versions of their pieces--faster, smaller, more complete, or putatively less buggy. The replacement of a working component by a new version requires the same systematic testing procedure that adding a new component does, although it should require less time, for more complete and efficient test cases will usually be available.</span></p>
          <p xml:space="preserve" id="p_000894" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000894">Each team building another component has been using the most recent tested version of the integrated system as a test bed for debugging its piece. Their work will be set back by having that test bed change under them. Of course it must. But the changes need to be quantized. Then each user has periods of productive stability, interrupted by bursts of test-bed change. This seems to be much less disruptive than a constant rippling and trembling.</p>
          <p xml:space="preserve" id="p_000895"><span class="text" id="span_000482" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000482">Lehman and Belady offer evidence that quanta should be very large and widely spaced or else very small and frequent.</span><sup id="sup_000069" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000069">14</sup><span class="text" id="span_000483" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000483"> The latter strategy is more subject to instability, according to their model. My experience confirms it: I would never risk that strategy in practice.</span></p>
          <p xml:space="preserve" id="p_000896" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000896">Quantized changes neatly accommodate a purple-wire technique. The quick patch holds until the next regular release of the component, which should incorporate the fix in tested and documented form.</p>
          <pagenum page="normal" id="p151" smilref="The_Mythical_Man_Month_Essay00004.smil#p151">151</pagenum>
          <p xml:space="preserve" id="p_000897" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000897">Hatching a Catastrophe</p>
          <pagenum page="normal" id="p152" smilref="The_Mythical_Man_Month_Essay00004.smil#p152">152</pagenum>
          <p xml:space="preserve" id="p_000898" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000898">[Image: The statues.]</p>
          <pagenum page="normal" id="p153" smilref="The_Mythical_Man_Month_Essay00004.smil#p153">153</pagenum>
        </level2>
        <level2 id="level2_000017">
          <h2 xml:space="preserve" id="h2_000017"><strong id="strong_000230"><em id="em_000251" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000251">Hatching a Catastrophe</em></strong></h2>
          <p xml:space="preserve" id="p_000899"><em id="em_000252" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000252">None love the bearer of bad news.</em></p>
          <p xml:space="preserve" id="p_000900"><em id="em_000253" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000253">SOPHOCLES</em></p>
          <p xml:space="preserve" id="p_000901"><em id="em_000254" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000254">How does a project get to be a year late?</em></p>
          <p xml:space="preserve" id="p_000902"><em id="em_000255" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000255">... One day at a time.</em></p>
          <p xml:space="preserve" id="p_000903" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000903">A. Canova, "Ercole e Lica," 1802. Hercules hurls to his death the messenger Lycas, who innocently brought the death-garment.</p>
          <p xml:space="preserve" id="p_000904" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000904">Scala/Art Resource, NY</p>
          <p xml:space="preserve" id="p_000905"><strong id="strong_000231" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000231">153</strong></p>
          <pagenum page="normal" id="p154" smilref="The_Mythical_Man_Month_Essay00004.smil#p154">154</pagenum>
          <p xml:space="preserve" id="p_000906" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000906">When one hears of disastrous schedule slippage in a project, he imagines that a series of major calamities must have befallen it. Usually, however, the disaster is due to termites, not tornadoes; and the schedule has slipped imperceptibly but inexorably. Indeed, major calamities are easier to handle; one responds with major force, radical reorganization, the invention of new approaches. The whole team rises to the occasion.</p>
          <p xml:space="preserve" id="p_000907" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000907">But the day-by-day slippage is harder to recognize, harder to prevent, harder to make up. Yesterday a key man was sick, and a meeting couldn't be held. Today the machines are all down, because lightning struck the building's power transformer. Tomorrow the disk routines won't start testing, because the first disk is a week late from the factory. Snow, jury duty, family problems, emergency meetings with customers, executive audits--the list goes on and on. Each one only postpones some activity by a half-day or a day. And the schedule slips, one day at a time.</p>
          <p xml:space="preserve" id="p_000908"><strong id="strong_000232" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000232">Milestones or Millstones?</strong></p>
          <p xml:space="preserve" id="p_000909"><span class="text" id="span_000484" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000484">How does one control a big project on a tight schedule? The first step is to </span><em id="em_000256" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000256">have </em><span class="text" id="span_000485" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000485">a schedule. Each of a list of events, called milestones, has a date. Picking the dates is an estimating problem, discussed already and crucially dependent on experience.</span></p>
          <p xml:space="preserve" id="p_000910"><span class="text" id="span_000486" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000486">For picking the milestones there is only one relevant rule. Milestones must be concrete, specific, measurable events, defined with knife-edge sharpness. Coding, for a counterexample, is "90 percent finished" for half of the total coding time. Debugging is "99 percent complete" most of the time. "Planning complete" is an event one can proclaim almost at will.</span><sup id="sup_000070" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000070">1</sup></p>
          <p xml:space="preserve" id="p_000911" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000911">Concrete milestones, on the other hand, are 100-percent events. "Specifications signed by architects and implementers," "source coding 100 percent complete, keypunched, entered into disk library," "debugged version passes all test cases." These concrete milestones demark the vague phases of planning, coding, debugging.</p>
          <pagenum page="normal" id="p155" smilref="The_Mythical_Man_Month_Essay00004.smil#p155">155</pagenum>
          <p xml:space="preserve" id="p_000912"><span class="text" id="span_000487" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000487">It is more important that milestones be sharp-edged and unambiguous than that they be easily verifiable by the boss. Rarely will a man lie about milestone progress, </span><em id="em_000257" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000257">if </em><span class="text" id="span_000488" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000488">the milestone is so sharp that he can't deceive himself. But if the milestone is fuzzy, the boss often understands a different report from that which the man gives. To supplement Sophocles, no one enjoys bearing bad news, either, so it gets softened without any real intent to deceive.</span></p>
          <p xml:space="preserve" id="p_000913" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000913">Two interesting studies of estimating behavior by government contractors on large-scale development projects show that:</p>
          <p xml:space="preserve" id="p_000914"><strong id="strong_000233" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000233">1</strong><span class="text" id="span_000489" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000489">. Estimates of the length of an activity, made and revised carefully every two weeks before the activity starts, do not significantly change as the start time draws near, no matter how wrong they ultimately turn out to be.</span></p>
          <p xml:space="preserve" id="p_000915"><strong id="strong_000234" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000234">2</strong><span class="text" id="span_000490" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000490">. </span><em id="em_000258" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000258">During </em><span class="text" id="span_000491" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000491">the activity, </span><em id="em_000259" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000259">over</em><span class="text" id="span_000492" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000492"> estimates of duration come steadily down as the activity proceeds.</span></p>
          <p xml:space="preserve" id="p_000916"><strong id="strong_000235" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000235">3</strong><span class="text" id="span_000493" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000493">. </span><em id="em_000260" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000260">Underestimates </em><span class="text" id="span_000494" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000494">do not change significantly during the activity until about three weeks before the scheduled completion.</span><sup id="sup_000071" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000071">2</sup></p>
          <p xml:space="preserve" id="p_000917" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000917">Sharp milestones are in fact a service to the team, and one they can properly expect from a manager. The fuzzy milestone is the harder burden to live with. It is in fact a millstone that grinds down morale, for it deceives one about lost time until it is irremediable. And chronic schedule slippage is a morale-killer.</p>
          <p xml:space="preserve" id="p_000918"><strong id="strong_000236" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000236">"The Other Piece Is Late, Anyway"</strong></p>
          <p xml:space="preserve" id="p_000919" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000919">A schedule slips a day; so what? Who gets excited about a one-day slip? We can make it up later. And the other piece into which ours fits is late, anyway.</p>
          <p xml:space="preserve" id="p_000920"><span class="text" id="span_000495" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000495">A baseball manager recognizes a nonphysical talent, </span><em id="em_000261" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000261">hustle, </em><span class="text" id="span_000496" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000496">as an essential gift of great players and great teams. It is the characteristic of running faster than necessary, moving sooner than necessary, trying harder than necessary. It is essential for great programming teams, too. Hustle provides the cushion, the reserve capacity, that enables a team to cope with routine mishaps, to</span></p>
          <pagenum page="normal" id="p156" smilref="The_Mythical_Man_Month_Essay00004.smil#p156">156</pagenum>
          <p xml:space="preserve" id="p_000921"><span class="text" id="span_000497" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000497">anticipate and forfend minor calamities. The calculated response, the measured effort, are the wet blankets that dampen hustle. As we have seen, one </span><em id="em_000262" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000262">must </em><span class="text" id="span_000498" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000498">get excited about a one-day slip. Such are the elements of catastrophe.</span></p>
          <p xml:space="preserve" id="p_000922" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000922">But not all one-day slips are equally disastrous. So some calculation of response is necessary, though hustle be dampened. How does one tell which slips matter? There is no substitute for a PERT chart or a critical-path schedule. Such a network shows who waits for what. It shows who is on the critical path, where any slip moves the end date. It also shows how much an activity can slip before it moves into the critical path.</p>
          <p xml:space="preserve" id="p_000923" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000923">The PERT technique, strictly speaking, is an elaboration of critical-path scheduling in which one estimates three times for every event, times corresponding to different probabilities of meeting the estimated dates. I do not find this refinement to be worth the extra effort, but for brevity I will call any critical path network a PERT chart.</p>
          <p xml:space="preserve" id="p_000924" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000924">The preparation of a PERT chart is the most valuable part of its use. Laying out the network, identifying the dependencies, and estimating the legs all force a great deal of very specific planning very early in a project. The first chart is always terrible, and one invents and invents in making the second one.</p>
          <p xml:space="preserve" id="p_000925" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000925">As the project proceeds, the PERT chart provides the answer to the demoralizing excuse, "The other piece is late anyhow." It shows how hustle is needed to keep one's own part off the critical path, and it suggests ways to make up the lost time in the other part.</p>
          <p xml:space="preserve" id="p_000926"><strong id="strong_000237" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000237">Under the Rug</strong></p>
          <p xml:space="preserve" id="p_000927" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000927">When a first-line manager sees his small team slipping behind, he is rarely inclined to run to the boss with this woe. The team might be able to make it up, or he should be able to invent or reorganize to solve the problem. Then why worry the boss with it? So far, so</p>
          <pagenum page="normal" id="p157" smilref="The_Mythical_Man_Month_Essay00004.smil#p157">157</pagenum>
          <p xml:space="preserve" id="p_000928" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000928">good. Solving such problems is exactly what the first-line manager is there for. And the boss does have enough real worries demanding his action that he doesn't seek others. So all the dirt gets swept under the rug.</p>
          <p xml:space="preserve" id="p_000929"><span class="text" id="span_000499" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000499">But every boss needs two kinds of information, exceptions to plan that require action and a status picture for education.</span><sup id="sup_000072" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000072">3</sup><span class="text" id="span_000500" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000500"> For that purpose he needs to know the status of all his teams. Getting a true picture of that status is hard.</span></p>
          <p xml:space="preserve" id="p_000930" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000930">The first-line manager's interests and those of the boss have an inherent conflict here. The first-line manager fears that if he reports his problem, the boss will act on it. Then his action will preempt the manager's function, diminish his authority, foul up his other plans. So as long as the manager thinks he can solve it alone, he doesn't tell the boss.</p>
          <p xml:space="preserve" id="p_000931" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000931">Two rug-lifting techniques are open to the boss. Both must be used. The first is to reduce the role conflict and inspire sharing of status. The other is to yank the rug back.</p>
          <p xml:space="preserve" id="p_000932"><strong id="strong_000238" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000238">Reducing the role conflict. </strong><span class="text" id="span_000501" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000501">The boss must first distinguish between action information and status information. He must discipline himself </span><em id="em_000263" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000263">not </em><span class="text" id="span_000502" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000502">to act on problems his managers can solve, and </span><em id="em_000264" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000264">never </em><span class="text" id="span_000503" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000503">to act on problems when he is explicitly reviewing status. I once knew a boss who invariably picked up the phone to give orders before the end of the first paragraph in a status report. That response is guaranteed to squelch full disclosure.</span></p>
          <p xml:space="preserve" id="p_000933" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000933">Conversely, when the manager knows his boss will accept status reports without panic or preemption, he comes to give honest appraisals.</p>
          <p xml:space="preserve" id="p_000934"><span class="text" id="span_000504" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000504">This whole process is helped if the boss labels meetings, reviews, conferences, as </span><em id="em_000265" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000265">status-review </em><span class="text" id="span_000505" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000505">meetings versus </span><em id="em_000266" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000266">problem-action </em><span class="text" id="span_000506" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000506">meetings, and controls himself accordingly. Obviously one may call a problem-action meeting as a consequence of a status meeting, if he believes a problem is out of hand. But at least everybody knows what the score is, and the boss thinks twice before grabbing the ball.</span></p>
          <pagenum page="normal" id="p158" smilref="The_Mythical_Man_Month_Essay00004.smil#p158">158</pagenum>
          <p xml:space="preserve" id="p_000935"><strong id="strong_000239" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000239">Yanking the rug off. </strong><span class="text" id="span_000507" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000507">Nevertheless, it is necessary to have review techniques by which the true status is made known, whether cooperatively or not. The PERT chart with its frequent sharp milestones is the basis for such review. On a large project one may want to review some part of it each week, making the rounds once a month or so.</span></p>
          <p xml:space="preserve" id="p_000936" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000936">A report showing milestones and actual completions is the key document. Figure 14.1 shows an excerpt from such a report. This report shows some troubles. Specifications approval is overdue on several components. Manual (SLR) approval is overdue on another, and one is late getting out of the first state (Alpha) of the independently conducted product test. So such a report serves as an agenda for the meeting of 1 February. Everyone knows the questions, and the component manager should be prepared to explain why it's late, when it will be finished, what steps he's taking, and what help, if any, he needs from the boss or collateral groups.</p>
          <p xml:space="preserve" id="p_000937" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000937">V. Vyssotsky of Bell Telephone Laboratories adds the following observation:</p>
          <p xml:space="preserve" id="p_000938"><em id="em_000267" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000267">I have found it handy to carry both "scheduled" and "estimated" dates in the milestone report. The scheduled dates are the property of the project manager and represent a consistent work plan for the project as a whole, and one which is </em><span class="text" id="span_000508" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000508">a priori </span><em id="em_000268" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000268">a reasonable plan. The estimated dates are the property of the lowest level manager who has cognizance over the piece of work in question, and represents his best judgment as to when it will actually happen, given the resources he has available and when he received (or has commitments for delivery of) his prerequisite inputs. The project manager has to keep his fingers off the estimated dates, and put the emphasis on getting accurate, unbiased estimates rather than palatable optimistic estimates or self-protective conservative ones. Once this is clearly established in everyone's</em> <em id="em_000269" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000269">mind, the project manager can see quite a ways into the future where he is going to be in trouble if he doesn't do something. </em><sup id="sup_000073" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000073">4</sup></p>
          <pagenum page="normal" id="p159" smilref="The_Mythical_Man_Month_Essay00004.smil#p159">159</pagenum>
          <p xml:space="preserve" id="p_000939"><span class="text" id="span_000509" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000509">[Table: </span><strong id="strong_000240" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000240">Figure 14.1</strong><span class="text" id="span_000510" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000510">.]</span></p>
          <pagenum page="normal" id="p160" smilref="The_Mythical_Man_Month_Essay00004.smil#p160">160</pagenum>
          <p xml:space="preserve" id="p_000940"><span class="text" id="span_000511" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000511">The preparation of the PERT chart is a function of the boss and the managers reporting to him. Its updating, revision, and reporting requires the attention of a small (one to three man) staff group which serves as an extension of the boss. Such a </span><em id="em_000270" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000270">Plans and Controls </em><span class="text" id="span_000512" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000512">team is invaluable for a large project. It has no authority except to ask all the line managers when they will have set or changed milestones, and whether milestones have been met. Since the Plans and Controls group handles all the paperwork, the burden on the line managers is reduced to the essentials--making the decisions.</span></p>
          <p xml:space="preserve" id="p_000941" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000941">We had a skilled, enthusiastic, and diplomatic Plans and Controls group, run by A. M. Pietrasanta, who devoted considerable inventive talent to devising effective but unobtrusive control methods. As a result, I found his group to be widely respected and more than tolerated. For a group whose role is inherently that of an irritant, this is quite an accomplishment.</p>
          <p xml:space="preserve" id="p_000942" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000942">The investment of a modest amount of skilled effort in a Plans and Controls function is very rewarding. It makes far more difference in project accomplishment than if these people worked directly on building the product programs. For the Plans and Controls group is the watchdog who renders the imperceptible delays visible and who points up the critical elements. It is the early warning system against losing a year, one day at a time.</p>
          <pagenum page="normal" id="p161" smilref="The_Mythical_Man_Month_Essay00004.smil#p161">161</pagenum>
          <p xml:space="preserve" id="p_000943" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000943">The Other Face</p>
          <pagenum page="normal" id="p162" smilref="The_Mythical_Man_Month_Essay00004.smil#p162">162</pagenum>
          <p xml:space="preserve" id="p_000944" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000944">[Image: The museum.]</p>
          <pagenum page="normal" id="p163" smilref="The_Mythical_Man_Month_Essay00004.smil#p163">163</pagenum>
        </level2>
        <level2 id="level2_000018">
          <h2 xml:space="preserve" id="h2_000018"><strong id="strong_000241"><em id="em_000271" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000271">The Other Face</em></strong></h2>
          <p xml:space="preserve" id="p_000945"><em id="em_000272" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000272">What we do not understand we do not possess.</em></p>
          <p xml:space="preserve" id="p_000946"><em id="em_000273" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000273">GOETHE</em></p>
          <p xml:space="preserve" id="p_000947"><em id="em_000274" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000274">O give me commentators plain,</em></p>
          <p xml:space="preserve" id="p_000948"><em id="em_000275" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000275">Who with no deep researches vex the brain.</em></p>
          <p xml:space="preserve" id="p_000949"><em id="em_000276" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000276">CRABBE</em></p>
          <p xml:space="preserve" id="p_000950" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000950">A reconstruction of Stonehenge, the world's largest undocumented computer.</p>
          <p xml:space="preserve" id="p_000951" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000951">The Bettman Archive</p>
          <p xml:space="preserve" id="p_000952"><strong id="strong_000242" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000242">163</strong></p>
          <pagenum page="normal" id="p164" smilref="The_Mythical_Man_Month_Essay00004.smil#p164">164</pagenum>
          <p xml:space="preserve" id="p_000953" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000953">A computer program is a message from a man to a machine. The rigidly marshaled syntax and the scrupulous definitions all exist to make intention clear to the dumb engine.</p>
          <p xml:space="preserve" id="p_000954" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000954">But a written program has another face, that which tells its story to the human user. For even the most private of programs, some such communication is necessary; memory will fail the author-user, and he will require refreshing on the details of his handiwork.</p>
          <p xml:space="preserve" id="p_000955" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000955">How much more vital is the documentation for a public program, whose user is remote from the author in both time and space! For the program product, the other face to the user is fully as important as the face to the machine.</p>
          <p xml:space="preserve" id="p_000956" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000956">Most of us have quietly excoriated the remote and anonymous author of some skimpily documented program. And many of us have therefore tried to instill in new programmers an attitude about documentation that would inspire for a lifetime, overcoming sloth and schedule pressure. By and large we have failed. I think we have used wrong methods.</p>
          <p xml:space="preserve" id="p_000957"><span class="text" id="span_000513" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000513">Thomas J. Watson, Sr. told the story of his first experience as a cash register salesman in upstate New York. Charged with enthusiasm, he sallied out with his wagon loaded with cash registers. He worked his territory diligently but without selling a one. Downcast, he reported to his boss. The sales manager listened a while, then said, "Help me load some registers into the wagon, harness the horse, and let's go again." They did, and the two called on customer after customer, with the older man </span><em id="em_000277" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000277">showing how </em><span class="text" id="span_000514" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000514">to sell cash registers. All evidence indicates that the lesson took.</span></p>
          <p xml:space="preserve" id="p_000958"><span class="text" id="span_000515" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000515">For several years I diligently lectured my software engineering class on the necessity and propriety of good documentation, exhorting them ever more fervently and eloquently. It didn't work. I assumed they had learned how to document properly and were failing from lack of zeal. Then I tried loading some cash registers into the wagon; i.e., </span><em id="em_000278" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000278">showing </em><span class="text" id="span_000516" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000516">them how the job is done. This has been much more successful. So the remainder of this essay will downplay exhortation and concentrate on the "how" of good documentation.</span></p>
          <pagenum page="normal" id="p165" smilref="The_Mythical_Man_Month_Essay00004.smil#p165">165</pagenum>
          <p xml:space="preserve" id="p_000959"><strong id="strong_000243" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000243">What Documentation Is Required?</strong></p>
          <p xml:space="preserve" id="p_000960" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000960">Different levels of documentation are required for the casual user of a program, for the user who must depend upon a program, and for the user who must adapt a program for changes in circumstance or purpose.</p>
          <p xml:space="preserve" id="p_000961"><strong id="strong_000244" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000244">To use a program. </strong><span class="text" id="span_000517" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000517">Every user needs a prose description of the program. Most documentation fails in giving too little overview. The trees are described, the bark and leaves are commented, but there is no map of the forest. To write a useful prose description, stand way back and come in slowly:</span></p>
          <p xml:space="preserve" id="p_000962"><strong id="strong_000245" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000245">1</strong><span class="text" id="span_000518" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000518">. </span><em id="em_000279" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000279">Purpose. </em><span class="text" id="span_000519" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000519">What is the main function, the reason for the program?</span></p>
          <p xml:space="preserve" id="p_000963"><strong id="strong_000246" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000246">2</strong><span class="text" id="span_000520" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000520">. </span><em id="em_000280" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000280">Environment. </em><span class="text" id="span_000521" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000521">On what machines, hardware configurations, and operating system configurations will it run?</span></p>
          <p xml:space="preserve" id="p_000964"><strong id="strong_000247" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000247">3</strong><span class="text" id="span_000522" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000522">. </span><em id="em_000281" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000281">Domain and range. </em><span class="text" id="span_000523" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000523">What domain of input is valid? What range of output can legitimately appear?</span></p>
          <p xml:space="preserve" id="p_000965"><strong id="strong_000248" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000248">4</strong><span class="text" id="span_000524" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000524">. </span><em id="em_000282" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000282">Functions realized and algorithms used. </em><span class="text" id="span_000525" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000525">Precisely what does it do?</span></p>
          <p xml:space="preserve" id="p_000966"><strong id="strong_000249" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000249">5</strong><span class="text" id="span_000526" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000526">. </span><em id="em_000283" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000283">Input-output formats,. </em><span class="text" id="span_000527" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000527">precise and complete.</span></p>
          <p xml:space="preserve" id="p_000967"><strong id="strong_000250" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000250">6</strong><span class="text" id="span_000528" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000528">. </span><em id="em_000284" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000284">Operating instructions, </em><span class="text" id="span_000529" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000529">including normal and abnormal ending behavior, as seen at the console and on the outputs.</span></p>
          <p xml:space="preserve" id="p_000968"><strong id="strong_000251" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000251">7</strong><em id="em_000285" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000285">. Options. </em><span class="text" id="span_000530" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000530">What choices does the user have about functions? Exactly how are those choices specified?</span></p>
          <p xml:space="preserve" id="p_000969"><strong id="strong_000252" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000252">8</strong><span class="text" id="span_000531" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000531">. </span><em id="em_000286" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000286">Running time. </em><span class="text" id="span_000532" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000532">How long does it take to do a problem of specified size on a specified configuration?</span></p>
          <p xml:space="preserve" id="p_000970"><strong id="strong_000253" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000253">9</strong><span class="text" id="span_000533" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000533">. </span><em id="em_000287" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000287">Accuracy and checking. </em><span class="text" id="span_000534" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000534">How precise are the answers expected to be? What means of checking accuracy are incorporated?</span></p>
          <p xml:space="preserve" id="p_000971" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000971">Often all this information can be set forth in three or four pages. That requires close attention to conciseness and precision. Most of this document needs to be drafted before the program is written, for it embodies basic planning decisions.</p>
          <p xml:space="preserve" id="p_000972"><strong id="strong_000254" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000254">To believe a program. </strong><span class="text" id="span_000535" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000535">The description of how it is used must be supplemented with some description of how one knows it is working. This means test cases.</span></p>
          <pagenum page="normal" id="p166" smilref="The_Mythical_Man_Month_Essay00004.smil#p166">166</pagenum>
          <p xml:space="preserve" id="p_000973" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000973">Every copy of a program shipped should include some small test cases that can be routinely used to reassure the user that he has a faithful copy, accurately loaded into the machine.</p>
          <p xml:space="preserve" id="p_000974" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000974">Then one needs more thorough test cases, which are normally run only after a program is modified. These fall into three parts of the input data domain:</p>
          <p xml:space="preserve" id="p_000975"><strong id="strong_000255" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000255">1</strong><span class="text" id="span_000536" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000536">. Mainline cases that test the program's chief functions for commonly encountered data.</span></p>
          <p xml:space="preserve" id="p_000976"><strong id="strong_000256" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000256">2</strong><span class="text" id="span_000537" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000537">. Barely legitimate cases that probe the edge of the input data domain, ensuring that largest possible values, smallest possible values, and all kinds of valid exceptions work.</span></p>
          <p xml:space="preserve" id="p_000977"><strong id="strong_000257" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000257">3</strong><span class="text" id="span_000538" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000538">. Barely illegitimate cases that probe the domain boundary from the other side, ensuring that invalid inputs raise proper diagnostic messages.</span></p>
          <p xml:space="preserve" id="p_000978"><strong id="strong_000258" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000258">To modify a program. </strong><span class="text" id="span_000539" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000539">Adapting a program or fixing it requires considerably more information. Of course the full detail is required, and that is contained in a well-commented listing. For the modifier, as well as the more casual user, the crying need is for a clear, sharp overview, this time of the internal structure. What are the components of such an overview?</span></p>
          <p xml:space="preserve" id="p_000979"><strong id="strong_000259" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000259">1</strong><span class="text" id="span_000540" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000540">. A flow chart or subprogram structure graph. More on this later.</span></p>
          <p xml:space="preserve" id="p_000980"><strong id="strong_000260" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000260">2</strong><span class="text" id="span_000541" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000541">. Complete descriptions of the algorithms used, or else references to such descriptions in the literature.</span></p>
          <p xml:space="preserve" id="p_000981"><strong id="strong_000261" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000261">3</strong><span class="text" id="span_000542" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000542">. An explanation of the layout of all files used.</span></p>
          <p xml:space="preserve" id="p_000982"><strong id="strong_000262" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000262">4</strong><span class="text" id="span_000543" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000543">. An overview of the pass structure--the sequence in which data or programs are brought from tape or disk--and what is accomplished on each pass.</span></p>
          <p xml:space="preserve" id="p_000983"><strong id="strong_000263" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000263">5</strong><span class="text" id="span_000544" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000544">. A discussion of modifications contemplated in the original design, the nature and location of hooks and exits, and discursive discussion of the ideas of the original author about what modifications might be desirable and how one might proceed. His observations on hidden pitfalls are also useful.</span></p>
          <pagenum page="normal" id="p167" smilref="The_Mythical_Man_Month_Essay00004.smil#p167">167</pagenum>
          <p xml:space="preserve" id="p_000984"><strong id="strong_000264" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000264">The Flow-Chart Curse</strong></p>
          <p xml:space="preserve" id="p_000985" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000985">The flow chart is a most thoroughly oversold piece of program documentation. Many programs don't need flow charts at all; few programs need more than a one-page flow chart.</p>
          <p xml:space="preserve" id="p_000986"><span class="text" id="span_000545" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000545">[Chart: </span><strong id="strong_000265" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000265">Fig. 15.1</strong><span class="text" id="span_000546" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000546"> A program structure graph. (Courtesy of W. V. Wright)]</span></p>
          <p xml:space="preserve" id="p_000987" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000987">Flow charts show the decision structure of a program, which is only one aspect of its structure. They show decision structure rather elegantly when the flow chart is on one page, but the over-</p>
          <pagenum page="normal" id="p168" smilref="The_Mythical_Man_Month_Essay00004.smil#p168">168</pagenum>
          <p xml:space="preserve" id="p_000988" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000988">view breaks down badly when one has multiple pages, sewed together with numbered exits and connectors.</p>
          <p xml:space="preserve" id="p_000989" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000989">The one-page flow chart for a substantial program becomes essentially a diagram of program structure, and of phases or steps. As such it is very handy. Figure 15.1 shows such a subprogram structure graph.</p>
          <p xml:space="preserve" id="p_000990" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000990">Of course such a structure graph neither follows nor needs the painfully wrought ANSI flow-charting standards. All the rules on box shapes, connectors, numbering, etc. are needed only to give intelligibility to detailed flow charts.</p>
          <p xml:space="preserve" id="p_000991"><span class="text" id="span_000547" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000547">The detailed blow-by-blow flow chart, however, is an obsolete nuisance, suitable only for initiating beginners into algorithmic thinking. When introduced by Goldstine and von Neumann,</span><sup id="sup_000074" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000074">1 </sup><span class="text" id="span_000548" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000548">the little boxes and their contents served as a high-level language, grouping the inscrutable machine-language statements into clusters of significance. As Iverson early recognized,</span><sup id="sup_000075" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000075">2</sup><span class="text" id="span_000549" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000549"> in a systematic high-level language the clustering is already done, and each box contains a statement (Fig. 15.2). Then the boxes themselves become no more than a tedious and space-hogging exercise in drafting; they might as well be eliminated. Then nothing is left but the arrows. The arrows joining a statement to its successor are redundant; erase them. That leaves only GO TO's. And if one follows good practice and uses block structure to minimize GO TO's, there aren't many arrows, but they aid comprehension immensely. One might as well draw them on the listing and eliminate the flow chart altogether.</span></p>
          <p xml:space="preserve" id="p_000992" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000992">In fact, flow charting is more preached than practiced. I have never seen an experienced programmer who routinely made detailed flow charts before beginning to write programs. Where organization standards require flow charts, these are almost invariably done after the fact. Many shops proudly use machine programs to generate this "indispensable design tool" from the completed code. I think this universal experience is not an embarrassing and deplorable departure from good practice, to be acknowledged only with a nervous laugh. Instead it is the</p>
          <pagenum page="normal" id="p169" smilref="The_Mythical_Man_Month_Essay00004.smil#p169">169</pagenum>
          <p xml:space="preserve" id="p_000993" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000993">application of good judgment, and it teaches us something about the utility of flow charts.</p>
          <p xml:space="preserve" id="p_000994" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000994">The Apostle Peter said of new Gentile converts and the Jewish law, "Why lay a load on [their] backs which neither our ancestors nor we ourselves were able to carry?" (Acts 15:10, TEV). I would say the same about new programmers and the obsolete practice of flow charting.</p>
          <p xml:space="preserve" id="p_000995"><strong id="strong_000266" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000266">Self-Documenting Programs</strong></p>
          <p xml:space="preserve" id="p_000996" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000996">A basic principle of data processing teaches the folly of trying to maintain independent files in synchronism. It is far better to combine them into one file with each record containing all the information both files held concerning a given key.</p>
          <p xml:space="preserve" id="p_000997" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000997">Yet our practice in programming documentation violates our own teaching. We typically attempt to maintain a machine-readable form of a program and an independent set of human-readable documentation, consisting of prose and flow charts.</p>
          <p xml:space="preserve" id="p_000998" smilref="The_Mythical_Man_Month_Essay00004.smil#p_000998">The results in fact confirm our teachings about the folly of separate files. Program documentation is notoriously poor, and its maintenance is worse. Changes made in the program do not promptly, accurately, and invariably appear in the paper.</p>
          <p xml:space="preserve" id="p_000999"><span class="text" id="span_000550" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000550">The solution, I think, is to merge the files, to incorporate the documentation in the source program. This is at once a powerful incentive toward proper maintenance, and an insurance that the documentation will always be handy to the program user. Such programs are called </span><em id="em_000288" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000288">self-documenting.</em></p>
          <p xml:space="preserve" id="p_001000" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001000">Now clearly this is awkward (but not impossible) if flow charts are to be included. But grant the obsolescence of flow charts and the dominant use of high-level language, and it becomes reasonable to combine the program and the documentation.</p>
          <p xml:space="preserve" id="p_001001" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001001">The use of a source program as a documentation medium imposes some constraints. On the other hand, the intimate availability of the source program, line by line, to the reader of the documentation makes possible new techniques. The time has</p>
          <pagenum page="normal" id="p170" smilref="The_Mythical_Man_Month_Essay00004.smil#p170">170</pagenum>
          <p xml:space="preserve" id="p_001002" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001002">[Blank Page]</p>
          <pagenum page="normal" id="p171" smilref="The_Mythical_Man_Month_Essay00004.smil#p171">171</pagenum>
          <p xml:space="preserve" id="p_001003"><span class="text" id="span_000551" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000551">[Chart: </span><strong id="strong_000267" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000267">Fig. 15.2</strong><span class="text" id="span_000552" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000552"> Comparison of a flow chart and a corresponding PL/I program. [Abridged and adapted from Figs. 15-41, 15-44, in </span><em id="em_000289" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000289">Data Processing and Computer Programming: A Modular Approach </em><span class="text" id="span_000553" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000553">by Thomas J. Cashman and William J. Keys (Harper &amp; Row, 1971).]]</span></p>
          <pagenum page="normal" id="p172" smilref="The_Mythical_Man_Month_Essay00004.smil#p172">172</pagenum>
          <p xml:space="preserve" id="p_001004" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001004">come to devise radically new approaches and methods for program documentation.</p>
          <p xml:space="preserve" id="p_001005" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001005">As a principal objective, we must attempt to minimize the burden of documentation, the burden neither we nor our predecessors have been able to bear successfully.</p>
          <p xml:space="preserve" id="p_001006"><strong id="strong_000268" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000268">An approach. </strong><span class="text" id="span_000554" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000554">The first notion is to use the parts of the program that have to be there anyway, for programming language reasons, to carry as much of the documentation as possible. So labels, declaration statements, and symbolic names are all harnessed to the task of conveying as much meaning as possible to the reader.</span></p>
          <p xml:space="preserve" id="p_001007" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001007">A second notion is to use space and format as much as possible to improve readability and show subordination and nesting.</p>
          <p xml:space="preserve" id="p_001008" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001008">The third notion is to insert the necessary prose documentation into the program as paragraphs of comment. Most programs tend to have enough line-by-line comments; those programs produced to meet stiff organizational standards for "good documentation" often have too many. Even these programs, however, are usually deficient in the paragraph comments that really give intelligibility and overview to the whole thing.</p>
          <p xml:space="preserve" id="p_001009"><span class="text" id="span_000555" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000555">Since the documentation is built into the structure, naming, and formats of the program, much of it </span><em id="em_000290" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000290">must </em><span class="text" id="span_000556" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000556">be done when the program is first written. But that is when it </span><em id="em_000291" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000291">should </em><span class="text" id="span_000557" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000557">be written. Since the self-documentation approach minimizes extra work, there are fewer obstacles to doing it then.</span></p>
          <p xml:space="preserve" id="p_001010"><strong id="strong_000269" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000269">Some techniques</strong><span class="text" id="span_000558" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000558">. Figure 15.3 shows a self-documenting PL/I program.</span><sup id="sup_000076" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000076">3</sup><span class="text" id="span_000559" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000559"> The numbers in the circles are not part of it; they are meta-documentation keyed to the discussion.</span></p>
          <p xml:space="preserve" id="p_001011"><strong id="strong_000270" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000270">1</strong><span class="text" id="span_000560" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000560">. Use a separate job name for each run, and maintain a run log showing what was tried, when, and the results. If the name is composed of a mnemonic part (here </span><em id="em_000292" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000292">QLT</em><span class="text" id="span_000561" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000561">) and a numerical suffix (here </span><em id="em_000293" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000293">4</em><span class="text" id="span_000562" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000562">), the suffix can be used as a run number, tying listings and log together. This technique requires a new job card for each run, but they can be made up in batches, duplicating the common information.</span></p>
          <p xml:space="preserve" id="p_001012"><span class="text" id="span_000563" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000563">[Image: </span><strong id="strong_000271" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000271">Fig. 15.3 A</strong><span class="text" id="span_000564" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000564"> self-documenting program.]</span></p>
          <pagenum page="normal" id="p173" smilref="The_Mythical_Man_Month_Essay00004.smil#p173">173</pagenum>
          <p xml:space="preserve" id="p_001013" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001013">[Blank Page]</p>
          <pagenum page="normal" id="p174" smilref="The_Mythical_Man_Month_Essay00004.smil#p174">174</pagenum>
          <p xml:space="preserve" id="p_001014"><strong id="strong_000272" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000272">2</strong><span class="text" id="span_000565" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000565">. Use a program name that is mnemonic but also contains a version identifier. That is, assume there will be several versions. Here the index is the low order digit of the year 1967.</span></p>
          <p xml:space="preserve" id="p_001015"><strong id="strong_000273" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000273">3</strong><span class="text" id="span_000566" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000566">. Incorporate the prose description as comments to PROCEDURE.</span></p>
          <p xml:space="preserve" id="p_001016"><strong id="strong_000274" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000274">4</strong><span class="text" id="span_000567" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000567">. Refer to standard literature to document basic algorithms wherever possible. This saves space, usually points to a much fuller treatment than one would provide, and allows the knowledgeable reader to skip it with confidence that he understands you.</span></p>
          <p xml:space="preserve" id="p_001017"><strong id="strong_000275" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000275">5</strong><span class="text" id="span_000568" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000568">. Show the relationship to the book algorithm:</span></p>
          <p xml:space="preserve" id="p_001018"><strong id="strong_000276" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000276">a</strong><span class="text" id="span_000569" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000569">) changes </span></p>
          <p xml:space="preserve" id="p_001019"><strong id="strong_000277" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000277">b</strong><span class="text" id="span_000570" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000570">) specialization </span></p>
          <p xml:space="preserve" id="p_001020"><strong id="strong_000278" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000278">c</strong><span class="text" id="span_000571" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000571">) representation</span></p>
          <p xml:space="preserve" id="p_001021"><strong id="strong_000279" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000279">6</strong><span class="text" id="span_000572" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000572">. Declare all variables. Use mnemonic names. Use comments to convert DECLARE into a complete legend. Note that it already contains names and structural descriptions, it needs only to be augmented with descriptions of </span><em id="em_000294" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000294">purpose. </em><span class="text" id="span_000573" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000573">By doing so here, one can avoid repeating the names and structural descriptions in a separate treatment.</span></p>
          <p xml:space="preserve" id="p_001022"><strong id="strong_000280" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000280">7</strong><span class="text" id="span_000574" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000574">. Mark the initialization by a label.</span></p>
          <p xml:space="preserve" id="p_001023"><strong id="strong_000281" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000281">8</strong><span class="text" id="span_000575" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000575">. Label statements in groups to show correspondences to the statements in the algorithm description in the literature.</span></p>
          <p xml:space="preserve" id="p_001024"><strong id="strong_000282" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000282">9</strong><span class="text" id="span_000576" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000576">. Use indenting to show structure and grouping.</span></p>
          <p xml:space="preserve" id="p_001025"><strong id="strong_000283" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000283">10</strong><span class="text" id="span_000577" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000577">. Add logical flow arrows to the listing by hand. They are very helpful in debugging and changing. They may be incorporated in the right margin of the comments space, and made part of the machine-readable text.</span></p>
          <p xml:space="preserve" id="p_001026"><strong id="strong_000284" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000284">11</strong><span class="text" id="span_000578" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000578">. Use line comments or remark anything that is not obvious. If the techniques above have been used, these will be short and fewer in number than is customary.</span></p>
          <p xml:space="preserve" id="p_001027"><strong id="strong_000285" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000285">12</strong><span class="text" id="span_000579" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000579">. Put multiple statements on one line, or one statement on several lines to match thought-grouping and to show correspondence to other algorithm description.</span></p>
          <p xml:space="preserve" id="p_001028"><strong id="strong_000286" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000286">Why not? </strong><span class="text" id="span_000580" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000580">What are the drawbacks of such an approach to documentation? There are several, which have been real but are becoming imaginary with changing times.</span></p>
          <pagenum page="normal" id="p175" smilref="The_Mythical_Man_Month_Essay00004.smil#p175">175</pagenum>
          <p xml:space="preserve" id="p_001029" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001029">The most serious objection is the increase in the size of the source code that must be stored. As the discipline moves more and more toward on-line storage of source code, this has become a growing consideration. I find myself being briefer in comments to an APL program, which will live on a disk, than on a PL/I one that I will store as cards.</p>
          <p xml:space="preserve" id="p_001030"><span class="text" id="span_000581" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000581">Yet simultaneously we are moving also toward on-line storage of prose documents for access and for updating via computerized text-editing. As shown above, amalgamating prose and program </span><em id="em_000295" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000295">reduces </em><span class="text" id="span_000582" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000582">the total number of characters to be stored.</span></p>
          <p xml:space="preserve" id="p_001031" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001031">A similar answer applies to the argument that self-documenting programs require more keystrokes. A typed document requires at least one keystroke per character per draft. A self-documenting program has fewer total characters and also fewer strokes per character, since drafts aren't retyped.</p>
          <p xml:space="preserve" id="p_001032" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001032">How about flow charts and structure graphs? If one uses only a highest-level structure graph, it might safely be kept as a separate document, for it is not subject to frequent change. But it can certainly be incorporated into the source program as a comment, and that seems wise.</p>
          <p xml:space="preserve" id="p_001033" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001033">To what extent are the techniques used above applicable to assembly language programs? I think the basic approach of self-documentation is thoroughly applicable. Space and formats are less free, and thus cannot be so flexibly used. Names and structural declarations can surely be exploited. Macros can help a great deal. The extensive use of paragraph comments is good practice in any language.</p>
          <p xml:space="preserve" id="p_001034" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001034">But the self-documentation approach is stimulated by the use of high-level languages and finds its greatest power and its greatest justification in high-level languages used with on-line systems, whether batch or interactive. As I have argued, such languages and systems help programmers in very powerful ways. Since machines are made for people, not people for machines, their use makes every form of sense, economic and human.</p>
          <pagenum page="normal" id="p176" smilref="The_Mythical_Man_Month_Essay00004.smil#p176">176</pagenum>
          <p xml:space="preserve" id="p_001035" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001035">[Blank Page]</p>
          <pagenum page="normal" id="p177" smilref="The_Mythical_Man_Month_Essay00004.smil#p177">177</pagenum>
          <p xml:space="preserve" id="p_001036" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001036">No Silver Bullet-Essence and Accident in Software Engineering</p>
          <pagenum page="normal" id="p178" smilref="The_Mythical_Man_Month_Essay00004.smil#p178">178</pagenum>
          <p xml:space="preserve" id="p_001037" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001037">[Image: The animal.]</p>
          <pagenum page="normal" id="p179" smilref="The_Mythical_Man_Month_Essay00004.smil#p179">179</pagenum>
        </level2>
        <level2 id="level2_000019">
          <h2 xml:space="preserve" id="h2_000019"><strong id="strong_000287"><em id="em_000296" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000296">No Silver Bullet-Essence and Accident in Software Engineering</em></strong></h2>
          <p xml:space="preserve" id="p_001038"><em id="em_000297" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000297">There is no single development, in either technology or management technique, which by itself promises even one order-of-magnitnde improvement within a decade in productivity, in reliability, in simplicity.</em></p>
          <p xml:space="preserve" id="p_001039" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001039">The Werewolf of Eschenbach, Germany: line engraving, 1685.</p>
          <p xml:space="preserve" id="p_001040" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001040">Courtesy of The Grainger Collection, New York.</p>
          <p xml:space="preserve" id="p_001041"><strong id="strong_000288" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000288">179</strong></p>
          <pagenum page="normal" id="p180" smilref="The_Mythical_Man_Month_Essay00004.smil#p180">180</pagenum>
          <p xml:space="preserve" id="p_001042"><strong id="strong_000289" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000289">Abstract</strong><sup id="sup_000077" smilref="The_Mythical_Man_Month_Essay00004.smil#sup_000077">1</sup></p>
          <p xml:space="preserve" id="p_001043" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001043">All software construction involves essential tasks, the fashioning of the complex conceptual structures that compose the abstract software entity, and accidental tasks, the representation of these abstract entities in programming languages and the mapping of these onto machine languages within space and speed constraints. Most of the big past gains in software productivity have come from removing artificial barriers that have made the accidental tasks inordinately hard, such as severe hardware constraints, awkward programming languages, lack of machine time. How much of what software engineers now do is still devoted to the accidental, as opposed to the essential? Unless it is more than 9/10 of all effort, shrinking all the accidental activities to zero time will not give an order of magnitude improvement. Therefore it appears that the time has come to address the essential parts of the software task, those concerned with fashioning abstract conceptual structures of great complexity. I suggest:</p>
          <p xml:space="preserve" id="p_001044" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001044">* Exploiting the mass market to avoid constructing what can be bought.</p>
          <p xml:space="preserve" id="p_001045" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001045">* Using rapid prototyping as part of a planned iteration in establishing software requirements.</p>
          <p xml:space="preserve" id="p_001046" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001046">* Growing software organically, adding more and more function to systems as they are run, used, and tested.</p>
          <p xml:space="preserve" id="p_001047" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001047">* Identifying and developing the great conceptual designers of the rising generation.</p>
          <p xml:space="preserve" id="p_001048"><strong id="strong_000290" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000290">Introduction</strong></p>
          <p xml:space="preserve" id="p_001049" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001049">Of all the monsters who fill the nightmares of our folklore, none terrify more than werewolves, because they transform unexpectedly from the familiar into horrors. For these, we seek bullets of silver that can magically lay them to rest.</p>
          <p xml:space="preserve" id="p_001050" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001050">The familiar software project has something of this character (at least as seen by the nontechnical manager), usually innocent</p>
          <pagenum page="normal" id="p181" smilref="The_Mythical_Man_Month_Essay00004.smil#p181">181</pagenum>
          <p xml:space="preserve" id="p_001051" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001051">and straightforward, but capable of becoming a monster of missed schedules, blown budgets, and flawed products. So we hear desperate cries for a silver bullet, something to make software costs drop as rapidly as computer hardware costs do.</p>
          <p xml:space="preserve" id="p_001052" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001052">But, as we look to the horizon of a decade hence, we see no silver bullet. There is no single development, in either technology or management technique, which by itself promises even one order of magnitude improvement in productivity, in reliability, in simplicity. In this chapter we shall try to see why, by examining both the nature of the software problem and the properties of the bullets proposed.</p>
          <p xml:space="preserve" id="p_001053" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001053">Skepticism is not pessimism, however. Although we see no startling breakthroughs, and indeed, believe such to be inconsistent with the nature of software, many encouraging innovations are under way. A disciplined, consistent effort to develop, propagate, and exploit them should indeed yield an order-of-magnitude improvement. There is no royal road, but there is a road.</p>
          <p xml:space="preserve" id="p_001054" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001054">The first step toward the management of disease was replacement of demon theories and humours theories by the germ theory. That very step, the beginning of hope, in itself dashed all hopes of magical solutions. It told workers that progress would be made stepwise, at great effort, and that a persistent, unremitting care would have to be paid to a discipline of cleanliness. So it is with software engineering today.</p>
          <p xml:space="preserve" id="p_001055"><strong id="strong_000291" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000291">Does It Have to Be Hard?--Essential Difficulties</strong></p>
          <p xml:space="preserve" id="p_001056" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001056">Not only are there no silver bullets now in view, the very nature of software makes it unlikely that there will be any--no inventions that will do for software productivity, reliability, and simplicity what electronics, transistors, and large-scale integration did for computer hardware. We cannot expect ever to see twofold gains every two years.</p>
          <p xml:space="preserve" id="p_001057" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001057">First, we must observe that the anomaly is not that software progress is so slow but that computer hardware progress is so</p>
          <pagenum page="normal" id="p182" smilref="The_Mythical_Man_Month_Essay00004.smil#p182">182</pagenum>
          <p xml:space="preserve" id="p_001058"><span class="text" id="span_000583" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000583">fast. No other technology since civilization began has seen six orders of magnitude price-performance gain in 30 years. In no other technology can one choose to take the gain in </span><em id="em_000298" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000298">either </em><span class="text" id="span_000584" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000584">improved performance </span><em id="em_000299" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000299">or </em><span class="text" id="span_000585" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000585">in reduced costs. These gains flow from the transformation of computer manufacture from an assembly industry into a process industry.</span></p>
          <p xml:space="preserve" id="p_001059"><span class="text" id="span_000586" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000586">Second, to see what rate of progress we can expect in software technology, let us examine its difficulties. Following Aristotle, I divide them into </span><em id="em_000300" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000300">essence</em><span class="text" id="span_000587" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000587">--the difficulties inherent in the nature of the software--and </span><em id="em_000301" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000301">accidents</em><span class="text" id="span_000588" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000588">--those difficulties that today attend its production but that are not inherent.</span></p>
          <p xml:space="preserve" id="p_001060" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001060">The accidents I discuss in the next section. First let us consider the essence.</p>
          <p xml:space="preserve" id="p_001061" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001061">The essence of a software entity is a construct of interlocking concepts: data sets, relationships among data items, algorithms, and invocations of functions. This essence is abstract, in that the conceptual construct is the same under many different representations. It is nonetheless highly precise and richly detailed.</p>
          <p xml:space="preserve" id="p_001062"><em id="em_000302" smilref="The_Mythical_Man_Month_Essay00004.smil#em_000302">I believe the hard part of building software to be the specification, design, and testing of this conceptual construct, not the labor of representing it and testing the fidelity of the representation. </em><span class="text" id="span_000589" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000589">We still make syntax errors, to be sure; but they are fuzz compared to the conceptual errors in most systems.</span></p>
          <p xml:space="preserve" id="p_001063" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001063">If this is true, building software will always be hard. There is inherently no silver bullet.</p>
          <p xml:space="preserve" id="p_001064" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001064">Let us consider the inherent properties of this irreducible essence of modern software systems: complexity, conformity, changeability, and invisibility.</p>
          <p xml:space="preserve" id="p_001065"><strong id="strong_000292" smilref="The_Mythical_Man_Month_Essay00004.smil#strong_000292">Complexity.</strong><span class="text" id="span_000590" smilref="The_Mythical_Man_Month_Essay00004.smil#span_000590"> Software entities are more complex for their size than perhaps any other human construct, because no two parts are alike (at least above the statement level). If they are, we make the two similar parts into one, a subroutine, open or closed. In this respect software systems differ profoundly from computers, buildings, or automobiles, where repeated elements abound.</span></p>
          <pagenum page="normal" id="p183" smilref="The_Mythical_Man_Month_Essay00004.smil#p183">183</pagenum>
          <p xml:space="preserve" id="p_001066" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001066">Digital computers are themselves more complex than most things people build; they have very large numbers of states. This makes conceiving, describing, and testing them hard. Software systems have orders of magnitude more states than computers do.</p>
          <p xml:space="preserve" id="p_001067" smilref="The_Mythical_Man_Month_Essay00004.smil#p_001067">Likewise, a scaling-up of a software entity is not merely a repetition of the same elements in larger size; it is necessarily an increase in the number of different elements. In most cases, the elements interact with each other in some nonlinear fashion, and the complexity of the whole increases much more than linearly.</p>
          <p xml:space="preserve" id="p_001068" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001068">The complexity of software is an essential property, not an accidental one. Hence descriptions of a software entity that abstract away its complexity often abstract away its essence. Mathematics and the physical sciences made great strides for three centuries by constructing simplified models of complex phenomena, deriving properties from the models, and verifying those properties experimentally. This worked because the complexities ignored in the models were not the essential properties of the phenomena. It does not work when the complexities are the essence.</p>
          <p xml:space="preserve" id="p_001069" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001069">Many of the classical problems of developing software products derive from this essential complexity and its nonlinear increases with size. From the complexity comes the difficulty of communication among team members, which leads to product flaws, cost overruns, schedule delays. From the complexity comes the difficulty of enumerating, much less understanding, all the possible states of the program, and from that comes the unreliability. From the complexity of the functions comes the difficulty of invoking those functions, which makes programs hard to use. From complexity of structure comes the difficulty of extending programs to new functions without creating side effects. From complexity of structure comes the unvisualized states that constitute security trapdoors.</p>
          <p xml:space="preserve" id="p_001070" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001070">Not only technical problems but management problems as well come from the complexity. This complexity makes overview</p>
          <pagenum page="normal" id="p184" smilref="The_Mythical_Man_Month_Essay00005.smil#p184">184</pagenum>
          <p xml:space="preserve" id="p_001071" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001071">hard, thus impeding conceptual integrity. It makes it hard to find and control all the loose ends. It creates the tremendous learning and understanding burden that makes personnel turnover a disaster.</p>
          <p xml:space="preserve" id="p_001072"><strong id="strong_000293" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000293">Conformity. </strong><span class="text" id="span_000591" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000591">Software people are not alone in facing complexity. Physics deals with terribly complex objects even at the "fundamental" particle level. The physicist labors on, however, in a firm faith that there are unifying principles to be found, whether in quarks or in unified field theories. Einstein repeatedly argued that there must be simplified explanations of nature, because God is not capricious or arbitrary.</span></p>
          <p xml:space="preserve" id="p_001073" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001073">No such faith comforts the software engineer. Much of the complexity he must master is arbitrary complexity, forced without rhyme or reason by the many human institutions and systems to which his interfaces must conform. These differ from interface to interface, and from time to time, not because of necessity but only because they were designed by different people, rather than by God.</p>
          <p xml:space="preserve" id="p_001074" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001074">In many cases the software must conform because it has most recently come to the scene. In others it must conform because it is perceived as the most conformable. But in all cases, much complexity comes from conformation to other interfaces; this cannot be simplified out by any redesign of the software alone.</p>
          <p xml:space="preserve" id="p_001075"><strong id="strong_000294" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000294">Changeability. </strong><span class="text" id="span_000592" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000592">The software entity is constantly subject to pressures for change. Of course, so are buildings, cars, computers. But manufactured things are infrequently changed after manufacture; they are superseded by later models, or essential changes are incorporated in later serial-number copies of the same basic design. Call-backs of automobiles are really quite infrequent; field changes of computers somewhat less so. Both are much less frequent than modifications to fielded software.</span></p>
          <p xml:space="preserve" id="p_001076" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001076">Partly this is because the software in a system embodies its function, and the function is the part that most feels the pressures of change. Partly it is because software can be changed</p>
          <pagenum page="normal" id="p185" smilref="The_Mythical_Man_Month_Essay00005.smil#p185">185</pagenum>
          <p xml:space="preserve" id="p_001077" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001077">more easily--it is pure thought-stuff, infinitely malleable. Buildings do in fact get changed, but the high costs of change, understood by all, serve to dampen the whims of the changers.</p>
          <p xml:space="preserve" id="p_001078" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001078">All successful software gets changed. Two processes are at work. As a software product is found to be useful, people try it in new cases at the edge of, or beyond, the original domain. The pressures for extended function come chiefly from users who like the basic function and invent new uses for it.</p>
          <p xml:space="preserve" id="p_001079" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001079">Second, successful software also survives beyond the normal life of the machine vehicle for which it is first written. If not new computers, then at least new disks, new displays, new printers come along; and the software must be conformed to its new vehicles of opportunity.</p>
          <p xml:space="preserve" id="p_001080" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001080">In short, the software product is embedded in a cultural matrix of applications, users, laws, and machine vehicles. These all change continually, and their changes inexorably force change upon the software product.</p>
          <p xml:space="preserve" id="p_001081"><strong id="strong_000295" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000295">Invisibility. </strong><span class="text" id="span_000593" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000593">Software is invisible and unvisualizable. Geometric abstractions are powerful tools. The floor plan of a building helps both architect and client evaluate spaces, traffic flows, views. Contradictions become obvious, omissions can be caught. Scale drawings of mechanical parts and stick-figure models of molecules, although abstractions, serve the same purpose. A geometric reality is captured in a geometric abstraction.</span></p>
          <p xml:space="preserve" id="p_001082" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001082">The reality of software is not inherently embedded in space. Hence it has no ready geometric representation in the way that land has maps, silicon chips have diagrams, computers have connectivity schematics. As soon as we attempt to diagram software structure, we find it to constitute not one, but several, general directed graphs, superimposed one upon another. The several graphs may represent the flow of control, the flow of data, patterns of dependency, time sequence, name-space relationships. These are usually not even planar, much less hierarchical. Indeed, one of the ways of establishing conceptual control over such structure is to enforce link cutting until one or</p>
          <pagenum page="normal" id="p186" smilref="The_Mythical_Man_Month_Essay00005.smil#p186">186</pagenum>
          <p xml:space="preserve" id="p_001083"><span class="text" id="span_000594" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000594">more of the graphs becomes hierarchical.</span><sup id="sup_000078" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000078">2</sup></p>
          <p xml:space="preserve" id="p_001084" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001084">In spite of progress in restricting and simplifying the structures of software, they remain inherently unvisualizable, thus depriving the mind of some of its most powerful conceptual tools. This lack not only impedes the process of design within one mind, it severely hinders communication among minds.</p>
          <p xml:space="preserve" id="p_001085"><strong id="strong_000296" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000296">Past Breakthroughs Solved Accidental Difficulties</strong></p>
          <p xml:space="preserve" id="p_001086" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001086">If we examine the three steps in software technology that have been most fruitful in the past, we discover that each attacked a different major difficulty in building software, but they have been the accidental, not the essential, difficulties. We can also see the natural limits to the extrapolation of each such attack.</p>
          <p xml:space="preserve" id="p_001087"><strong id="strong_000297" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000297">High-level languages.</strong><span class="text" id="span_000595" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000595"> Surely the most powerful stroke for software productivity, reliability, and simplicity has been the progressive use of high-level languages for programming. Most observers credit that development with at least a factor of five in productivity, and with concomitant gains in reliability, simplicity, and comprehensibility.</span></p>
          <p xml:space="preserve" id="p_001088" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001088">What does a high-level language accomplish? It frees a program from much of its accidental complexity. An abstract program consists of conceptual constructs: operations, datatypes, sequences, and communication. The concrete machine program is concerned with bits, registers, conditions, branches, channels, disks, and such. To the extent that the high-level language embodies the constructs wanted in the abstract program and avoids all lower ones, it eliminates a whole level of complexity that was never inherent in the program at all.</p>
          <p xml:space="preserve" id="p_001089" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001089">The most a high-level language can do is to furnish all the constructs the programmer imagines in the abstract program. To be sure, the level of our sophistication in thinking about data structures, data types, and operations is steadily rising, but at an ever-decreasing rate. And language development approaches closer and closer to the sophistication of users.</p>
          <p xml:space="preserve" id="p_001090" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001090">Moreover, at some point the elaboration of a high-level Ianguage</p>
          <pagenum page="normal" id="p187" smilref="The_Mythical_Man_Month_Essay00005.smil#p187">187</pagenum>
          <p xml:space="preserve" id="p_001091" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001091">becomes a burden that increases, not reduces, the intellectual task of the user who rarely uses the esoteric constructs.</p>
          <p xml:space="preserve" id="p_001092"><strong id="strong_000298" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000298">Time-sharing</strong><span class="text" id="span_000596" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000596">. Most observers credit time-sharing with a major improvement in the productivity of programmers and in the quality of their product, although not so large as that brought by high-level languages.</span></p>
          <p xml:space="preserve" id="p_001093" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001093">Time-sharing attacks a distinctly different difficulty. Timesharing preserves immediacy, and hence enables us to maintain an overview of complexity. The slow turnaround of batch programming means that we inevitably forget the minutiae, if not the very thrust, of what we were thinking when we stopped programming and called for compilation and execution. This interruption of consciousness is costly in time, for we must refresh. The most serious effect may well be the decay of grasp of all that is going on in a complex system.</p>
          <p xml:space="preserve" id="p_001094" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001094">Slow turn-around, like machine-language complexities, is an accidental rather than an essential difficulty of the software process. The limits of the contribution of time-sharing derive directly. The principal effect is to shorten system response time. As it goes to zero, at some point it passes the human threshold of noticeability, about 100 milliseconds. Beyond that no benefits are to be expected.</p>
          <p xml:space="preserve" id="p_001095"><strong id="strong_000299" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000299">Unified programming environments. </strong><span class="text" id="span_000597" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000597">Unix and Interlisp, the first integrated programming environments to come into widespread use, are perceived to have improved productivity by integral factors. Why?</span></p>
          <p xml:space="preserve" id="p_001096"><span class="text" id="span_000598" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000598">They attack the accidental difficulties of using programs </span><em id="em_000303" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000303">together, </em><span class="text" id="span_000599" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000599">by providing integrated libraries, unified file formats, and pipes and filters. As a result, conceptual structures that in principle could always call, feed, and use one another can indeed easily do so in practice.</span></p>
          <p xml:space="preserve" id="p_001097" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001097">This breakthrough in turn stimulated the development of whole toolbenches, since each new tool could be applied to any programs using the standard formats.</p>
          <p xml:space="preserve" id="p_001098" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001098">Because of these successes, environments are the subject of</p>
          <pagenum page="normal" id="p188" smilref="The_Mythical_Man_Month_Essay00005.smil#p188">188</pagenum>
          <p xml:space="preserve" id="p_001099" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001099">much of today's software engineering research. We will look at their promise and limitations in the next section.</p>
          <p xml:space="preserve" id="p_001100"><strong id="strong_000300" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000300">Hopes for the Silver</strong></p>
          <p xml:space="preserve" id="p_001101" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001101">Now let us consider the technical developments that are most often advanced as potential silver bullets. What problems do they address? Are they the problems of essence, or are they remainders of our accidental difficulties? Do they offer revolutionary advances, or incremental ones?</p>
          <p xml:space="preserve" id="p_001102"><strong id="strong_000301" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000301">Ada and other high-level language advances. </strong><span class="text" id="span_000600" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000600">One of the most touted recent developments is the programming language Ada, a general-purpose, high-level language of the 1980s. Ada indeed not only reflects evolutionary improvements in language concepts but embodies features to encourage modern design and modularization concepts. Perhaps the Ada philosophy is more of an advance than the Ada language, for it is the philosophy of modularization, of abstract data types, of hierarchical structuring. Ada is perhaps over-rich, the natural product of the process by which requirements were laid on its design. That is not fatal, for subset working vocabularies can solve the learning problem, and hardware advances will give us the cheap MIPS to pay for the compiling costs. Advancing the structuring of software systems is indeed a very good use for the increased MIPS our dollars will buy. Operating systems, loudly decried in the 1960s for their memory and cycle costs, have proved to be an excellent form in which to use some of the MIPS and cheap memory bytes of the past hardware surge.</span></p>
          <p xml:space="preserve" id="p_001103" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001103">Nevertheless, Ada will not prove to be the silver bullet that slays the software productivity monster. It is, after all, just another high-level language, and the biggest payoff from such languages came from the first transition, up from the accidental complexities of the machine into the more abstract statement of step-by-step solutions. Once those accidents have been removed, the remaining ones are smaller, and the payoff from their removal will surely be less.</p>
          <pagenum page="normal" id="p189" smilref="The_Mythical_Man_Month_Essay00005.smil#p189">189</pagenum>
          <p xml:space="preserve" id="p_001104" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001104">I predict that a decade from now, when the effectiveness of Ada is assessed, it will be seen to have made a substantial difference, but not because of any particular language feature, nor indeed because of all of them combined. Neither will the new Ada environments prove to be the cause of the improvements. Ada's greatest contribution will be that switching to it occasioned training programmers in modern software design techniques.</p>
          <p xml:space="preserve" id="p_001105"><strong id="strong_000302" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000302">Object-oriented programming. </strong><span class="text" id="span_000601" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000601">Many students of the art hold out more hope for object-oriented programming than for any of the other technical fads of the day.</span><sup id="sup_000079" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000079">3</sup><span class="text" id="span_000602" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000602"> I am among them. Mark Sherman of Dartmouth notes that we must be careful to distinguish two separate ideas that go under that name: abstract data types and hierarchical types, also called </span><em id="em_000304" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000304">classes. </em><span class="text" id="span_000603" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000603">The concept of the abstract data type is that an object's type should be defined by a name, a set of proper values, and a set of proper operations, rather than its storage structure, which should be hidden. Examples are Ada packages (with private types) or Modula's modules.</span></p>
          <p xml:space="preserve" id="p_001106" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001106">Hierarchical types, such as Simula-67's classes, allow the definition of general interfaces that can be further refined by providing subordinate types. The two concepts are orthogonal--there may be hierarchies without hiding and hiding without hierarchies. Both concepts represent real advances in the art of building software.</p>
          <p xml:space="preserve" id="p_001107" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001107">Each removes one more accidental difficulty from the process, allowing the designer to express the essence of his design without having to express large amounts of syntactic material that add no new information content. For both abstract types and hierarchical types, the result is to remove a higher-order sort of accidental difficulty and allow a higher-order expression of design.</p>
          <p xml:space="preserve" id="p_001108" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001108">Nevertheless, such advances can do no more than to remove all the accidental difficulties from the expression of the design. The complexity of the design itself is essential; and such</p>
          <pagenum page="normal" id="p190" smilref="The_Mythical_Man_Month_Essay00005.smil#p190">190</pagenum>
          <p xml:space="preserve" id="p_001109" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001109">attacks make no change whatever in that. An order-of-magnitude gain can be made by object-oriented programming only if the unnecessary underbrush of type specification remaining today in our programming language is itself responsible for nine-tenths of the work involved in designing a program product. I doubt it.</p>
          <p xml:space="preserve" id="p_001110"><strong id="strong_000303" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000303">Artificial intelligence. </strong><span class="text" id="span_000604" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000604">Many people expect advances in artificial intelligence to provide the revolutionary breakthrough that will give order-of-magnitude gains in software productivity and quality.</span><sup id="sup_000080" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000080">4</sup><span class="text" id="span_000605" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000605">I do not. To see why, we must dissect what is meant by "artificial intelligence" and then see how it applies.</span></p>
          <p xml:space="preserve" id="p_001111" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001111">Parnas has clarified the terminological chaos:</p>
          <p xml:space="preserve" id="p_001112"><em id="em_000305" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000305">Two quite different definitions of AI are in common use today. AI-1: The use of computers to solve problems that previously could only be solved by applying human intelligence. AI2. The use of a specific set of programming techniques known as heuristic or rule-based programming. In this approach human experts are studied to determine what heuristics or rules of thumb they use in solving problems.... The program is designed to solve a problem the way that humans seem to solve it.</em></p>
          <p xml:space="preserve" id="p_001113"><em id="em_000306" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000306">The first definition has a sliding meaning.... Something can fit the definition of AI-1 today but, once loe see how the program works and understand the problem, we will not think of it as AI anymore.... Unfortunately I cannot identify a body of technology that is unique to this field.... Most of the work is problem-specific, and some abstraction or creativity is required to see how to transfer it.</em><sup id="sup_000081" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000081">5</sup></p>
          <p xml:space="preserve" id="p_001114" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001114">I agree completely with this critique. The techniques used for speech recognition seem to have little in common with those used for image recognition, and both are different from those used in expert systems. I have a hard time seeing how image recognition, for example, will make any appreciable difference in programming practice. The same is true of speech recognition.</p>
          <pagenum page="normal" id="p191" smilref="The_Mythical_Man_Month_Essay00005.smil#p191">191</pagenum>
          <p xml:space="preserve" id="p_001115" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001115">The hard thing about building software is deciding what to say, not saying it. No facilitation of expression can give more than marginal gains.</p>
          <p xml:space="preserve" id="p_001116" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001116">Expert systems technology, AI-2, deserves a section of its own.</p>
          <p xml:space="preserve" id="p_001117"><strong id="strong_000304" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000304">Expert systems. </strong><span class="text" id="span_000606" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000606">The most advanced part of the artificial intelligence art, and the most widely applied, is the technology for building expert systems. Many software scientists are hard at work applying this technology to the software-building environment.</span><sup id="sup_000082" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000082">5</sup><span class="text" id="span_000607" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000607"> What is the concept, and what are the prospects?</span></p>
          <p xml:space="preserve" id="p_001118" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001118">An expert system is a program containing a generalized inference engine and a rule base, designed to take input data and assumptions and explore the logical consequences through the inferences derivable from the rule base, yielding conclusions and advice, and offering to explain its results by retracing its reasoning for the user. The inference engines typically can deal with fuzzy or probabilistic data and rules in addition to purely deterministic logic.</p>
          <p xml:space="preserve" id="p_001119" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001119">Such systems offer some clear advantages over programmed algorithms for arriving at the same solutions to the same problems:</p>
          <p xml:space="preserve" id="p_001120" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001120">* Inference engine technology is developed in an application-independent way, and then applied to many uses. One can justify much more effort on the inference engines. Indeed, that technology is well advanced.</p>
          <p xml:space="preserve" id="p_001121" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001121">* The changeable parts of the application-peculiar materials are encoded in the rule base in a uniform fashion, and tools are provided for developing, changing, testing, and documenting the rule base. This regularizes much of the complexity of the application itself.</p>
          <p xml:space="preserve" id="p_001122" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001122">Edward Feigenbaum says that the power of such systems does not come from ever-fancier inference mechanisms, but rather from ever-richer knowledge bases that reflect the real world more accurately. I believe the most important advance offered by the technology is the separation of the application complexity</p>
          <pagenum page="normal" id="p192" smilref="The_Mythical_Man_Month_Essay00005.smil#p192">192</pagenum>
          <p xml:space="preserve" id="p_001123" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001123">from the program itself.</p>
          <p xml:space="preserve" id="p_001124" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001124">How can this be applied to the software task? In many ways: suggesting interface rules, advising on testing strategies, remembering bug-type frequencies, offering optimization hints, etc.</p>
          <p xml:space="preserve" id="p_001125" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001125">Consider an imaginary testing advisor, for example. In its most rudimentary form, the diagnostic expert system is very like a pilot's checklist, fundamentally offering suggestions as to possible causes of difficulty. As the rule base is developed, the suggestions become more specific, taking more sophisticated account of the trouble symptoms reported. One can visualize a debugging assistant that offers very generalized suggestions at first, but as more and more system structure is embodied in the rule base, becomes more and more particular in the hypotheses it generates and the tests it recommends. Such an expert system may depart most radically from the conventional ones in that its rule base should probably be hierarchically modularized in the same way the corresponding software product is, so that as the product is modularly modified, the diagnostic rule base can be modularly modified as well.</p>
          <p xml:space="preserve" id="p_001126" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001126">The work required to generate the diagnostic rules is work that will have to be done anyway in generating the set of test cases for the modules and for the system. If it is done in a suitably general manner, with a uniform structure for rules and a good inference engine available, it may actually reduce the total labor of generating bring-up test cases, as well as helping in lifelong maintenance and modification testing. In the same way, we can postulate other advisors--probably many of them and probably simple ones--for the other parts of the software construction task.</p>
          <p xml:space="preserve" id="p_001127" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001127">Many difficulties stand in the way of the early realization of useful expert advisors to the program developer. A crucial part of our imaginary scenario is the development of easy ways to get from program structure specification to the automatic or semiautomatic generation of diagnostic rules. Even more difficult and important is the twofold task of knowledge acquisition:</p>
          <pagenum page="normal" id="p193" smilref="The_Mythical_Man_Month_Essay00005.smil#p193">193</pagenum>
          <p xml:space="preserve" id="p_001128"><span class="text" id="span_000608" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000608">finding articulate, self-analytical experts who know </span><em id="em_000307" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000307">why </em><span class="text" id="span_000609" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000609">they do things; and developing efficient techniques for extracting what they know and distilling it into rule bases. The essential prerequisite for building an expert system is to have an expert.</span></p>
          <p xml:space="preserve" id="p_001129" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001129">The most powerful contribution of expert systems will surely be to put at the service of the inexperienced programmer the experience and accumulated wisdom of the best programmers. This is no small contribution. The gap between the best software engineering practice and the average practice is very wide--perhaps wider than in any other engineering discipline. A tool that disseminates good practice would be important.</p>
          <p xml:space="preserve" id="p_001130"><strong id="strong_000305" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000305">"Automatic" programming. </strong><span class="text" id="span_000610" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000610">For almost 40 years, people have been anticipating and writing about "automatic programming," the generation of a program for solving a problem from a statement of the problem specifications. Some people today write as if they expected this technology to provide the next breakthrough.</span><sup id="sup_000083" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000083">7</sup></p>
          <p xml:space="preserve" id="p_001131" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001131">Parnas implies that the term is used for glamour and not semantic content, asserting,</p>
          <p xml:space="preserve" id="p_001132"><em id="em_000308" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000308">In short, automatic programming always has been a euphemism for programming with a higher-level language than was presently available to the programmer.</em><sup id="sup_000084" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000084">8</sup></p>
          <p xml:space="preserve" id="p_001133" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001133">He argues, in essence, that in most cases it is the solution method, not the problem, whose specification has to be given.</p>
          <p xml:space="preserve" id="p_001134" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001134">Exceptions can be found. The technique of building generators is very powerful, and it is routinely used to good advantage in programs for sorting. Some systems for integrating differential equations have also permitted direct specification of the problem. The system assessed the parameters, chose from a library of methods of solution, and generated the programs.</p>
          <p xml:space="preserve" id="p_001135" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001135">These applications have very favorable properties:</p>
          <p xml:space="preserve" id="p_001136" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001136">* The problems are readily characterized by relatively few parameters.</p>
          <p xml:space="preserve" id="p_001137" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001137">* There are many known methods of solution to provide a library of alternatives.</p>
          <pagenum page="normal" id="p194" smilref="The_Mythical_Man_Month_Essay00005.smil#p194">194</pagenum>
          <p xml:space="preserve" id="p_001138" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001138">* Extensive analysis has led to explicit rules for selecting solution techniques, given problem parameters.</p>
          <p xml:space="preserve" id="p_001139" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001139">It is hard to see how such techniques generalize to the wider world of the ordinary software system, where cases with such neat properties are the exception. It is hard even to imagine how this breakthrough in generalization could conceivably occur.</p>
          <p xml:space="preserve" id="p_001140"><strong id="strong_000306" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000306">Graphical programming. </strong><span class="text" id="span_000611" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000611">A favorite subject for Ph.D. dissertations in software engineering is graphical, or visual, programming, the application of computer graphics to software design.</span><sup id="sup_000085" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000085">9 </sup><span class="text" id="span_000612" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000612">Sometimes the promise of such an approach is postulated from the analogy with VLSI chip design, where computer graphics plays so fruitful a role. Sometimes the approach is justified by considering flowcharts as the ideal program design medium, and providing powerful facilities for constructing them.</span></p>
          <p xml:space="preserve" id="p_001141" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001141">Nothing even convincing, much less exciting, has yet emerged from such efforts. I am persuaded that nothing will.</p>
          <p xml:space="preserve" id="p_001142"><span class="text" id="span_000613" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000613">In the first place, as I have argued elsewhere, the flow chart is a very poor abstraction of software structure.</span><sup id="sup_000086" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000086">10</sup><span class="text" id="span_000614" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000614"> Indeed, it is best viewed as Burks, von Neumann, and Goldstine's attempt to provide a desperately needed high-level control language for their proposed computer. In the pitiful, multipage, connection-boxed form to which the flow chart has today been elaborated, it has proved to be essentially useless as a design tool--programmers draw flow charts after, not before, writing the programs they describe.</span></p>
          <p xml:space="preserve" id="p_001143" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001143">Second, the screens of today are too small, in pixels, to show both the scope and the resolution of any serious detailed software diagram. The so-called "desktop metaphor" of today's workstation is instead an "airplane-seat" metaphor. Anyone who has shuffled a lapful of papers while seated in coach between two portly passengers will recognize the difference-- one can see only a very few things at once. The true desktop provides overview of and random access to a score of pages. Moreover, when fits of creativity run strong, more than one programmer or writer has been known to abandon the desktop for</p>
          <pagenum page="normal" id="p195" smilref="The_Mythical_Man_Month_Essay00005.smil#p195">195</pagenum>
          <p xml:space="preserve" id="p_001144" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001144">the more spacious floor. The hardware technology will have to advance quite substantially before the scope of our scopes is sufficient to the software design task.</p>
          <p xml:space="preserve" id="p_001145" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001145">More fundamentally, as I have argued above, software is very difficult to visualize. Whether we diagram control flow, variable scope nesting, variable cross-references, data flow, hierarchical data structures, or whatever, we feel only one dimension of the intricately interlocked software elephant. If we superimpose all the diagrams generated by the many relevant views, it is difficult to extract any global overview. The VLSI analogy is fundamentally misleading--a chip design is a layered two-dimensional object whose geometry reflects its essence. A software system is not.</p>
          <p xml:space="preserve" id="p_001146"><strong id="strong_000307" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000307">Program verification. </strong><span class="text" id="span_000615" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000615">Much of the effort in modern programming goes into the testing and repair of bugs. Is there perhaps a silver bullet to be found by eliminating the errors at the source, in the system design phase? Can both productivity and product reliability be radically enhanced by following the profoundly different strategy of proving designs correct before the immense effort is poured into implementing and testing them?</span></p>
          <p xml:space="preserve" id="p_001147" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001147">I do not believe we will find the magic here. Program verification is a very powerful concept, and it will be very important for such things as secure operating system kernels. The technology does not promise, however, to save labor. Verifications are so much work that only a few substantial programs have ever been verified.</p>
          <p xml:space="preserve" id="p_001148" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001148">Program verification does not mean error-proof programs. There is no magic here, either. Mathematical proofs also can be faulty. So whereas verification might reduce the program-testing load, it cannot eliminate it.</p>
          <p xml:space="preserve" id="p_001149" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001149">More seriously, even perfect program verification can only establish that a program meets its specification. The hardest part of the software task is arriving at a complete and consistent specification, and much of the essence of building a program is in fact the debugging of the specification.</p>
          <pagenum page="normal" id="p196" smilref="The_Mythical_Man_Month_Essay00005.smil#p196">196</pagenum>
          <p xml:space="preserve" id="p_001150"><strong id="strong_000308" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000308">Environments and tools. </strong><span class="text" id="span_000616" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000616">How much more gain can be expected from the exploding researches into better programming environments? One's instinctive reaction is that the big-payoff problems were the first attacked, and have been solved: hierarchical file systems, uniform file formats so as to have uniform program interfaces, and generalized tools. Language-specific smart editors are developments not yet widely used in practice, but the most they promise is freedom from syntactic errors and simple semantic errors.</span></p>
          <p xml:space="preserve" id="p_001151" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001151">Perhaps the biggest gain yet to be realized in the programming environment is the use of integrated database systems to keep track of the myriads of details that must be recalled accurately by the individual programmer and kept current in a group of collaborators on a single system.</p>
          <p xml:space="preserve" id="p_001152" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001152">Surely this work is worthwhile, and surely it will bear some fruit in both productivity and reliability. But by its very nature, the return from now on must be marginal.</p>
          <p xml:space="preserve" id="p_001153"><strong id="strong_000309" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000309">Workstations. </strong><span class="text" id="span_000617" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000617">What gains are to be expected for the software art from the certain and rapid increase in the power and memory capacity of the individual workstation? Well, how many MIPS can one use fruitfully? The composition and editing of programs and documents is fully supported by today's speeds. Compiling could stand a boost, but a factor of 10 in machine speed would surely leave think-time the dominant activity in the programmer's day. Indeed, it appears to be so now.</span></p>
          <p xml:space="preserve" id="p_001154" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001154">More powerful workstations we surely welcome. Magical enhancements from them we cannot expect.</p>
          <p xml:space="preserve" id="p_001155"><strong id="strong_000310" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000310">Promising Attacks on the Conceptual Essence</strong></p>
          <p xml:space="preserve" id="p_001156" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001156">Even though no technological breakthrough promises to give the sort of magical results with which we are so familiar in the hardware area, there is both an abundance of good work going on now, and the promise of steady, if unspectacular progress. All of the technological attacks on the accidents of the soft-</p>
          <pagenum page="normal" id="p197" smilref="The_Mythical_Man_Month_Essay00005.smil#p197">197</pagenum>
          <p xml:space="preserve" id="p_001157" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001157">ware process are fundamentally limited by the productivity equation:</p>
          <p xml:space="preserve" id="p_001158"><em id="em_000309" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000309">Time of task = </em><span class="text" id="span_000618" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000618">Σ</span><sub id="sub_000001" smilref="The_Mythical_Man_Month_Essay00005.smil#sub_000001">i</sub> <em id="em_000310" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000310">(Frequency)</em><sub id="sub_000002" smilref="The_Mythical_Man_Month_Essay00005.smil#sub_000002">i</sub><em id="em_000311" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000311"> × (Time)</em><sub id="sub_000003" smilref="The_Mythical_Man_Month_Essay00005.smil#sub_000003">i</sub></p>
          <p xml:space="preserve" id="p_001159" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001159">If, as I believe, the conceptual components of the task are now taking most of the time, then no amount of activity on the task components that are merely the expression of the concepts can give large productivity gains.</p>
          <p xml:space="preserve" id="p_001160" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001160">Hence we must consider those attacks that address the essence of the software problem, the formulation of these complex conceptual structures. Fortunately, some of these are very promising.</p>
          <p xml:space="preserve" id="p_001161"><strong id="strong_000311" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000311">Buy versus build. </strong><span class="text" id="span_000619" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000619">The most radical possible solution for constructing software is not to construct it at all.</span></p>
          <p xml:space="preserve" id="p_001162" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001162">Every day this becomes easier, as more and more vendors offer more and better software products for a dizzying variety of applications. While we software engineers have labored on production methodology, the personal computer revolution has created not one, but many, mass markets for software. Every newsstand carries monthly magazines which, sorted by machine type, advertise and review dozens of products at prices from a few dollars to a few hundred dollars. More specialized sources offer very powerful products for the workstation and other Unix markets. Even software tools and environments can be bought off-the-shelf. I have elsewhere proposed a marketplace for individual modules.</p>
          <p xml:space="preserve" id="p_001163" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001163">Any such product is cheaper to buy than to build afresh. Even at a cost of $100,000, a purchased piece of software is costing only about as much as one programmer-year. And delivery is immediate! Immediate at least for products that really exist, products whose developer can refer the prospect to a happy user. Moreover, such products tend to be much better documented and somewhat better maintained than homegrown software.</p>
          <p xml:space="preserve" id="p_001164" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001164">The development of the mass market is, I believe, the most profound long-run trend in software engineering. The cost of</p>
          <pagenum page="normal" id="p198" smilref="The_Mythical_Man_Month_Essay00005.smil#p198">198</pagenum>
          <p xml:space="preserve" id="p_001165"><span class="text" id="span_000620" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000620">software has always been development cost, not replication cost. Sharing that cost among even a few users radically cuts the per-user cost. Another way of looking at it is that the use of </span><em id="em_000312" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000312">n </em><span class="text" id="span_000621" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000621">copies of a software system effectively multiplies the productivity of its developers by </span><em id="em_000313" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000313">n. </em><span class="text" id="span_000622" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000622">That is an enhancement of the productivity of the discipline and of the nation.</span></p>
          <p xml:space="preserve" id="p_001166" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001166">The key issue, of course, is applicability. Can I use an available off-the-shelf package to do my task? A surprising thing has happened here. During the 1950s and 1960s, study after study showed that users would not use off-the-shelf packages for payroll, inventory control, accounts receivable, etc. The requirements were too specialized, the case-to-case variation too high. During the 1980s, we find such packages in high demand and widespread use. What has changed?</p>
          <p xml:space="preserve" id="p_001167" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001167">Not really the packages. They may be somewhat more generalized and somewhat more customizable than formerly, but not much. Not really the applications, either. If anything, the business and scientific needs of today are more diverse, more complicated than those of 20 years ago.</p>
          <p xml:space="preserve" id="p_001168" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001168">The big change has been in the hardware/software cost ratio. The buyer of a $2-million machine in 1960 felt that he could afford $250,000 more for a customized payroll program, one that slipped easily and nondisruptively into the computer-hostile social environment. Buyers of $50,000 office machines today cannot conceivably afford customized payroll programs; so they adapt their payroll procedures to the packages available. Computers are now so commonplace, if not yet so beloved, that the adaptations are accepted as a matter of course.</p>
          <p xml:space="preserve" id="p_001169" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001169">There are dramatic exceptions to my argument that the generalization of the software packages has changed little over the years: electronic spreadsheets and simple database systems. These powerful tools, so obvious in retrospect and yet so late appearing, lend themselves to myriad uses, some quite unorthodox. Articles and even books now abound on how to tackle unexpected tasks with the spreadsheet. Large numbers of applications that would formerly have been written as custom pro-</p>
          <pagenum page="normal" id="p199" smilref="The_Mythical_Man_Month_Essay00005.smil#p199">199</pagenum>
          <p xml:space="preserve" id="p_001170" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001170">grams in Cobol or Report Program Generator are now routinely done with these tools.</p>
          <p xml:space="preserve" id="p_001171" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001171">Many users now operate their own computers day in and day out on varied applications without ever writing a program. Indeed, many of these users cannot write new programs for their machines, but they are nevertheless adept at solving new problems with them.</p>
          <p xml:space="preserve" id="p_001172" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001172">I believe the single most powerful software productivity strategy for many organizations today is to equip the computer-naive intellectual workers on the firing line with personal computers and good generalized writing, drawing, file, and spreadsheet programs, and turn them loose. The same strategy, with generalized mathematical and statistical packages and some simple programming capabilities, will also work for hundreds of laboratory scientists.</p>
          <p xml:space="preserve" id="p_001173"><strong id="strong_000312" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000312">Requirements refinement and rapid prototyping</strong><span class="text" id="span_000623" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000623">. The hardest single part of building a software system is deciding precisely what to build. No other part of the conceptual work is so difficult as establishing the detailed technical requirements, including all the interfaces to people, to machines, and to other software systems. No other part of the work so cripples the resulting system if done wrong. No other part is more difficult to rectify later.</span></p>
          <p xml:space="preserve" id="p_001174" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001174">Therefore the most important function that software builders do for their clients is the iterative extraction and refinement of the product requirements. For the truth is, the clients do not know what they want. They usually do not know what questions must be answered, and they almost never have thought of the problem in the detail that must be specified. Even the simple answer--"Make the new software system work like our old manual information-processing system"--is in fact too simple. Clients never want exactly that. Complex software systems are, moreover, things that act, that move, that work. The dynamics of that action are hard to imagine. So in planning any software activity, it is necessary to allow for an extensive iteration between the client and the designer as part of the system definition.</p>
          <pagenum page="normal" id="p200" smilref="The_Mythical_Man_Month_Essay00005.smil#p200">200</pagenum>
          <p xml:space="preserve" id="p_001175" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001175">I would go a step further and assert that it is really impossible for clients, even those working with software engineers, to specify completely, precisely, and correctly the exact requirements of a modern software product before having built and tried some versions of the product they are specifying.</p>
          <p xml:space="preserve" id="p_001176" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001176">Therefore one of the most promising of the current technological efforts, and one which attacks the essence, not the accidents, of the software problem, is the development of approaches and tools for rapid prototyping of systems as part of the iterative specification of requirements.</p>
          <p xml:space="preserve" id="p_001177" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001177">A prototype software system is one that simulates the important interfaces and performs the main functions of the intended system, while not being necessarily bound by the same hardware speed, size, or cost constraints. Prototypes typically perform the mainline tasks of the application, but make no attempt to handle the exceptions, respond correctly to invalid inputs, abort cleanly, etc. The purpose of the prototype is to make real the conceptual structure specified, so that the client can test it for consistency and usability.</p>
          <p xml:space="preserve" id="p_001178" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001178">Much of present-day software acquisition procedures rests upon the assumption that one can specify a satisfactory system in advance, get bids for its construction, have it built, and install it. I think this assumption is fundamentally wrong, and that many software acquisition problems spring from that fallacy. Hence they cannot be fixed without fundamental revision, one that provides for iterative development and specification of prototypes and products.</p>
          <p xml:space="preserve" id="p_001179"><strong id="strong_000313" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000313">Incremental development--grow, not build, software. </strong><span class="text" id="span_000624" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000624">I still remember the jolt I felt in 1958 when I first heard a friend talk about </span><em id="em_000314" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000314">building </em><span class="text" id="span_000625" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000625">a program, as opposed to </span><em id="em_000315" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000315">writing </em><span class="text" id="span_000626" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000626">one. In a flash he broadened my whole view of the software process. The metaphor shift was powerful, and accurate. Today we understand how like other building processes the construction of software is, and we freely use other elements of the metaphor, such as </span><em id="em_000316" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000316">specifications, assembly of components, </em><span class="text" id="span_000627" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000627">and </span><em id="em_000317" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000317">scaffolding.</em></p>
          <pagenum page="normal" id="p201" smilref="The_Mythical_Man_Month_Essay00005.smil#p201">201</pagenum>
          <p xml:space="preserve" id="p_001180" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001180">The building metaphor has outlived its usefulness. It is time to change again. If, as I believe, the conceptual structures we construct today are too complicated to be accurately specified in advance, and too complex to be built faultlessly, then we must take a radically different approach.</p>
          <p xml:space="preserve" id="p_001181" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001181">Let us turn to nature and study complexity in living things, instead of just the dead works of man. Here we find constructs whose complexities thrill us with awe. The brain alone is intricate beyond mapping, powerful beyond imitation, rich in diversity, self-protecting, and self-renewing. The secret is that it is grown, not built.</p>
          <p xml:space="preserve" id="p_001182"><span class="text" id="span_000628" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000628">So it must be with our software systems. Some years ago Harlan Mills proposed that any software system should be grown by incremental development.</span><sup id="sup_000087" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000087">11</sup><span class="text" id="span_000629" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000629"> That is, the system should first be made to run, even though it does nothing useful except call the proper set of dummy subprograms. Then, bit by bit it is fleshed out, with the subprograms in turn being developed into actions or calls to empty stubs in the level below.</span></p>
          <p xml:space="preserve" id="p_001183" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001183">I have seen the most dramatic results since I began urging this technique on the project builders in my software engineering laboratory class. Nothing in the past decade has so radically changed my own practice, or its effectiveness. The approach necessitates top-down design, for it is a top-down growing of the software. It allows easy backtracking. It lends itself to early prototypes. Each added function and new provision for more complex data or circumstances grows organically out of what is already there.</p>
          <p xml:space="preserve" id="p_001184"><span class="text" id="span_000630" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000630">The morale effects are startling. Enthusiasm jumps when there is a running system, even a simple one. Efforts redouble when the first picture from a new graphics software system appears on the screen, even if it is only a rectangle. One always has, at every stage in the process, a working system. I find that teams can </span><em id="em_000318" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000318">grow </em><span class="text" id="span_000631" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000631">much more complex entities in four months than they can </span><em id="em_000319" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000319">build.</em></p>
          <p xml:space="preserve" id="p_001185"><span class="text" id="span_000632" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000632">The same benefits can be realized on large projects as on my small ones.</span><sup id="sup_000088" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000088">12</sup></p>
          <pagenum page="normal" id="p202" smilref="The_Mythical_Man_Month_Essay00005.smil#p202">202</pagenum>
          <p xml:space="preserve" id="p_001186"><strong id="strong_000314" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000314">Great designers. </strong><span class="text" id="span_000633" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000633">The central question of how to improve the software art centers, as it always has, on people.</span></p>
          <p xml:space="preserve" id="p_001187" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001187">We can get good designs by following good practices instead of poor ones. Good design practices can be taught. Programmers are among the most intelligent part of the population, so they can learn good practice. Thus a major thrust in the United States is to promulgate good modern practice. New curricula, new literature, new organizations such as the Software Engineering Institute, all have come into being in order to raise the level of our practice from poor to good. This is entirely proper.</p>
          <p xml:space="preserve" id="p_001188"><span class="text" id="span_000634" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000634">Nevertheless, I do not believe we can make the next step upward in the same way. Whereas the difference between poor conceptual designs and good ones may lie in the soundness of design method, the difference between good designs and great ones surely does not. Great designs come from great designers. Software construction is a </span><em id="em_000320" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000320">creative </em><span class="text" id="span_000635" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000635">process. Sound methodology can empower and liberate the creative mind; it cannot enflame or inspire the drudge.</span></p>
          <p xml:space="preserve" id="p_001189" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001189">The differences are not minor--it is rather like Salieri and Mozart. Study after study shows that the very best designers produce structures that are faster, smaller, simpler, cleaner, and produced with less effort. The differences between the great and the average approach an order of magnitude.</p>
          <p xml:space="preserve" id="p_001190" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001190">A little retrospection shows that although many fine, useful software systems have been designed by committees and built by multipart projects, those software systems that have excited passionate fans are those that are the products of one or a few designing minds, great designers. Consider Unix, APL, Pascal, Modula, the Smalltalk interface, even Fortran; and contrast with Cobol, PL/I, Algol, MVS/370, and MS-DOS (Fig. 16.1).</p>
          <p xml:space="preserve" id="p_001191" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001191">Hence, although I strongly support the technology transfer and curriculum development efforts now underway, I think the most important single effort we can mount is to develop ways to grow great designers.</p>
          <p xml:space="preserve" id="p_001192" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001192">No software organization can ignore this challenge. Good managers, scarce though they be, are no scarcer than good designers.</p>
          <pagenum page="normal" id="p203" smilref="The_Mythical_Man_Month_Essay00005.smil#p203">203</pagenum>
          <p xml:space="preserve" id="p_001193" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001193">Great designers and great managers are both very rare. Most organizations spend considerable effort in finding and cultivating the management prospects; I know of none that spends equal effort in finding and developing the great designers upon whom the technical excellence of the products will ultimately depend.</p>
          <p xml:space="preserve" id="p_001194" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001194">My first proposal is that each software organization must determine and proclaim that great designers are as important to its success as great managers are, and that they can be expected to be similarly nurtured and rewarded. Not only salary, but the perquisites of recognition--office size, furnishings, personal technical equipment, travel funds, staff support--must be fully equivalent.</p>
          <p xml:space="preserve" id="p_001195" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001195">How to grow great designers? Space does not permit a lengthy discussion, but some steps are obvious:</p>
          <p xml:space="preserve" id="p_001196" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001196">* Systematically identify top designers as early as possible. The best are often not the most experienced.</p>
          <p xml:space="preserve" id="p_001197" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001197">* Assign a career mentor to be responsible for the development of the prospect, and keep a careful career file.</p>
          <p xml:space="preserve" id="p_001198" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001198">* Devise and maintain a career development plan for each prospect, including carefully selected apprenticeships with top designers, episodes of advanced formal education, and short courses, all interspersed with solo design and technical leadership assignments.</p>
          <p xml:space="preserve" id="p_001199" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001199">* Provide opportunities for growing designers to interact with and stimulate each other.</p>
          <p xml:space="preserve" id="p_001200"><strong id="strong_000315" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000315">Fig. 16.1</strong><span class="text" id="span_000636" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000636"> Exciting products</span></p>
          <table id="table_000003">
            <tr id="tr_000011">
              <td colspan="1" rowspan="1" id="td_000056">
                <p xml:space="preserve" id="p_001201"><strong id="strong_000316" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000316">Yes</strong></p>
              </td>
              <td colspan="1" rowspan="1" id="td_000057">
                <p xml:space="preserve" id="p_001202"><strong id="strong_000317" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000317">No</strong></p>
              </td>
            </tr>
            <tr id="tr_000012">
              <td colspan="1" rowspan="1" id="td_000058">
                <p xml:space="preserve" id="p_001203" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001203">Unix</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000059">
                <p xml:space="preserve" id="p_001204" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001204">Cobol</p>
              </td>
            </tr>
            <tr id="tr_000013">
              <td colspan="1" rowspan="1" id="td_000060">
                <p xml:space="preserve" id="p_001205" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001205">APL</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000061">
                <p xml:space="preserve" id="p_001206" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001206">PL/1</p>
              </td>
            </tr>
            <tr id="tr_000014">
              <td colspan="1" rowspan="1" id="td_000062">
                <p xml:space="preserve" id="p_001207" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001207">Pascal</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000063">
                <p xml:space="preserve" id="p_001208" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001208">Algol</p>
              </td>
            </tr>
            <tr id="tr_000015">
              <td colspan="1" rowspan="1" id="td_000064">
                <p xml:space="preserve" id="p_001209" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001209">Modula</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000065">
                <p xml:space="preserve" id="p_001210" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001210">MVS/370</p>
              </td>
            </tr>
            <tr id="tr_000016">
              <td colspan="1" rowspan="1" id="td_000066">
                <p xml:space="preserve" id="p_001211" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001211">Smalltalk</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000067">
                <p xml:space="preserve" id="p_001212" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001212">MS-DOS</p>
              </td>
            </tr>
            <tr id="tr_000017">
              <td colspan="1" rowspan="1" id="td_000068">
                <p xml:space="preserve" id="p_001213" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001213">Fortran</p>
              </td>
              <td colspan="1" rowspan="1" id="td_000069" />
            </tr>
          </table>
          <pagenum page="normal" id="p204" smilref="The_Mythical_Man_Month_Essay00005.smil#p204">204</pagenum>
          <p xml:space="preserve" id="p_001214" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001214">[Blank Page]</p>
          <pagenum page="normal" id="p205" smilref="The_Mythical_Man_Month_Essay00005.smil#p205">205</pagenum>
          <p xml:space="preserve" id="p_001215" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001215">"No Silver Bullet" Refired</p>
          <pagenum page="normal" id="p206" smilref="The_Mythical_Man_Month_Essay00005.smil#p206">206</pagenum>
          <p xml:space="preserve" id="p_001216" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001216">[Image: A woman.]</p>
          <pagenum page="normal" id="p207" smilref="The_Mythical_Man_Month_Essay00005.smil#p207">207</pagenum>
        </level2>
        <level2 id="level2_000020">
          <h2 xml:space="preserve" id="h2_000020"><strong id="strong_000318"><em id="em_000321" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000321">"No Silver Bullet" Refired</em></strong></h2>
          <p xml:space="preserve" id="p_001217"><em id="em_000322" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000322">Every bullet has its billet.</em></p>
          <p xml:space="preserve" id="p_001218"><em id="em_000323" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000323">WILLIAM HI OF ENGLAND, PRINCE OF ORANGE</em></p>
          <p xml:space="preserve" id="p_001219"><em id="em_000324" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000324">Whoever thinks a faultless piece to see, Thinks what ne'er was, nor is, nor e'er shall be.</em></p>
          <p xml:space="preserve" id="p_001220"><em id="em_000325" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000325">ALEXANDER POPE, </em><span class="text" id="span_000637" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000637">AN ESSAY ON CRITICISM</span></p>
          <p xml:space="preserve" id="p_001221" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001221">Assembling a structure from ready-made parts, 1945</p>
          <p xml:space="preserve" id="p_001222" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001222">The Bettman Archive</p>
          <p xml:space="preserve" id="p_001223"><strong id="strong_000319" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000319">207</strong></p>
          <pagenum page="normal" id="p208" smilref="The_Mythical_Man_Month_Essay00005.smil#p208">208</pagenum>
          <p xml:space="preserve" id="p_001224"><strong id="strong_000320" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000320">On Werewolves and Other Legendary Terrors</strong></p>
          <p xml:space="preserve" id="p_001225"><span class="text" id="span_000638" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000638">"No Silver Bullet--Essence and Accidents of Software Engineering" (now Chapter 16) was originally an invited paper for the IFIP 86 conference in Dublin, and it was published in those proceedings.</span><sup id="sup_000089" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000089">1</sup> <em id="em_000326" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000326">Computer </em><span class="text" id="span_000639" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000639">magazine reprinted it, behind a gothic cover, illustrated with stills from films such as </span><em id="em_000327" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000327">The Werewolf of London.</em><sup id="sup_000090" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000090">2</sup><span class="text" id="span_000640" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000640"> They also provided an explanatory sidebar "To Slay the Werewolf," setting forth the (modern) legend that only silver bullets will do. I was not aware of the sidebar and illustrations before publication, and I never expected a serious technical paper to be so embellished.</span></p>
          <p xml:space="preserve" id="p_001226"><em id="em_000328" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000328">Computer's </em><span class="text" id="span_000641" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000641">editors were expert in achieving their desired effect, however, and many people seem to have read the paper. I have therefore chosen yet another werewolf picture for that chapter, an ancient depiction of an almost comical creature. I hope this less garish picture will have the same salutary effect.</span></p>
          <p xml:space="preserve" id="p_001227"><strong id="strong_000321" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000321">There is Too a Silver Bullet--AND HERE IT IS!</strong></p>
          <p xml:space="preserve" id="p_001228" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001228">"No Silver Bullet" asserts and argues that no single software engineering development will produce an order-of-magnitude improvement in programming productivity within ten years (from the paper's publication in 1986). We are now nine years into that decade, so it is timely to see how this prediction is holding up.</p>
          <p xml:space="preserve" id="p_001229"><span class="text" id="span_000642" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000642">Whereas </span><em id="em_000329" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000329">The Mythical Man-Month </em><span class="text" id="span_000643" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000643">generated many citations but little argument, "No Silver Bullet" has occasioned rebuttal papers, letters to journal editors, and letters and essays that continue to this day.</span><sup id="sup_000091" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000091">3</sup><span class="text" id="span_000644" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000644"> Most of these attack the central argument that there is no magical solution, and my clear opinion that there cannot be one. Most agree with most of the arguments in "NSB," but then go on to assert that there is indeed a silver bullet for the software beast, which the author has invented. As I reread the early responses today, I can't help noticing that the nostrums pushed so vigorously in 1986 and 1987 have not had the dramatic effects claimed.</span></p>
          <pagenum page="normal" id="p209" smilref="The_Mythical_Man_Month_Essay00005.smil#p209">209</pagenum>
          <p xml:space="preserve" id="p_001230"><span class="text" id="span_000645" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000645">I buy hardware and software chiefly by the "happy user" test--conversations with </span><em id="em_000330" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000330">botta fide </em><span class="text" id="span_000646" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000646">cash-paying customers who use the product and are pleased. Likewise, I shall most readily believe a silver bullet has materialized when a </span><em id="em_000331" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000331">bona fide </em><span class="text" id="span_000647" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000647">independent user steps forth and says, "I used this methodology, tool, or product, and it gave me a tenfold improvement in software productivity."</span></p>
          <p xml:space="preserve" id="p_001231" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001231">Many correspondents have made valid emendations or clarifications. Some have undertaken point-by-point analysis and rebuttal, for which I am grateful. In this chapter, I shall share the improvements and address the rebuttals.</p>
          <p xml:space="preserve" id="p_001232"><strong id="strong_000322" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000322">Obscure Writing Will Be Misunderstood</strong></p>
          <p xml:space="preserve" id="p_001233" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001233">Some writers show that I failed to make some arguments clear.</p>
          <p xml:space="preserve" id="p_001234"><strong id="strong_000323" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000323">Accident. </strong><span class="text" id="span_000648" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000648">The central argument of "NSB" is as clearly stated in the Abstract to Chapter 16 as I know how to put it. Some have been confused, however, by the terms </span><em id="em_000332" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000332">accident </em><span class="text" id="span_000649" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000649">and </span><em id="em_000333" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000333">accidental, </em><span class="text" id="span_000650" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000650">which follow an ancient usage going back to Aristotle.</span><sup id="sup_000092" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000092">4</sup><span class="text" id="span_000651" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000651"> By </span><em id="em_000334" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000334">accidental, </em><span class="text" id="span_000652" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000652">I did not mean </span><em id="em_000335" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000335">occurring by chance, </em><span class="text" id="span_000653" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000653">nor </span><em id="em_000336" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000336">misfortunate, </em><span class="text" id="span_000654" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000654">but more nearly </span><em id="em_000337" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000337">incidental, </em><span class="text" id="span_000655" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000655">or </span><em id="em_000338" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000338">appurtenant.</em></p>
          <p xml:space="preserve" id="p_001235"><span class="text" id="span_000656" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000656">I would not denigrate the accidental parts of software construction; instead I follow the English dramatist, detective story writer, and theologian Dorothy Sayers in seeing all creative activity to consist of (1) the formulation of the conceptual constructs, (2) implementation in real media, and (3) interactivity with users in real uses.</span><sup id="sup_000093" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000093">5</sup><span class="text" id="span_000657" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000657"> The part of software building I called </span><em id="em_000339" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000339">essence </em><span class="text" id="span_000658" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000658">is the mental crafting of the conceptual construct; the part I called </span><em id="em_000340" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000340">accident </em><span class="text" id="span_000659" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000659">is its implementation process.</span></p>
          <p xml:space="preserve" id="p_001236"><strong id="strong_000324" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000324">A question of fact. It </strong><span class="text" id="span_000660" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000660">seems to me (although not to everyone) that the truthfulness of the central argument boils down to a question of fact: What fraction of total software effort is now associated with the accurate and orderly representation of the conceptual construct, and what fraction is the effort of mentally crafting the constructs? The finding and fixing of flaws falls</span></p>
          <pagenum page="normal" id="p210" smilref="The_Mythical_Man_Month_Essay00005.smil#p210">210</pagenum>
          <p xml:space="preserve" id="p_001237" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001237">partly in each fraction, according to whether the flaws are conceptual, such as failing to recognize some exception, or representational, such as a pointer mistake or a memory allocation mistake.</p>
          <p xml:space="preserve" id="p_001238"><span class="text" id="span_000661" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000661">It is my opinion, and that is all, that the accidental or representational part of the work is now down to about half or less of the total. Since this fraction is a question of fact, its value could in principle be settled by measurement.</span><sup id="sup_000094" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000094">6</sup><span class="text" id="span_000662" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000662"> Failing that, my estimate of it can be corrected by better informed and more current estimates. Significantly, no one who has written publicly or privately has asserted that the accidental part is as large as 9/10.</span></p>
          <p xml:space="preserve" id="p_001239"><span class="text" id="span_000663" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000663">"NSB" argues, indisputably, that if the accidental part of the work is less than 9/10 of the total, shrinking it to zero (which </span><em id="em_000341" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000341">would </em><span class="text" id="span_000664" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000664">take magic) will not give an order of magnitude productivity improvement. One </span><em id="em_000342" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000342">must </em><span class="text" id="span_000665" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000665">attack the essence.</span></p>
          <p xml:space="preserve" id="p_001240"><span class="text" id="span_000666" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000666">Since "NSB," Bruce Blum has drawn my attention to the 1959 work of Herzberg, Mausner, and Sayderman.</span><sup id="sup_000095" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000095">7</sup><span class="text" id="span_000667" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000667"> They find that motivational factors </span><em id="em_000343" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000343">can </em><span class="text" id="span_000668" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000668">increase productivity. On the other hand, environmental and accidental factors, no matter how positive, cannot; but these factors can decrease productivity when negative. "NSB" argues that much software progress has been the removal of such negative factors: stunningly awkward machine languages, batch processing with long turnaround times, poor tools, and severe memory constraints.</span></p>
          <p xml:space="preserve" id="p_001241"><strong id="strong_000325" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000325">Are the </strong><em id="em_000344" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000344">essential </em><span class="text" id="span_000669" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000669">difficulties therefore </span><em id="em_000345" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000345">hopeless?</em><span class="text" id="span_000670" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000670"> An excellent 1990 paper by Brad Cox, "There Is a Silver Bullet," argues eloquently for the reusable, interchangeable component approach as an attack on the conceptual essence of the problem.</span><sup id="sup_000096" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000096">8 </sup><span class="text" id="span_000671" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000671">I enthusiastically agree.</span></p>
          <p xml:space="preserve" id="p_001242" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001242">Cox however misunderstands "NSB" on two points. First, he reads it as asserting that software difficulties arise "from some deficiency in how programmers build software today." My argument was that the essential difficulties are inherent in the conceptual complexity of the software functions to be designed and built at any time, by any method. Second, he (and</p>
          <pagenum page="normal" id="p211" smilref="The_Mythical_Man_Month_Essay00005.smil#p211">211</pagenum>
          <p xml:space="preserve" id="p_001243" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001243">others) read "NSB" as asserting that there is no hope of attacking the essential difficulties of software building. That was not my intent. Crafting the conceptual construct does indeed have as inherent difficulties complexity, conformity, changeability, and invisibility. The troubles caused by each of these difficulties can, however, be ameliorated.</p>
          <p xml:space="preserve" id="p_001244"><strong id="strong_000326" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000326">Complexity is by levels. </strong><span class="text" id="span_000672" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000672">For example, complexity is the most serious inherent difficulty, but not all complexity is inevitable. Much, but not all, of the conceptual complexity in our software constructs comes from the arbitrary complexity of the applications themselves. Indeed, Lars Sødahl of MYSIGMA Sødahl and Partners, a multinational management consulting firm, writes:</span></p>
          <p xml:space="preserve" id="p_001245"><em id="em_000346" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000346">In my experience most of the complexities which are encountered in systems work are symptoms of organizational malfunctions. Trying to model this reality with equally complex programs is actually to conserve the mess instead of solving the problems.</em></p>
          <p xml:space="preserve" id="p_001246" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001246">Steve Lukasik of Northrop argues that even organizational complexity is perhaps not arbitrary but may be susceptible to ordering principles:</p>
          <p xml:space="preserve" id="p_001247"><em id="em_000347" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000347">I trained as a physicist and thus see "complex" things as susceptible to description in terms of simpler concepts. Now you may be right; I will not assert that all complex things are susceptible to ordering principles.... by the same rules of argument you cannot assert that they can </em><strong id="strong_000327" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000327">not</strong> <em id="em_000348" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000348">be.</em></p>
          <p xml:space="preserve" id="p_001248"><em id="em_000349" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000349">...Yesterday's complexity is tomorrow's order. The complexity of molecular disorder gave way to the kinetic theory of gases and the three laws of thermodynamics. Now software may not ever reveal those kinds of ordering principles, but the burden is on you to explain why not. I am not being obtuse or argumentative. I believe that someday the "complexity" of software will be understood in terms of some higher order notions </em><span class="text" id="span_000673" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000673">(invariants </span><em id="em_000350" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000350">to the physicist</em><span class="text" id="span_000674" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000674">)</span><em id="em_000351" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000351">.</em></p>
          <pagenum page="normal" id="p212" smilref="The_Mythical_Man_Month_Essay00005.smil#p212">212</pagenum>
          <p xml:space="preserve" id="p_001249" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001249">I have not undertaken the deeper analysis Lukasik properly calls for. As a discipline, we need an extended information theory that quantifies the information content of static structures, just as Shannon's theory does for communicated streams. That is quite beyond me. To Lukasik I simply respond that system complexity is a function of myriad details that must each be specified exactly, either by some general rule or detail-by-detail, but not just statistically. It seems very unlikely that uncoordinated works of many minds should have enough coherence to be exactly described by general rules.</p>
          <p xml:space="preserve" id="p_001250" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001250">Much of the complexity in a software construct is, however, not due to conformity to the external world but rather to the implementation itself--its data structures, its algorithms, its connectivity. Growing software in higher-level chunks, built by someone else or reused from one's own past, avoids facing whole layers of complexity. "NSB" advocates a wholehearted attack on the problem of complexity, quite optimistic that progress can be made. It advocates adding necessary complexity to a software system:</p>
          <p xml:space="preserve" id="p_001251" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001251">* Hierarchically, by layered modules or objects</p>
          <p xml:space="preserve" id="p_001252" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001252">* Incrementally, so that the system always works.</p>
          <p xml:space="preserve" id="p_001253"><strong id="strong_000328" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000328">Harel's Analysis</strong></p>
          <p xml:space="preserve" id="p_001254"><span class="text" id="span_000675" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000675">David Harel, in the 1992 paper, "Biting the Silver Bullet," undertakes the most careful analysis of "NSB" that has been published.</span><sup id="sup_000097" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000097">9</sup></p>
          <p xml:space="preserve" id="p_001255"><strong id="strong_000329" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000329">Pessimism vs. optimism vs. realism. </strong><span class="text" id="span_000676" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000676">Harel sees both "NSB" and Parnas's 1984 "Software Aspects of Strategic Defense Systems,"</span><sup id="sup_000098" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000098">10</sup><span class="text" id="span_000677" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000677"> as "far too bleak." So he aims to illuminate the brighter side of the coin, subtitling his paper "Toward a Brighter Future for System Development." Cox as well as Harel reads "NSB" as pessimistic, and he says, "But if you view these same facts from a new perspective, a more optimistic conclusion emerges." Both misread the tone.</span></p>
          <pagenum page="normal" id="p213" smilref="The_Mythical_Man_Month_Essay00005.smil#p213">213</pagenum>
          <p xml:space="preserve" id="p_001256" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001256">First, my wife, my colleagues, and my editors find me to err far more often in optimism than in pessimism. I am, after all, a programmer by background, and optimism is an occupational disease of our craft.</p>
          <p xml:space="preserve" id="p_001257"><span class="text" id="span_000678" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000678">"NSB" says explicitly "As we look to the horizon of a decade hence, we see no silver bullet.... Skepticism is not pessimism, however.... There is no royal road, but there is a road." It forecasts that the innovations under way in 1986, if developed and exploited, would </span><em id="em_000352" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000352">together </em><span class="text" id="span_000679" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000679">indeed achieve an order-of-magnitude improvement in productivity. As the 1986-1996 decade proceeds, this prediction appears, if anything, too optimistic rather than too gloomy.</span></p>
          <p xml:space="preserve" id="p_001258" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001258">Even if "NSB" were universally seen as pessimistic, what is wrong with that? Is Einstein's statement that nothing can travel faster than the speed of light "bleak" or "gloomy?" How about Gödel's result that some things cannot be computed? "NSB" undertakes to establish that "the very nature of software makes it unlikely that there will ever be any silver bullets." Turski, in his excellent response paper at the IFIP Conference, said eloquently:</p>
          <p xml:space="preserve" id="p_001259"><em id="em_000353" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000353">Of all misguided scientific endeavours, none are more pathetic than the search for the philosophers' stone, a substance supposed to change base metals into gold. The supreme object of alchemy, ardently pursued by generations of researchers generously funded by secular and spiritual rulers, is an undiluted extract of wishful thinking, of the common assumption that things are as we would like them to be. It is a very human belief. It takes a lot of effort to accept the existence of insoluble problems. The wish to see a way out, against all odds, even when it is proven that it does not exist, is very, very strong. And most of us have a lot of sympathy for these courageous souls who try to achieve the impossible. And so it continues. Dissertations on squaring a circle are being written. Lotions to restore lost hair are concocted and sell well. Methods to improve software productivity are hatched and sell very well.</em></p>
          <pagenum page="normal" id="p214" smilref="The_Mythical_Man_Month_Essay00005.smil#p214">214</pagenum>
          <p xml:space="preserve" id="p_001260"><em id="em_000354" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000354">All too often we are inclined to follow our own optimism (or exploit the optimistic hopes of our sponsors). All too often we are willing to disregard the voice of reason and heed the siren calls of panacea pushers.</em><sup id="sup_000099" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000099">11</sup></p>
          <p xml:space="preserve" id="p_001261"><span class="text" id="span_000680" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000680">Turski and I both insist that pipe-dreaming </span><em id="em_000355" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000355">inhibits forward progress and wastes effort.</em></p>
          <p xml:space="preserve" id="p_001262"><strong id="strong_000330" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000330">"Gloom" themes. </strong><span class="text" id="span_000681" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000681">Harel perceives gloom in "NSB" to arise from three themes:</span></p>
          <p xml:space="preserve" id="p_001263" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001263">* Sharp separation into essence and accident</p>
          <p xml:space="preserve" id="p_001264" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001264">* Treatment of each silver bullet candidate in isolation</p>
          <p xml:space="preserve" id="p_001265" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001265">* Predicting for only 10 years, instead of a long enough time in which "to expect any significant improvement."</p>
          <p xml:space="preserve" id="p_001266" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001266">As to the first, that is the whole point of the paper. I still believe this separation is absolutely central to understanding why software is hard. It is a sure guide as to what kinds of attacks to make.</p>
          <p xml:space="preserve" id="p_001267"><span class="text" id="span_000682" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000682">As to treating candidate bullets in isolation, "NSB" does so indeed. The various candidates have been proposed one by one, with extravagant claims for each one </span><em id="em_000356" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000356">by itself. </em><span class="text" id="span_000683" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000683">It is fair to assess them one by one. It is not the techniques I oppose, it is expecting them to work magic. Glass, Vessey, and Conger in their 1992 paper offer ample evidence that the vain search for a silver bullet has not yet ended.</span><sup id="sup_000100" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000100">12</sup></p>
          <p xml:space="preserve" id="p_001268" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001268">As to choosing 10 years versus 40 years as a prediction period, the shorter period was in part a concession that our predictive powers have never been good beyond a decade. Which of us in 1975 predicted the microcomputer revolution of the 1980s?</p>
          <p xml:space="preserve" id="p_001269" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001269">There are other reasons for the decade limit: the claims made for candidate bullets all have had a certain immediacy about them. I recollect none that said "Invest in my nostrum, and you will start winning after 10 years." Moreover, hardware performance/price ratios have improved by perhaps a hundredfold per decade, and the comparison, though quite invalid, is</p>
          <pagenum page="normal" id="p215" smilref="The_Mythical_Man_Month_Essay00005.smil#p215">215</pagenum>
          <p xml:space="preserve" id="p_001270" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001270">subconsciously inevitable. We will surely make substantial progress over the next 40 years; an order of magnitude over 40 years is hardly magical.</p>
          <p xml:space="preserve" id="p_001271"><strong id="strong_000331" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000331">Harel's thought experiment. </strong><span class="text" id="span_000684" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000684">Harel proposes a thought experiment in which he postulates "NSB" as having been written in 1952, instead of 1986, but asserting the same propositions. This he uses as a </span><em id="em_000357" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000357">reducto ad absurdum </em><span class="text" id="span_000685" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000685">to argue against attempting to separate essence from accident.</span></p>
          <p xml:space="preserve" id="p_001272" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001272">The argument doesn't work. First, "NSB" begins by asserting that the accidental difficulties grossly dominated the essential ones in 1950s programming, that they no longer do so, and that eliminating them has effected orders-of-magnitude improvements. Translating that argument back 40 years is unreasonable; one can hardly imagine asserting in 1952 that the accidental difficulties do not occasion a major part of the effort.</p>
          <p xml:space="preserve" id="p_001273" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001273">Second, the state of affairs Harel imagines to have prevailed in the 1950s is inaccurate:</p>
          <p xml:space="preserve" id="p_001274"><em id="em_000358" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000358">That was the time when instead of grappling with the design of large, complex systems, programmers were in the business of developing conventional one-person programs (which would be on the order of 100-200 lines in a modern programming language) that were to carry out limited algorithmic tasks. Given the technology and methodology available then, such tasks were similarly formidable. Failures, errors, and missed deadlines were all around.</em></p>
          <p xml:space="preserve" id="p_001275"><span class="text" id="span_000686" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000686">He then describes how the postulated failures, errors, and missed deadlines in the conventional little one-person programs were improved by an order of magnitude over the next 25 years. But the state of the art in the 1950s was not in fact small one-person programs. In 1952, the Univac was at work processing the 1950 census with a complex program developed by about eight programmers.</span><sup id="sup_000101" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000101">13</sup><span class="text" id="span_000687" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000687"> Other machines were doing chemical dynamics, neutron diffusion calculations, missile performance calculations, etc.</span><sup id="sup_000102" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000102">14</sup><span class="text" id="span_000688" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000688"> Assemblers, relocating linkers and loaders, floating-point interpretive systems, etc. were in routine use.</span><sup id="sup_000103" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000103">15</sup></p>
          <pagenum page="normal" id="p216" smilref="The_Mythical_Man_Month_Essay00005.smil#p216">216</pagenum>
          <p xml:space="preserve" id="p_001276"><span class="text" id="span_000689" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000689">By 1955 people were building 50 to 100 man-year business programs.</span><sup id="sup_000104" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000104">16</sup><span class="text" id="span_000690" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000690"> By 1956 General Electric had in operation a payroll system in its Louisville appliance plant with more than 80,000 words of program. By 1957, the SAGE ANFSQ/7 air defense computer had been running two years, and a 75,000 instruction communications-based, fail-safe-duplexed real-time system was in operation in 30 sites.</span><sup id="sup_000105" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000105">17</sup><span class="text" id="span_000691" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000691"> One can hardly maintain that it is evolution of techniques for one-person programs that chiefly describes software engineering efforts since 1952.</span></p>
          <p xml:space="preserve" id="p_001277"><strong id="strong_000332" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000332">AND HERE IT IS. </strong><span class="text" id="span_000692" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000692">Harel goes on to offer his own silver bullet, a modeling technique called "The Vanilla Framework." The approach itself is not described in enough detail for evaluation, but reference is given to a paper, and to a technical report to appear in book form in due time.</span><sup id="sup_000106" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000106">18</sup><span class="text" id="span_000693" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000693"> Modeling does address the essence, the proper crafting and debugging of concepts, so it is possible that the Vanilla Framework will be revolutionary. I hope so. Ken Brooks reports he found it a helpful methodology when he tried it for a real task.</span></p>
          <p xml:space="preserve" id="p_001278"><strong id="strong_000333" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000333">Invisibility. </strong><span class="text" id="span_000694" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000694">Harel argues strongly that much of the conceptual construct of software is inherently topological in nature and these relationships have natural counterparts in spatial/graphical representations:</span></p>
          <p xml:space="preserve" id="p_001279"><em id="em_000359" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000359">Using appropriate visual formalisms can have a spectacular effect on engineers and programmers. Moreover, this effect is not limited to mere accidental issues; the quality and expedition of their very </em><span class="text" id="span_000695" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000695">thinking </span><em id="em_000360" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000360">was found to be improved. Successful system development in the future will revolve around visual representations. We will first conceptualize, using the "proper" entities and relationships, and then formulate and reformulate our conceptions as a series of increasingly more comprehensive models represented in an appropriate combination of visual languages. A combination it must be, since system models have several facets, each of which conjures up different kinds of mental images.</em></p>
          <pagenum page="normal" id="p217" smilref="The_Mythical_Man_Month_Essay00005.smil#p217">217</pagenum>
          <p xml:space="preserve" id="p_001280"><span class="text" id="span_000696" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000696">.... </span><em id="em_000361" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000361">Some aspects of the modeling process have not been as forthcoming as others in lending themselves to good visualization. Algorithmic operations on variables and data structures, for example, will probably remain textual.</em></p>
          <p xml:space="preserve" id="p_001281" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001281">Harel and I are quite close. What I argued is that software structure is not embedded in three-space, so there is no natural single mapping from a conceptual design to a diagram, whether in two dimensions or more. He concedes, and I agree, that one needs multiple diagrams, each covering some distinct aspect, and that some aspects don't diagram well at all.</p>
          <p xml:space="preserve" id="p_001282" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001282">I completely share his enthusiasm for using diagrams as thought and design aids. I have long enjoyed asking candidate programmers, "Where is next November?" If the question is too cryptic, then, "Tell me about your mental model of the calendar." The really good programmers have strong spatial senses; they usually have geometric models of time; and they quite often understand the first question without elaboration. They have highly individualistic models.</p>
          <p xml:space="preserve" id="p_001283"><strong id="strong_000334" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000334">Jones's Point--Productivity </strong><em id="em_000362" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000362">Follows </em><span class="text" id="span_000697" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000697">Quality</span></p>
          <p xml:space="preserve" id="p_001284"><span class="text" id="span_000698" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000698">Capers Jones, writing first in a series of memoranda and later in a book, offers a penetrating insight, which has been stated by several of my correspondents. "NSB," like most writings at the time, was focused on </span><em id="em_000363" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000363">productivity, </em><span class="text" id="span_000699" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000699">the software output per unit of input. Jones says, "No. Focus on </span><em id="em_000364" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000364">quality, </em><span class="text" id="span_000700" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000700">and productivity will follow."</span><sup id="sup_000107" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000107">19</sup><span class="text" id="span_000701" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000701"> He argues that costly and late projects invest most of the extra work and time in finding and repairing errors in specification, in design, in implementation. He offers data that show a strong correlation between lack of systematic quality controls and schedule disasters. I believe it. Boehm points out that productivity drops again as one pursues extreme quality, as in IBM's space-shuttle software.</span></p>
          <p xml:space="preserve" id="p_001285" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001285">Coqui similarly argues that systematic software development disciplines were developed in response to quality concerns</p>
          <pagenum page="normal" id="p218" smilref="The_Mythical_Man_Month_Essay00005.smil#p218">218</pagenum>
          <p xml:space="preserve" id="p_001286" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001286">(especially avoidance of major disasters) rather than productivity concerns.</p>
          <p xml:space="preserve" id="p_001287"><em id="em_000365" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000365">But note: the goal of applying Engineering principles to Software production in the 1970s was to increase the Quality, Testability, Stability, and Predictability of software products</em><span class="text" id="span_000702" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000702">--</span><em id="em_000366" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000366">not necessarily the efficiency of Software production.</em></p>
          <p xml:space="preserve" id="p_001288"><em id="em_000367" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000367">The driving force to use Software Engineering principles in software production was the fear of major accidents that might be caused by having uncontrollable artists responsible for the development of ever more complex systems.</em><sup id="sup_000108" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000108">20</sup></p>
          <p xml:space="preserve" id="p_001289"><strong id="strong_000335" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000335">So What Has Happened to Productivity?</strong></p>
          <p xml:space="preserve" id="p_001290"><strong id="strong_000336" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000336">Productivity numbers. </strong><span class="text" id="span_000703" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000703">Productivity numbers are very hard to define, hard to calibrate, and hard to find. Capers Jones believes that for two equivalent COBOL programs written 10 years apart, one without structured methodology and one with, the gain is a factor of three.</span></p>
          <p xml:space="preserve" id="p_001291" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001291">Ed Yourdon says, "I see people getting a fivefold improvement due to workstations and software tools." Tom DeMarco believes "Your expectation of an order-of-magnitude improvement in 10 years, due to the whole basket of techniques, was optimistic. I haven't seen organizations making an order-of-magnitude improvement."</p>
          <p xml:space="preserve" id="p_001292"><strong id="strong_000337" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000337">Shrink-wrapped software--Buy; don't build. </strong><span class="text" id="span_000704" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000704">One 1986 assessment in "NSB" has, I think, proved to be correct: "The development of the mass market is ... the most profound long-run trend in software engineering." From the discipline's viewpoint, the mass-market software is almost a new industry compared to that of the development of custom software, whether in-house or out-house. When packages sell in the millions--or even the thousands--quality, timeliness, product performance, and support cost become dominant issues, rather than the development cost that is so crucial for custom systems.</span></p>
          <pagenum page="normal" id="p219" smilref="The_Mythical_Man_Month_Essay00005.smil#p219">219</pagenum>
          <p xml:space="preserve" id="p_001293"><strong id="strong_000338" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000338">Power tools for the mind. </strong><span class="text" id="span_000705" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000705">The most dramatic way to improve the productivity of management information systems (MIS) programmers is to go down to your local computer store and buy off the shelf what they would have built. This is not ridiculous; the availability of cheap, powerful shrink-wrapped software has met many needs that formerly would have occasioned custom packages. These power tools for the mind are more like electric drills, saws, and sanders than they are like big complex production tools. The integration of these into compatible and cross-linked sets such as Microsoft Works and the better-integrated ClarisWorks give immense flexibility. And like the homeowner's collection of power hand tools, frequent use of a small set, for many different tasks, develops familiarity. Such tools must emphasize ease of use for the casual user, not the professional.</span></p>
          <p xml:space="preserve" id="p_001294" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001294">Ivan Selin, Chairman of American Management Systems, Inc., wrote me in 1987:</p>
          <p xml:space="preserve" id="p_001295"><em id="em_000368" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000368">I quibble with your statement that packages have not really changed that much.... I think you too lightly throw off the major implications of your observation that, [the software packages] "may be somewhat more generalized and somewhat more customizable </em><span class="underline" id="span_000706" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000706">than</span><span class="text" id="span_000707" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000707"> formerly, but not much." Even accepting this statement at face value, I believe that the users see the packages as being both more generalized and easier to customize, and that this perception leads the users to be much more amenable to packages. In most cases that my company finds, it is the [end] users, not the software people, who are reluctant to use packages because they think they will lose essential features or functions, and hence the prospect of easy customization is a big selling point to them.</span></p>
          <p xml:space="preserve" id="p_001296" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001296">I think Selin is quite right--I underestimated both the degree of package customizability and its importance.</p>
          <p xml:space="preserve" id="p_001297"><strong id="strong_000339" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000339">Object-Oriented Programming--Will a Brass Bullet Do?</strong></p>
          <p xml:space="preserve" id="p_001298"><strong id="strong_000340" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000340">Building with bigger pieces. </strong><span class="text" id="span_000708" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000708">The illustration opening this chapter reminds us that if one assembles a set of pieces, each of</span></p>
          <pagenum page="normal" id="p220" smilref="The_Mythical_Man_Month_Essay00005.smil#p220">220</pagenum>
          <p xml:space="preserve" id="p_001299" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001299">which may be complex, and all of which are designed to have smooth interfaces, quite rich structures go together rapidly.</p>
          <p xml:space="preserve" id="p_001300"><span class="text" id="span_000709" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000709">One view of object-oriented programming is that it is a discipline that enforces </span><em id="em_000369" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000369">modularity </em><span class="text" id="span_000710" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000710">and clean interfaces. A second view emphasizes </span><em id="em_000370" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000370">encapsulation, </em><span class="text" id="span_000711" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000711">the fact that one cannot see, much less design, the inner structure of the pieces. Another view emphasizes </span><em id="em_000371" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000371">inheritance, </em><span class="text" id="span_000712" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000712">with its concomitant </span><em id="em_000372" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000372">hierarchical </em><span class="text" id="span_000713" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000713">structure of classes, with virtual functions. Yet another view emphasizes </span><em id="em_000373" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000373">strong abstract data-typing, </em><span class="text" id="span_000714" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000714">with its assurance that a particular data-type will be manipulated only by operations proper toit.</span></p>
          <p xml:space="preserve" id="p_001301" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001301">Now any of these disciplines can be had without taking the whole Smalltalk or C + + package--many of them predated object-oriented technology. The attractiveness of object-oriented approach is that of a multivitamin pill: in one fell swoop (that is, programmer retraining), one gets them all. It is a very promising concept.</p>
          <p xml:space="preserve" id="p_001302"><strong id="strong_000341" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000341">Why has object-oriented technique grown slowly? </strong><span class="text" id="span_000715" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000715">In the nine years since "NSB," the expectancy has steadily grown. Why has growth been slow? Theories abound. James Coggins</span><span class="underline" id="span_000716" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000716">, aut</span><span class="text" id="span_000717" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000717">hor for four years of the column, "The Best of comp.lang. c++" in </span><em id="em_000374" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000374">The C + + Report, </em><span class="text" id="span_000718" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000718">offers this explanation:</span></p>
          <p xml:space="preserve" id="p_001303"><em id="em_000375" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000375">The problem is that programmers in 0-0 have been experimenting in incestuous applications and aiming low in abstraction, instead of high. For example, they have been building classes such as </em><span class="text" id="span_000719" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000719">linked-list </span><em id="em_000376" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000376">or </em><span class="text" id="span_000720" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000720">set </span><em id="em_000377" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000377">instead of classes such as </em><span class="text" id="span_000721" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000721">user-interface </span><em id="em_000378" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000378">or </em><span class="text" id="span_000722" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000722">radiation beam </span><em id="em_000379" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000379">or </em><span class="text" id="span_000723" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000723">finite-element model. </span><em id="em_000380" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000380">Unfortunately the selfsame strong type-checking in C++ that helps programmers to avoid errors also makes it hard to build big things out of little ones.</em><sup id="sup_000109" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000109">21</sup></p>
          <p xml:space="preserve" id="p_001304" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001304">He goes back to the basic software problem, and argues that one way to address unmet software needs is to increase the size of the intelligent workforce by enabling and coopting our clients. This argues for top-down design:</p>
          <pagenum page="normal" id="p221" smilref="The_Mythical_Man_Month_Essay00005.smil#p221">221</pagenum>
          <p xml:space="preserve" id="p_001305"><em id="em_000381" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000381">If we design large-grained classes that address concepts our clients are already working with, they can understand and question the design as it grows, and they can cooperate in the design of test cases. My ophthalmology collaborators don't care about stacks; they do care about Legendre polynomial shape descriptions of corneas. Small encapsulations yield small benefits.</em></p>
          <p xml:space="preserve" id="p_001306" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001306">David Pamas, whose paper was one of the origins of object-oriented concepts, sees the matter differently. He writes me:</p>
          <p xml:space="preserve" id="p_001307"><em id="em_000382" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000382">The answer is simple. It is because </em><span class="text" id="span_000724" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000724">[</span><em id="em_000383" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000383">O-O</em><span class="text" id="span_000725" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000725">]</span><em id="em_000384" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000384"> has been tied to a variety of complex languages. Instead of teaching people that O-O is a type of design, and giving them design principles, people have taught that 0-0 is the use of a particular tool. </em><span class="text" id="span_000726" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000726">We </span><em id="em_000385" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000385">can write good or bad programs with any tool. Unless we teach people how to design, the languages matter very little. The result is that people do bad designs with these languages and get very little value from them. If the value is small, it won't catch on.</em></p>
          <p xml:space="preserve" id="p_001308"><strong id="strong_000342" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000342">Front-loaded costs, down-stream benefits. </strong><span class="text" id="span_000727" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000727">My own belief is that object-oriented techniques have a peculiarly severe case of a malady that characterizes many methodological improvements. The up-front costs are very substantial--primarily retraining programmers to think in a quite new way, but also extra investment in fashioning functions into generalized classes. The benefits, which I think are real and not merely putative, occur all along the development cycle; but the big benefits pay off during successor building, extension, and maintenance activities. Coggins says, "Object-oriented techniques will not make the first project development any faster, or the next one. The fifth one in that family will go blazingly fast."</span><sup id="sup_000110" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000110">22</sup></p>
          <p xml:space="preserve" id="p_001309" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001309">Betting real up-front money for the sake of projected but iffy benefits later is what investors do every day. In many programming organizations, however, it requires real managerial courage, a commodity much scarcer than technical competence or administrative proficiency. I believe the extreme degree of cost front-loading and benefit back-loading is the largest single factor</p>
          <pagenum page="normal" id="p222" smilref="The_Mythical_Man_Month_Essay00005.smil#p222">222</pagenum>
          <p xml:space="preserve" id="p_001310" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001310">slowing the adoption of O-O techniques. Even so, C + + seems to be steadily replacing C in many communities.</p>
          <p xml:space="preserve" id="p_001311"><strong id="strong_000343" smilref="The_Mythical_Man_Month_Essay00005.smil#strong_000343">What About Reuse?</strong></p>
          <p xml:space="preserve" id="p_001312" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001312">The best way to attack the essence of building software is not to build it at all. Package software is only one of the ways of doing this. Program reuse is another. Indeed, the promise of easy reuse of classes, with easy customization via inheritance, is one of the strongest attractions of object-oriented techniques.</p>
          <p xml:space="preserve" id="p_001313" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001313">As is so often the case, as one gets some experience with a new way of doing business the new mode is not so simple as first appears.</p>
          <p xml:space="preserve" id="p_001314" smilref="The_Mythical_Man_Month_Essay00005.smil#p_001314">Of course, programmers have always reused their own handiwork. Jones says,</p>
          <p xml:space="preserve" id="p_001315"><em id="em_000386" smilref="The_Mythical_Man_Month_Essay00005.smil#em_000386">Most experienced programmers have private libraries which allow them to develop software with about 30% reused code by volume. Reusability at the corporate level aims for 75% reused code by volume, and requires special library and administrative support. Corporate reusable code also implies changes in project accounting and measurement practices to give credit for reusability.</em><sup id="sup_000111" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000111">23</sup></p>
          <p xml:space="preserve" id="p_001316"><span class="text" id="span_000728" smilref="The_Mythical_Man_Month_Essay00005.smil#span_000728">W. Huang proposed organizing software factories with a matrix management of functional specialists, so as to harness the natural propensity of each to reuse his own code.</span><sup id="sup_000112" smilref="The_Mythical_Man_Month_Essay00005.smil#sup_000112">24</sup></p>
          <p xml:space="preserve" id="p_001317" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001317">Van Snyder of JPL points out to me that the mathematical software community has a long tradition of reusing software:</p>
          <p xml:space="preserve" id="p_001318"><em id="em_000387" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000387">We conjecture that barriers to reuse are not on the producer side, but on the consumer side. If a software engineer, a potential consumer of standardized software components, perceives it to be more expensive to find a component that meets his need, and so verify, than to write one anew, a new, duplicative component will be written. Notice we said perceives above. It doesn't matter what the true cost of reconstruction is.</em></p>
          <pagenum page="normal" id="p223" smilref="The_Mythical_Man_Month_Essay00006.smil#p223">223</pagenum>
          <p xml:space="preserve" id="p_001319"><em id="em_000388" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000388">Reuse has been successful for mathematical software for two reasons: (1) It is arcane, requiring an enormous intellectual input per line of code; and (2) there is a rich and standard nomenclature, namely mathematics, to describe the functionality of each component. Thus the cost to reconstruct a component of mathematical software is high, and the cost to discover the functionality of an existing component is low. The long tradition of professional journals publishing and collecting algorithms, and offering them at modest cost, and commercial concerns offering very high quality algorithms at somewhat higher but still modest cost, makes discovering a component that meets one's need simpler than in many other disciplines, where it is sometimes not possible to specify one's need precisely and tersely. These factors collaborate to make it more attractive to reuse rather than to reinvent mathematical software.</em></p>
          <p xml:space="preserve" id="p_001320" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001320">The same reuse phenomenon is found among several communities, such as those that build codes for nuclear reactors, climate models, and ocean models, and for the same reasons. The communities each grew up with the same textbooks and standard notations.</p>
          <p xml:space="preserve" id="p_001321"><strong id="strong_000344" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000344">How does corporate-level reuse fare today? </strong><span class="text" id="span_000729" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000729">Lots of study; relatively little practice in the United States; anecdotal reports of more reuse abroad.</span><sup id="sup_000113" smilref="The_Mythical_Man_Month_Essay00006.smil#sup_000113">25</sup></p>
          <p xml:space="preserve" id="p_001322"><span class="text" id="span_000730" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000730">Jones reports that all of his firm's clients with over 5000 programmers have formal reuse research, whereas fewer than 10 percent of the clients with under 500 programmers do.</span><sup id="sup_000114" smilref="The_Mythical_Man_Month_Essay00006.smil#sup_000114">26</sup><span class="text" id="span_000731" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000731"> He reports that in industries with the greatest reuse potential, reusability research (not deployment) "is active and energetic, even if not yet totally successful." Ed Yourdon reports a software house in Manila that has 50 of its 200 programmers building only reusable modules for the rest to use; "I've seen a few cases--adoption is due to </span><em id="em_000389" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000389">organizational </em><span class="text" id="span_000732" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000732">factors such as the reward structure, not technical factors."</span></p>
          <p xml:space="preserve" id="p_001323" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001323">DeMarco tells me that the availability of mass-market packages and their suitability as providers of generic functions such as database systems has substantially reduced both the pressure</p>
          <pagenum page="normal" id="p224" smilref="The_Mythical_Man_Month_Essay00006.smil#p224">224</pagenum>
          <p xml:space="preserve" id="p_001324" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001324">and the marginal utility of reusing modules of one's application code. "The reusable modules tended to be the generic functions anyway."</p>
          <p xml:space="preserve" id="p_001325" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001325">Parnas writes,</p>
          <p xml:space="preserve" id="p_001326"><em id="em_000390" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000390">Reuse is something that is far easier to say than to do. Doing it requires both good design and very good documentation. Even when we see good design, which is still infrequently, we won't see the components reused without good documentation.</em></p>
          <p xml:space="preserve" id="p_001327"><span class="text" id="span_000733" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000733">Ken Brooks comments on the difficulty of anticipating </span><em id="em_000391" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000391">which </em><span class="text" id="span_000734" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000734">generalization will prove necessary: "I keep having to bend things even on the fifth use of my own personal user-interface library."</span></p>
          <p xml:space="preserve" id="p_001328"><span class="text" id="span_000735" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000735">Real reuse seems to be just beginning. Jones reports that a few reusable code modules are being offered on the open market at prices between 1 percent and 20 percent of the normal development costs.</span><sup id="sup_000115" smilref="The_Mythical_Man_Month_Essay00006.smil#sup_000115">27</sup><span class="text" id="span_000736" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000736"> DeMarco says,</span></p>
          <p xml:space="preserve" id="p_001329"><em id="em_000392" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000392">I</em> <em id="em_000393" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000393">am becoming very discouraged about the whole reuse phenomenon. There is almost a total absence of an existence theorem for reuse. Time has confirmed that there is a </em><span class="text" id="span_000737" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000737">big </span><em id="em_000394" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000394">expense in making things reusable.</em></p>
          <p xml:space="preserve" id="p_001330"><span class="text" id="span_000738" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000738">Yourdon estimates the big expense: "A good rule of thumb is that such reusable components will take twice the effort of a 'one-shot' component."</span><sup id="sup_000116" smilref="The_Mythical_Man_Month_Essay00006.smil#sup_000116">28 </sup><span class="text" id="span_000739" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000739">I see that expense as exactly the effort of productizing the component, discussed in Chapter 1. So my estimate of the effort ratio would be threefold.</span></p>
          <p xml:space="preserve" id="p_001331" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001331">Clearly we are seeing many forms and varieties of reuse, but not nearly so much of it as we had expected by now. There is still a lot to learn.</p>
          <p xml:space="preserve" id="p_001332"><strong id="strong_000345" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000345">Learning Large Vocabularies--A Predictable but Unpredicted Problem for Software Reuse</strong></p>
          <p xml:space="preserve" id="p_001333" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001333">The higher the level at which one thinks, the more numerous the primitive thought-elements one has to deal with. So programming</p>
          <pagenum page="normal" id="p225" smilref="The_Mythical_Man_Month_Essay00006.smil#p225">225</pagenum>
          <p xml:space="preserve" id="p_001334" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001334">languages are much more complex than machine languages, and natural languages are more complex still. Higher-level languages have larger vocabularies, more complex syntax, and richer semantics.</p>
          <p xml:space="preserve" id="p_001335" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001335">As a discipline, we have not pondered the implications of this fact for program reuse. To improve quality and productivity, we want to build programs by composing chunks of debugged function that are substantially higher than statements in programming languages. Therefore, whether we do this by object class libraries or procedure libraries, we must face the fact that we are radically raising the sizes of our programming vocabularies. Vocabulary learning constitutes no small part of the intellectual barrier to reuse.</p>
          <p xml:space="preserve" id="p_001336" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001336">So today people have class libraries with over 3000 members. Many objects require specification of 10 to 20 parameters and option variables. Anyone programming with that library must learn the syntax (the external interfaces) and the semantics (the detailed functional behavior) of its members if they are to achieve all of the potential reuse.</p>
          <p xml:space="preserve" id="p_001337"><span class="text" id="span_000740" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000740">This task is far from hopeless. Native speakers routinely use vocabularies of over 10,000 words, educated people far more. Somehow we learn the syntax and very subtle semantics. We correctly differentiate among </span><em id="em_000395" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000395">giant, huge, vast, enormous, mammoth; </em><span class="text" id="span_000741" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000741">people just do not speak of mammoth deserts or vast elephants.</span></p>
          <p xml:space="preserve" id="p_001338" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001338">We need research to appropriate for the software reuse problem the large body of knowledge as to how people acquire language. Some of the lessons are immediately obvious:</p>
          <p xml:space="preserve" id="p_001339" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001339">* People learn in sentence contexts, so we need to publish many examples of composed products, not just libraries of parts.</p>
          <p xml:space="preserve" id="p_001340" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001340">* People do not memorize anything but spelling. They learn syntax and semantics incrementally, in context, by use.</p>
          <p xml:space="preserve" id="p_001341" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001341">* People group word composition rules by syntactic classes, not by compatible subsets of objects.</p>
          <pagenum page="normal" id="p226" smilref="The_Mythical_Man_Month_Essay00006.smil#p226">226</pagenum>
          <p xml:space="preserve" id="p_001342"><strong id="strong_000346" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000346">Net on Bullets--Position Unchanged</strong></p>
          <p xml:space="preserve" id="p_001343"><span class="text" id="span_000742" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000742">So we come back to fundamentals. Complexity </span><em id="em_000396" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000396">is </em><span class="text" id="span_000743" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000743">the business we are in, and complexity is what limits us. R. L. Glass, writing in 1988, accurately summarizes my 1995 views:</span></p>
          <p xml:space="preserve" id="p_001344"><em id="em_000397" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000397">So what, in retrospect, have Parnas and Brooks said to us? That software development is a conceptually tough business. That magic solutions are not just around the corner. That it is time for the practitioner to examine evolutionary improvements rather than to wait</em><span class="text" id="span_000744" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000744">--</span><em id="em_000398" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000398">or hope</em><span class="text" id="span_000745" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000745">--</span><em id="em_000399" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000399">for revolutionary ones.</em></p>
          <p xml:space="preserve" id="p_001345"><em id="em_000400" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000400">Some in the software field find this to be a discouraging picture. They are the ones who still thought breakthroughs were near at hand.</em></p>
          <p xml:space="preserve" id="p_001346"><em id="em_000401" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000401">But some of us</em><span class="text" id="span_000746" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000746">--</span><em id="em_000402" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000402">those of us crusty enough to think that we are realists</em><span class="text" id="span_000747" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000747">--</span><em id="em_000403" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000403">see this as a breath of fresh air. At last, we can focus on something a little more viable than pie in the sky. Now, perhaps, we can get on with the incremental improvements to software productivity that are possible, rather than waiting for the breakthroughs that are not likely to ever come.</em><sup id="sup_000117" smilref="The_Mythical_Man_Month_Essay00006.smil#sup_000117">29</sup></p>
          <pagenum page="normal" id="p227" smilref="The_Mythical_Man_Month_Essay00006.smil#p227">227</pagenum>
          <p xml:space="preserve" id="p_001347"><strong id="strong_000347"><em id="em_000404" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000404">Propositions </em></strong><span class="text" id="span_000748" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000748">of The Mythical Man-Month: </span><em id="em_000405" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000405">True or False?</em></p>
          <pagenum page="normal" id="p228" smilref="The_Mythical_Man_Month_Essay00006.smil#p228">228</pagenum>
          <p xml:space="preserve" id="p_001348" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001348">[Image: A man.]</p>
          <pagenum page="normal" id="p229" smilref="The_Mythical_Man_Month_Essay00006.smil#p229">229</pagenum>
        </level2>
        <level2 id="level2_000021">
          <h2 xml:space="preserve" id="h2_000021"><strong id="strong_000348"><em id="em_000406" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000406">Propositions of </em></strong><span class="text" id="span_000749" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000749">The Mythical Man-Month: </span><em id="em_000407" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000407">True or False?</em></h2>
          <p xml:space="preserve" id="p_001349"><em id="em_000408" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000408">For brevity is very good, Where we are, or are not understood.</em></p>
          <p xml:space="preserve" id="p_001350"><em id="em_000409" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000409">SAMUEL BUTLER, </em><span class="text" id="span_000750" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000750">Hudibras</span></p>
          <p xml:space="preserve" id="p_001351" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001351">Brooks asserting a proposition, 1967</p>
          <p xml:space="preserve" id="p_001352"><span class="text" id="span_000751" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000751">Photo by J. Alex Langley for </span><em id="em_000410" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000410">Fortune </em><span class="text" id="span_000752" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000752">Magazine</span></p>
          <p xml:space="preserve" id="p_001353"><strong id="strong_000349" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000349">229</strong></p>
          <pagenum page="normal" id="p230" smilref="The_Mythical_Man_Month_Essay00006.smil#p230">230</pagenum>
          <p xml:space="preserve" id="p_001354" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001354">Much more is known today about software engineering than was known in 1975. Which of the assertions in the original 1975 edition have been supported by data and experience? Which have been disproved? Which have been obsoleted by the changing world? To help you judge, here in outline form is the essence of the 1975 book--assertions I believed to be true: facts and rule-of-thumb-type generalizations from experience--extracted without change of meaning. (You might ask, "If this is all the original book said, why did it take 177 pages to say it?") Comments in brackets are new.</p>
          <p xml:space="preserve" id="p_001355" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001355">Most of these propositions are operationally testable. My hope in putting them forth in stark form is to focus readers' thoughts, measurements, and comments.</p>
          <level3 id="level3_000002">
            <h3 xml:space="preserve" id="p_001356"><strong id="strong_000350" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000350">Chapter 1. The Tar Pit</strong></h3>
            <p xml:space="preserve" id="p_001357"><strong id="strong_000351" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000351">1.1</strong><span class="text" id="span_000753" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000753"> A programming systems product takes about nine times as much effort as the component programs written separately for private use. I estimate that productizing imposes a factor of three; and that designing, integrating, and testing components into a coherent system imposes a factor of three; and that these cost components are essentially independent of each other.</span></p>
            <p xml:space="preserve" id="p_001358"><strong id="strong_000352" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000352">1.2</strong><span class="text" id="span_000754" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000754"> The craft of programming "gratifies creative longings built deep within us and delights sensibilities we have in common with all men," providing five kinds of joys:</span></p>
            <p xml:space="preserve" id="p_001359" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001359">* The joy of making things</p>
            <p xml:space="preserve" id="p_001360" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001360">* The joy of making things that are useful to other people</p>
            <p xml:space="preserve" id="p_001361" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001361">* The fascination of fashioning puzzle-like objects of interlocking moving parts</p>
            <p xml:space="preserve" id="p_001362" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001362">* The joy of always learning, of a nonrepeating task</p>
            <p xml:space="preserve" id="p_001363" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001363">* The delight of working in a medium so tractable-- pure thought-stuff--which nevertheless exists, moves, and works in a way that word-objects do not.</p>
            <pagenum page="normal" id="p231" smilref="The_Mythical_Man_Month_Essay00006.smil#p231">231</pagenum>
            <p xml:space="preserve" id="p_001364"><strong id="strong_000353" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000353">1.3</strong><span class="text" id="span_000755" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000755"> Likewise the craft has special woes inherent in it.</span></p>
            <p xml:space="preserve" id="p_001365" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001365">* Adjusting to the requirement of perfection is the hardest part of learning to program.</p>
            <p xml:space="preserve" id="p_001366" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001366">* Others set one's objectives and one must depend upon things (especially programs) one cannot control; the authority is not equal to the responsibility.</p>
            <p xml:space="preserve" id="p_001367" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001367">* This sounds worse than it is: actual authority comes from momentum of accomplishment.</p>
            <p xml:space="preserve" id="p_001368" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001368">* With any creativity come dreary hours of painstaking labor; programming is no exception.</p>
            <p xml:space="preserve" id="p_001369" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001369">* The programming project converges more slowly the nearer one gets to the end, whereas one expects it to converge faster as one approaches the end.</p>
            <p xml:space="preserve" id="p_001370" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001370">* One's product is always threatened with obsolescence before completion. The real tiger is never a match for the paper one, unless real use is wanted.</p>
          </level3>
          <level3 id="level3_000003">
            <h3 xml:space="preserve" id="p_001371"><strong id="strong_000354" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000354">Chapter 2. The Mythical Man-Month</strong></h3>
            <p xml:space="preserve" id="p_001372"><strong id="strong_000355" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000355">2.1</strong><span class="text" id="span_000756" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000756"> More programming projects have gone awry for lack of calendar time than for all other causes combined.</span></p>
            <p xml:space="preserve" id="p_001373"><strong id="strong_000356" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000356">2.2</strong><span class="text" id="span_000757" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000757"> Good cooking takes time; some tasks cannot be hurried without spoiling the result.</span></p>
            <p xml:space="preserve" id="p_001374"><strong id="strong_000357" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000357">2.3</strong><span class="text" id="span_000758" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000758"> All programmers are optimists: "All will go well."</span></p>
            <p xml:space="preserve" id="p_001375"><strong id="strong_000358" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000358">2.4</strong><span class="text" id="span_000759" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000759"> Because the programmer builds with pure thought-stuff, we expect few difficulties in implementation.</span></p>
            <p xml:space="preserve" id="p_001376"><strong id="strong_000359" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000359">2.5</strong><span class="text" id="span_000760" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000760"> But our </span><em id="em_000411" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000411">ideas </em><span class="text" id="span_000761" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000761">themselves are faulty, so we have bugs.</span></p>
            <p xml:space="preserve" id="p_001377"><strong id="strong_000360" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000360">2.6</strong><span class="text" id="span_000762" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000762"> Our estimating techniques, built around cost-accounting, confuse effort and progress. </span><em id="em_000412" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000412">The man-month is a fallacious and dangerous myth, for it implies that men and months are interchangeable.</em></p>
            <p xml:space="preserve" id="p_001378"><strong id="strong_000361" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000361">2.7</strong><span class="text" id="span_000763" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000763"> Partitioning a task among multiple people occasions extra communication effort--training and intercommunication.</span></p>
            <p xml:space="preserve" id="p_001379"><strong id="strong_000362" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000362">2.8</strong><span class="text" id="span_000764" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000764"> My rule of thumb is 1/3 of the schedule for design, 1/6 for coding, 1/4 for component testing, and 1/4 for system testing.</span></p>
            <pagenum page="normal" id="p232" smilref="The_Mythical_Man_Month_Essay00006.smil#p232">232</pagenum>
            <p xml:space="preserve" id="p_001380"><strong id="strong_000363" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000363">2.9</strong><span class="text" id="span_000765" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000765"> As a discipline, we lack estimating data.</span></p>
            <p xml:space="preserve" id="p_001381"><strong id="strong_000364" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000364">2.10</strong><span class="text" id="span_000766" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000766"> Because we are uncertain about our scheduling estimates, we often lack the courage to defend them stubbornly against management and customer pressure.</span></p>
            <p xml:space="preserve" id="p_001382"><strong id="strong_000365" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000365">2.11</strong><span class="text" id="span_000767" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000767"> Brooks's Law: Adding manpower to a late software project makes it later.</span></p>
            <p xml:space="preserve" id="p_001383"><strong id="strong_000366" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000366">2.12</strong><span class="text" id="span_000768" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000768"> Adding people to a software project increases the total effort necessary in three ways: the work and disruption of repartitioning itself, training the new people, and added intercommunication.</span></p>
          </level3>
          <level3 id="level3_000004">
            <h3 xml:space="preserve" id="p_001384"><strong id="strong_000367" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000367">Chapter 3. The Surgical Team</strong></h3>
            <p xml:space="preserve" id="p_001385"><strong id="strong_000368" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000368">3.1</strong><span class="text" id="span_000769" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000769"> Very good professional programmers are </span><em id="em_000413" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000413">ten times </em><span class="text" id="span_000770" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000770">as productive as poor ones, at same training and two-year experience level. (Sackman, Grant, and Erickson)</span></p>
            <p xml:space="preserve" id="p_001386"><strong id="strong_000369" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000369">3.2</strong><span class="text" id="span_000771" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000771"> Sackman, Grant, and Erickson's data showed no correlation whatsoever between experience and performance. I doubt the universality of that result.</span></p>
            <p xml:space="preserve" id="p_001387"><strong id="strong_000370" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000370">3.3</strong><span class="text" id="span_000772" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000772"> A small sharp team is best--as few minds as possible.</span></p>
            <p xml:space="preserve" id="p_001388"><strong id="strong_000371" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000371">3.4</strong><span class="text" id="span_000773" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000773"> A team of two, with one leader, is often the best use of minds. [Note God's plan for marriage.]</span></p>
            <p xml:space="preserve" id="p_001389"><strong id="strong_000372" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000372">3.5</strong><span class="text" id="span_000774" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000774"> A small sharp team is too slow for really big systems.</span></p>
            <p xml:space="preserve" id="p_001390"><strong id="strong_000373" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000373">3.6</strong><span class="text" id="span_000775" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000775"> Most experiences with really large systems show the brute-force approach to scaling up to be costly, slow, inefficient, and to produce systems that are not conceptually integrated.</span></p>
            <p xml:space="preserve" id="p_001391"><strong id="strong_000374" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000374">3.7</strong><span class="text" id="span_000776" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000776"> A chief-programmer, surgical-team organization offers a way to get the product integrity of few minds and the total productivity of many helpers, with radically reduced communication.</span></p>
          </level3>
          <level3 id="level3_000005">
            <h3 xml:space="preserve" id="p_001392"><strong id="strong_000375" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000375">Chapter 4. Aristocracy, Democracy, and System Design</strong></h3>
            <p xml:space="preserve" id="p_001393"><strong id="strong_000376" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000376">4.1</strong><span class="text" id="span_000777" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000777"> "Conceptual integrity is </span><em id="em_000414" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000414">the </em><span class="text" id="span_000778" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000778">most important consideration in system design."</span></p>
            <pagenum page="normal" id="p233" smilref="The_Mythical_Man_Month_Essay00006.smil#p233">233</pagenum>
            <p xml:space="preserve" id="p_001394"><strong id="strong_000377" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000377">4.2</strong><span class="text" id="span_000779" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000779"> "The </span><em id="em_000415" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000415">ratio </em><span class="text" id="span_000780" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000780">of function to conceptual complexity is the ultimate test of system design," not just the richness of function. [This ratio is a measure of ease of use, valid over both simple and difficult uses.]</span></p>
            <p xml:space="preserve" id="p_001395"><strong id="strong_000378" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000378">4.3</strong><span class="text" id="span_000781" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000781"> To achieve conceptual integrity, a design must proceed from one mind or a small group of agreeing minds.</span></p>
            <p xml:space="preserve" id="p_001396"><strong id="strong_000379" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000379">4.4</strong><span class="text" id="span_000782" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000782"> "Separation of architectural effort from implementation is a very powerful way of getting conceptual integration on very large projects." [Small ones, too.]</span></p>
            <p xml:space="preserve" id="p_001397"><strong id="strong_000380" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000380">4.5</strong><span class="text" id="span_000783" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000783"> "If a system is to have conceptual integrity, someone must control the concepts. That is an aristocracy that needs no apology."</span></p>
            <p xml:space="preserve" id="p_001398"><strong id="strong_000381" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000381">4.6</strong><span class="text" id="span_000784" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000784"> Discipline is good for art. The external provision of an architecture enhances, not cramps, the creative style of an implementing group.</span></p>
            <p xml:space="preserve" id="p_001399"><strong id="strong_000382" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000382">4.7</strong><span class="text" id="span_000785" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000785"> A conceptually integrated system is faster to build and to test.</span></p>
            <p xml:space="preserve" id="p_001400"><strong id="strong_000383" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000383">4.8</strong><span class="text" id="span_000786" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000786"> Much of software architecture, implementation, and realization can proceed in parallel. [Hardware and software design can likewise proceed in parallel.]</span></p>
          </level3>
          <level3 id="level3_000006">
            <h3 xml:space="preserve" id="p_001401"><strong id="strong_000384" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000384">Chapter 5. The Second-System Effect</strong></h3>
            <p xml:space="preserve" id="p_001402"><strong id="strong_000385" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000385">5.1</strong><span class="text" id="span_000787" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000787"> Early and continuous communication can give the architect good cost readings and the builder confidence in the design, without blurring the clear division of responsibilities.</span></p>
            <p xml:space="preserve" id="p_001403"><strong id="strong_000386" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000386">5.2</strong><span class="text" id="span_000788" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000788"> How an architect can successfully influence implementation:</span></p>
            <p xml:space="preserve" id="p_001404" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001404">* Remember that the builder has the creative responsibility for implementation; the architect only suggests.</p>
            <p xml:space="preserve" id="p_001405" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001405">* Always be ready to suggest a way of implementing anything one specifies; be prepared to accept any other equally good way.</p>
            <p xml:space="preserve" id="p_001406" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001406">* Deal quietly and privately in such suggestions.</p>
            <p xml:space="preserve" id="p_001407" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001407">* Be ready to forgo credit for suggested improvements.</p>
            <pagenum page="normal" id="p234" smilref="The_Mythical_Man_Month_Essay00006.smil#p234">234</pagenum>
            <p xml:space="preserve" id="p_001408" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001408">* Listen to the builder's suggestions for architecture improvements.</p>
            <p xml:space="preserve" id="p_001409"><strong id="strong_000387" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000387">5.3</strong><span class="text" id="span_000789" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000789"> The second is the most dangerous system a person ever designs; the general tendency is to over-design it.</span></p>
            <p xml:space="preserve" id="p_001410"><strong id="strong_000388" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000388">5.4</strong><span class="text" id="span_000790" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000790"> OS/360 is a good example of the second-system effect. [Windows NT seems to be a 1990s example.]</span></p>
            <p xml:space="preserve" id="p_001411"><strong id="strong_000389" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000389">5.5</strong><span class="text" id="span_000791" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000791"> Assigning </span><em id="em_000416" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000416">a priori </em><span class="text" id="span_000792" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000792">values in bytes and microseconds to functions is a worthwhile discipline.</span></p>
          </level3>
          <level3 id="level3_000007">
            <h3 xml:space="preserve" id="p_001412"><strong id="strong_000390" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000390">Chapter 6. Passing the Word</strong></h3>
            <p xml:space="preserve" id="p_001413"><strong id="strong_000391" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000391">6.1</strong><span class="text" id="span_000793" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000793"> Even when a design team is large, the results must be reduced to writing by one or two, in order that the mini-decisions be consistent.</span></p>
            <p xml:space="preserve" id="p_001414"><strong id="strong_000392" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000392">6.2</strong><span class="text" id="span_000794" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000794"> It is important to explicitly define the parts of an architecture that are </span><em id="em_000417" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000417">not </em><span class="text" id="span_000795" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000795">prescribed as carefully as those that are.</span></p>
            <p xml:space="preserve" id="p_001415"><strong id="strong_000393" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000393">6.3</strong><span class="text" id="span_000796" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000796"> One needs both a formal definition of a design, for precision, and a prose definition for comprehensibility.</span></p>
            <p xml:space="preserve" id="p_001416"><strong id="strong_000394" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000394">6.4</strong><span class="text" id="span_000797" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000797"> One of the formal and prose definitions must be standard, and the other derivative. Either definition can serve in either role.</span></p>
            <p xml:space="preserve" id="p_001417"><strong id="strong_000395" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000395">6.5</strong><span class="text" id="span_000798" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000798"> An implementation, including a simulation, can serve as an architectural definition; such use has formidable disadvantages.</span></p>
            <p xml:space="preserve" id="p_001418"><strong id="strong_000396" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000396">6.6</strong><span class="text" id="span_000799" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000799"> Direct incorporation is a very clean technique for enforcing an architectural standard in software. [In hardware, too--consider the Mac WIMP interface built into ROM.]</span></p>
            <p xml:space="preserve" id="p_001419"><strong id="strong_000397" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000397">6.7</strong><span class="text" id="span_000800" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000800"> An architectural "definition will be cleaner and the [architectural] discipline tighter if at least two implementations are built initially."</span></p>
            <p xml:space="preserve" id="p_001420"><strong id="strong_000398" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000398">6.8</strong><span class="text" id="span_000801" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000801"> It is important to allow telephone interpretations by an architect in response to implementers' queries; it is imperative to log these and publish them. [Electronic mail is now the medium of choice.]</span></p>
            <p xml:space="preserve" id="p_001421"><strong id="strong_000399" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000399">6.9</strong><span class="text" id="span_000802" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000802"> "The project manager's best friend is his daily adversary, the independent product-testing organization."</span></p>
            <pagenum page="normal" id="p235" smilref="The_Mythical_Man_Month_Essay00006.smil#p235">235</pagenum>
          </level3>
          <level3 id="level3_000008">
            <h3 xml:space="preserve" id="p_001422"><strong id="strong_000400" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000400">Chapter 7. Why Did the Tower of Babel Fail?</strong></h3>
            <p xml:space="preserve" id="p_001423"><strong id="strong_000401" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000401">7.1</strong><span class="text" id="span_000803" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000803"> The Tower of Babel project failed because of lack of </span><em id="em_000418" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000418">communication </em><span class="text" id="span_000804" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000804">and of its consequent, </span><em id="em_000419" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000419">organization.</em></p>
            <p xml:space="preserve" id="p_001424"><strong id="strong_000402" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000402">Communication</strong></p>
            <p xml:space="preserve" id="p_001425"><strong id="strong_000403" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000403">7.2</strong><span class="text" id="span_000805" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000805"> "Schedule disaster, functional misfit, and system bugs all arise because the left hand doesn't know what the right hand is doing." Teams drift apart in assumptions.</span></p>
            <p xml:space="preserve" id="p_001426"><strong id="strong_000404" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000404">7.3</strong><span class="text" id="span_000806" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000806"> Teams should communicate with one another in as many ways as possible: informally, by regular project meetings with technical briefings, and via a shared formal project workbook. [And by electronic mail.]</span></p>
            <p xml:space="preserve" id="p_001427"><strong id="strong_000405" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000405">Project Workbook</strong></p>
            <p xml:space="preserve" id="p_001428"><strong id="strong_000406" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000406">7.4</strong><span class="text" id="span_000807" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000807"> A project workbook is "not so much a separate document as it is a structure imposed on the documents that the project will be producing anyway."</span></p>
            <p xml:space="preserve" id="p_001429"><strong id="strong_000407" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000407">7.5</strong> <em id="em_000420" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000420">"All </em><span class="text" id="span_000808" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000808">the documents of the project need to be part of this [workbook] structure."</span></p>
            <p xml:space="preserve" id="p_001430"><strong id="strong_000408" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000408">7.6</strong><span class="text" id="span_000809" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000809"> The workbook structure needs to be designed </span><em id="em_000421" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000421">carefully </em><span class="text" id="span_000810" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000810">and </span><em id="em_000422" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000422">early.</em></p>
            <p xml:space="preserve" id="p_001431"><strong id="strong_000409" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000409">7.7</strong><span class="text" id="span_000811" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000811"> Properly structuring the on-going documentation from the beginning "molds later writing into segments that fit into that structure" and will improve the product manuals.</span></p>
            <p xml:space="preserve" id="p_001432"><strong id="strong_000410" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000410">7.8</strong> <em id="em_000423" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000423">"Each </em><span class="text" id="span_000812" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000812">team member should see </span><em id="em_000424" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000424">all </em><span class="text" id="span_000813" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000813">the [workbook] material." [I would now say, each team member </span><em id="em_000425" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000425">should be able </em><span class="text" id="span_000814" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000814">to see all of it. That is, World-Wide Web pages would suffice.]</span></p>
            <p xml:space="preserve" id="p_001433"><strong id="strong_000411" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000411">7.9</strong><span class="text" id="span_000815" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000815"> Timely updating is of critical importance.</span></p>
            <p xml:space="preserve" id="p_001434"><strong id="strong_000412" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000412">7.10</strong><span class="text" id="span_000816" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000816"> The user needs to have attention especially drawn to changes since his last reading, with remarks on their significance.</span></p>
            <p xml:space="preserve" id="p_001435"><strong id="strong_000413" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000413">7.11</strong><span class="text" id="span_000817" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000817"> The OS/360 Project workbook started with paper and switched to microfiche.</span></p>
            <p xml:space="preserve" id="p_001436"><strong id="strong_000414" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000414">7.12</strong><span class="text" id="span_000818" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000818"> Today [even in 1975], the shared electronic notebook is a</span></p>
            <pagenum page="normal" id="p236" smilref="The_Mythical_Man_Month_Essay00006.smil#p236">236</pagenum>
            <p xml:space="preserve" id="p_001437" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001437">much better, cheaper, and simpler mechanism for achieving all these goals.</p>
            <p xml:space="preserve" id="p_001438"><strong id="strong_000415" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000415">7.13</strong><span class="text" id="span_000819" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000819"> One still has to mark the text with [the functional equivalent of] change bars and revision dates. One still needs a LIFO electronic change summary.</span></p>
            <p xml:space="preserve" id="p_001439"><strong id="strong_000416" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000416">7.14</strong><span class="text" id="span_000820" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000820"> Parnas argues strongly that the goal of everyone seeing everything is </span><em id="em_000426" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000426">totally wrong; </em><span class="text" id="span_000821" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000821">parts should be encapsulated so that no one needs to or is allowed to see the internals of any parts other than his own, but should see only the interfaces.</span></p>
            <p xml:space="preserve" id="p_001440"><strong id="strong_000417" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000417">7.15</strong><span class="text" id="span_000822" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000822"> Parnas's proposal is a recipe for disaster. [</span><em id="em_000427" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000427">I have been quite convinced otherwise by Parnas, and totally changed my mind.</em><span class="text" id="span_000823" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000823">]</span></p>
            <p xml:space="preserve" id="p_001441"><strong id="strong_000418" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000418">Organization</strong></p>
            <p xml:space="preserve" id="p_001442"><strong id="strong_000419" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000419">7.16</strong><span class="text" id="span_000824" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000824"> The purpose of organization is to reduce the amount of communication and coordination necessary.</span></p>
            <p xml:space="preserve" id="p_001443"><strong id="strong_000420" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000420">7.17</strong><span class="text" id="span_000825" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000825"> Organization embodies </span><em id="em_000428" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000428">division of labor </em><span class="text" id="span_000826" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000826">and </span><em id="em_000429" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000429">specialization of function </em><span class="text" id="span_000827" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000827">in order to obviate communication.</span></p>
            <p xml:space="preserve" id="p_001444"><strong id="strong_000421" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000421">7.18</strong><span class="text" id="span_000828" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000828"> The conventional tree organization reflects the </span><em id="em_000430" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000430">authority </em><span class="text" id="span_000829" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000829">structure principle that no person can serve two masters.</span></p>
            <p xml:space="preserve" id="p_001445"><strong id="strong_000422" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000422">7.19</strong><span class="text" id="span_000830" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000830"> The </span><em id="em_000431" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000431">communication </em><span class="text" id="span_000831" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000831">structure in an organization is a network, not a tree, so all kinds of special organization mechanisms ("dotted lines") have to be devised to overcome the communication deficiencies of the tree-structured organization.</span></p>
            <p xml:space="preserve" id="p_001446"><strong id="strong_000423" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000423">7.20</strong><span class="text" id="span_000832" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000832"> Every subproject has two leadership roles to be filled, that of the </span><em id="em_000432" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000432">producer </em><span class="text" id="span_000833" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000833">and that of the </span><em id="em_000433" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000433">technical director, </em><span class="text" id="span_000834" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000834">or </span><em id="em_000434" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000434">architect. </em><span class="text" id="span_000835" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000835">The functions of the two roles are quite distinct and require different talents.</span></p>
            <p xml:space="preserve" id="p_001447"><strong id="strong_000424" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000424">7.21</strong><span class="text" id="span_000836" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000836"> Any of three relationships among the two roles can be quite effective:</span></p>
            <p xml:space="preserve" id="p_001448" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001448">* The producer and director can be the same.</p>
            <p xml:space="preserve" id="p_001449" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001449">* The producer may be boss, and the director the producer's right-hand person.</p>
            <p xml:space="preserve" id="p_001450" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001450">* The director may be boss, and the producer the director's right-hand person.</p>
            <pagenum page="normal" id="p237" smilref="The_Mythical_Man_Month_Essay00006.smil#p237">237</pagenum>
          </level3>
          <level3 id="level3_000009">
            <h3 xml:space="preserve" id="p_001451"><strong id="strong_000425" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000425">Chapter 8. Calling the Shot</strong></h3>
            <p xml:space="preserve" id="p_001452"><strong id="strong_000426" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000426">8.1</strong><span class="text" id="span_000837" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000837"> One cannot accurately estimate the total effort or schedule of a programming project by simply estimating the coding time and multiplying by factors for the other parts of the task.</span></p>
            <p xml:space="preserve" id="p_001453"><strong id="strong_000427" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000427">8.2</strong><span class="text" id="span_000838" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000838"> Data for building isolated small systems are not applicable to programming systems projects.</span></p>
            <p xml:space="preserve" id="p_001454"><strong id="strong_000428" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000428">8.3</strong><span class="text" id="span_000839" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000839"> Programming increases goes as a power of program size.</span></p>
            <p xml:space="preserve" id="p_001455"><strong id="strong_000429" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000429">8.4</strong><span class="text" id="span_000840" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000840"> Some published studies show the exponent to be about </span><strong id="strong_000430" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000430">1.5</strong><span class="text" id="span_000841" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000841">. [</span><em id="em_000435" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000435">Boehm's data do not at all agree with this, but vary from 1.05 to 1.2.</em><span class="text" id="span_000842" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000842">]</span><sup id="sup_000118" smilref="The_Mythical_Man_Month_Essay00006.smil#sup_000118">1</sup></p>
            <p xml:space="preserve" id="p_001456"><strong id="strong_000431" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000431">8.5 </strong><span class="text" id="span_000843" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000843">Portman's ICL data show full-time programmers applying only about 50 percent of their time to programming and debugging, versus other overhead-type tasks.</span></p>
            <p xml:space="preserve" id="p_001457"><strong id="strong_000432" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000432">8.6</strong><span class="text" id="span_000844" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000844"> Aran's IBM data show productivity varying from 1.5 K lines of code (KLOC) per man-year to 10 KLOC/man-year as a function of the number of interactions among system parts.</span></p>
            <p xml:space="preserve" id="p_001458"><strong id="strong_000433" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000433">8.7</strong><span class="text" id="span_000845" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000845"> Harr's Bell Labs data show productivities on operating-systems-type work to run about 0.6 KLOC/man-year and on compiler-type work about 2.2 KLOC/man-year for finished products.</span></p>
            <p xml:space="preserve" id="p_001459"><strong id="strong_000434" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000434">8.8</strong><span class="text" id="span_000846" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000846"> Brooks's OS/360 data agrees with Harr's: 0.6-0.8 KLOC/ man-year on operating systems and 2-3 KLOC/man-year on compilers.</span></p>
            <p xml:space="preserve" id="p_001460"><strong id="strong_000435" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000435">8.9</strong><span class="text" id="span_000847" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000847"> Corbató's MIT Project MULTICS data show productivity of 1.2 KLOC/man-year on a mix of operating systems and compilers, but these are PL/I lines of code, whereas all the other data are assembler lines of code!</span></p>
            <p xml:space="preserve" id="p_001461"><strong id="strong_000436" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000436">8.10</strong><span class="text" id="span_000848" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000848"> Productivity seems constant in terms of elementary statements.</span></p>
            <p xml:space="preserve" id="p_001462"><strong id="strong_000437" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000437">8.11</strong><span class="text" id="span_000849" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000849"> Programming productivity may be increased as much as five times when a suitable high-level language is used.</span></p>
            <pagenum page="normal" id="p238" smilref="The_Mythical_Man_Month_Essay00006.smil#p238">238</pagenum>
          </level3>
          <level3 id="level3_000010">
            <h3 xml:space="preserve" id="p_001463"><strong id="strong_000438" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000438">Chapter 9. Ten Pounds in a Five-Pound Sack</strong></h3>
            <p xml:space="preserve" id="p_001464"><strong id="strong_000439" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000439">9.1</strong><span class="text" id="span_000850" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000850"> Aside from running time, the </span><em id="em_000436" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000436">memory space </em><span class="text" id="span_000851" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000851">occupied by a program is a principal cost. This is especially true for operating systems, where much is resident all the time.</span></p>
            <p xml:space="preserve" id="p_001465"><strong id="strong_000440" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000440">9.2</strong><span class="text" id="span_000852" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000852"> Even so, money spent on memory for program residence may yield very good functional value per dollar, better than other ways of investing in configuration. Program size is not bad; unnecessary size is.</span></p>
            <p xml:space="preserve" id="p_001466"><strong id="strong_000441" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000441">9.3</strong><span class="text" id="span_000853" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000853">. The software builder must set size targets, control size, and devise size-reduction techniques, just as the hardware builder does for components.</span></p>
            <p xml:space="preserve" id="p_001467"><strong id="strong_000442" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000442">9.4</strong><span class="text" id="span_000854" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000854"> Size budgets must be explicit not only about resident size but also about the disk accesses occasioned by program fetches.</span></p>
            <p xml:space="preserve" id="p_001468"><strong id="strong_000443" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000443">9.5</strong><span class="text" id="span_000855" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000855"> Size budgets have to be tied to function assignments; define exactly what a module must do when you specify how big it must be.</span></p>
            <p xml:space="preserve" id="p_001469"><strong id="strong_000444" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000444">9.6</strong><span class="text" id="span_000856" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000856"> On large teams, subteams tend to suboptimize to meet their own targets rather than think about the total effect on the user. This breakdown in orientation is a major hazard of large projects.</span></p>
            <p xml:space="preserve" id="p_001470"><strong id="strong_000445" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000445">9.7</strong><span class="text" id="span_000857" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000857"> All during implementation, the system architects must maintain constant vigilance to ensure continued system integrity.</span></p>
            <p xml:space="preserve" id="p_001471"><strong id="strong_000446" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000446">9.8</strong><span class="text" id="span_000858" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000858"> Fostering a total-system, user-oriented attitude may well be the most important function of the programming manager.</span></p>
            <p xml:space="preserve" id="p_001472"><strong id="strong_000447" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000447">9.9</strong><span class="text" id="span_000859" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000859"> An early policy decision is to decide how fine-grained the user choice of options will be, since packaging them in clumps saves memory space [and often marketing costs].</span></p>
            <p xml:space="preserve" id="p_001473"><strong id="strong_000448" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000448">9.10</strong><span class="text" id="span_000860" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000860"> The size of the transient area, hence of the amount of program per disk fetch, is a crucial decision, since performance is a super-linear function of that size. [This whole decision has been obsoleted, first by virtual memory, then</span></p>
            <pagenum page="normal" id="p239" smilref="The_Mythical_Man_Month_Essay00006.smil#p239">239</pagenum>
            <p xml:space="preserve" id="p_001474" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001474">by cheap real memory. Users now typically buy enough real memory to hold all the code of major applications.]</p>
            <p xml:space="preserve" id="p_001475"><strong id="strong_000449" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000449">9.11</strong><span class="text" id="span_000861" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000861"> To make good space-time tradeoffs, a team needs to be trained in the programming techniques peculiar to a particular language or machine, especially a new one.</span></p>
            <p xml:space="preserve" id="p_001476"><strong id="strong_000450" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000450">9.12</strong><span class="text" id="span_000862" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000862"> Programming has a technology, and every project needs a library of standard components.</span></p>
            <p xml:space="preserve" id="p_001477"><strong id="strong_000451" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000451">9.13</strong><span class="text" id="span_000863" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000863"> Program libraries should have two versions of each component, the quick and the squeezed. [This seems obsolete today.]</span></p>
            <p xml:space="preserve" id="p_001478"><strong id="strong_000452" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000452">9.14</strong><span class="text" id="span_000864" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000864"> Lean, spare, fast programs are almost always the result of </span><em id="em_000437" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000437">strategic breakthrough, </em><span class="text" id="span_000865" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000865">rather than tactical cleverness.</span></p>
            <p xml:space="preserve" id="p_001479"><strong id="strong_000453" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000453">9.15</strong><span class="text" id="span_000866" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000866"> Often such a breakthrough will be a new </span><em id="em_000438" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000438">algorithm.</em></p>
            <p xml:space="preserve" id="p_001480"><strong id="strong_000454" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000454">9.16</strong><span class="text" id="span_000867" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000867"> More often, the breakthrough will come from redoing the </span><em id="em_000439" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000439">representation </em><span class="text" id="span_000868" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000868">of the data or tables. </span><em id="em_000440" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000440">Representation is the essence of programming.</em></p>
          </level3>
          <level3 id="level3_000011">
            <h3 xml:space="preserve" id="p_001481"><strong id="strong_000455" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000455">Chapter 10. The Documentary Hypothesis</strong></h3>
            <p xml:space="preserve" id="p_001482"><strong id="strong_000456" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000456">10.1</strong><span class="text" id="span_000869" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000869"> "The hypothesis: Amid a wash of paper, a small number of documents become the critical pivots around which every project's management revolves. These are the manager's chief personal tools."</span></p>
            <p xml:space="preserve" id="p_001483"><strong id="strong_000457" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000457">10.2</strong><span class="text" id="span_000870" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000870"> For a computer development project, the critical documents are the objectives, manual, schedule, budget, organization chart, floorspace allocation, and the estimate, forecast, and prices of the machine itself.</span></p>
            <p xml:space="preserve" id="p_001484"><strong id="strong_000458" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000458">10.3</strong><span class="text" id="span_000871" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000871"> For a university department, the critical documents are similar: the objectives, degree requirements, course descriptions, research proposals, class schedule and teaching plan, budget, floorspace allocation, and assignments of staff and graduate assistants.</span></p>
            <p xml:space="preserve" id="p_001485"><strong id="strong_000459" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000459">10.4</strong><span class="text" id="span_000872" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000872"> For a software project, the needs are the same: the objectives, user manual, internals documentation, schedule, budget, organization chart, and floorspace allocation.</span></p>
            <p xml:space="preserve" id="p_001486"><strong id="strong_000460" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000460">10.5</strong><span class="text" id="span_000873" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000873"> Even on a small project, therefore, the manager should</span></p>
            <pagenum page="normal" id="p240" smilref="The_Mythical_Man_Month_Essay00006.smil#p240">240</pagenum>
            <p xml:space="preserve" id="p_001487" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001487">from the beginning formalize such a set of documents.</p>
            <p xml:space="preserve" id="p_001488"><strong id="strong_000461" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000461">10.6</strong><span class="text" id="span_000874" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000874"> Preparing each document of this small set focuses thought and crystallizes discussion. The act of writing requires hundreds of mini-decisions, and it is the existence of these that distinguish clear, exact policies from fuzzy ones.</span></p>
            <p xml:space="preserve" id="p_001489"><strong id="strong_000462" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000462">10.7</strong><span class="text" id="span_000875" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000875"> Maintaining each critical document provides a status surveillance and warning mechanism.</span></p>
            <p xml:space="preserve" id="p_001490"><strong id="strong_000463" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000463">10.8</strong><span class="text" id="span_000876" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000876"> Each document itself serves as a checklist and a database.</span></p>
            <p xml:space="preserve" id="p_001491"><strong id="strong_000464" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000464">10.9</strong><span class="text" id="span_000877" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000877"> The project manager's fundamental job is to keep everybody going in the same direction.</span></p>
            <p xml:space="preserve" id="p_001492"><strong id="strong_000465" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000465">10.10</strong><span class="text" id="span_000878" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000878"> The project manager's chief daily task is communication, not decision-making; the documents communicate the plans and decisions to the whole team.</span></p>
            <p xml:space="preserve" id="p_001493"><strong id="strong_000466" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000466">10.11</strong><span class="text" id="span_000879" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000879"> Only a small part of a technical project manager's time-- perhaps 20 percent--is spent on tasks where he needs information from outside his head.</span></p>
            <p xml:space="preserve" id="p_001494"><strong id="strong_000467" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000467">10.12</strong><span class="text" id="span_000880" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000880"> For this reason, the touted market concept of a "management total-information system" to support executives is not based on a valid model of executive behavior.</span></p>
          </level3>
          <level3 id="level3_000012">
            <h3 xml:space="preserve" id="p_001495"><strong id="strong_000468" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000468">Chapter 11. Plan to Throw One Away</strong></h3>
            <p xml:space="preserve" id="p_001496"><strong id="strong_000469" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000469">11.1</strong><span class="text" id="span_000881" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000881"> Chemical engineers have learned not to take a process from the lab bench to the factory in one step, but to build a </span><em id="em_000441" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000441">pilot plant </em><span class="text" id="span_000882" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000882">to give experience in scaling quantities up and operating in nonproductive environments.</span></p>
            <p xml:space="preserve" id="p_001497"><strong id="strong_000470" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000470">11.2</strong><span class="text" id="span_000883" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000883"> This intermediate step is equally necessary for programming products, but software engineers do not yet routinely field-test a pilot system before undertaking to deliver the real product. [This has now become common practice, with a beta version. This is not the same as a prototype with limited function, an alpha version, which I would also advocate.]</span></p>
            <p xml:space="preserve" id="p_001498"><strong id="strong_000471" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000471">11.3</strong><span class="text" id="span_000884" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000884"> For most projects, the first system built is barely usable: too slow, too big, too hard to use, or all three.</span></p>
            <pagenum page="normal" id="p241" smilref="The_Mythical_Man_Month_Essay00006.smil#p241">241</pagenum>
            <p xml:space="preserve" id="p_001499"><strong id="strong_000472" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000472">11.4</strong><span class="text" id="span_000885" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000885"> The discard and redesign may be done in one lump, or piece-by-piece, but </span><em id="em_000442" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000442">if</em> <em id="em_000443" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000443">will be done.</em></p>
            <p xml:space="preserve" id="p_001500"><strong id="strong_000473" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000473">11.5</strong><span class="text" id="span_000886" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000886"> Delivering the first system, the throwaway, to users will buy time, but only at the cost of agony for the user, distraction for the builders supporting it while they do the redesign, and a bad reputation for the product that will be hard to live down.</span></p>
            <p xml:space="preserve" id="p_001501"><strong id="strong_000474" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000474">11.6</strong><span class="text" id="span_000887" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000887"> Hence, </span><em id="em_000444" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000444">plan to throw one away; you will, anyhow.</em></p>
            <p xml:space="preserve" id="p_001502"><strong id="strong_000475" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000475">11.7</strong><span class="text" id="span_000888" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000888"> "The programmer delivers satisfaction of a user need rather than any tangible product." (Cosgrove)</span></p>
            <p xml:space="preserve" id="p_001503"><strong id="strong_000476" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000476">11.8</strong><span class="text" id="span_000889" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000889"> Both the actual need and the user's perception of that need will </span><em id="em_000445" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000445">change </em><span class="text" id="span_000890" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000890">as programs are built, tested, and used.</span></p>
            <p xml:space="preserve" id="p_001504"><strong id="strong_000477" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000477">11.9</strong><span class="text" id="span_000891" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000891"> The tractability and the invisibility of the software product expose its builders (exceptionally) to perpetual changes in requirements.</span></p>
            <p xml:space="preserve" id="p_001505"><strong id="strong_000478" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000478">11.10</strong><span class="text" id="span_000892" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000892"> Some valid changes in objectives (and in development strategies) are inevitable, and it is better to be prepared for them than to assume that they will not come.</span></p>
            <p xml:space="preserve" id="p_001506"><strong id="strong_000479" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000479">11.11</strong><span class="text" id="span_000893" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000893"> The techniques for planning a software product for change, especially structured programming with careful module interface documentation, are well known but not uniformly practiced. It also helps to use table-driven techniques wherever possible. [Modern memory costs and sizes make such techniques better and better.]</span></p>
            <p xml:space="preserve" id="p_001507"><strong id="strong_000480" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000480">11.12</strong><span class="text" id="span_000894" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000894"> Use high-level language, compile-time operations, incorporations of declarations by reference, and self-documenting techniques to reduce errors induced by change.</span></p>
            <p xml:space="preserve" id="p_001508"><strong id="strong_000481" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000481">11.13</strong><span class="text" id="span_000895" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000895"> Quantify changes into well-defined numbered versions. [Now standard practice.]</span></p>
            <p xml:space="preserve" id="p_001509"><strong id="strong_000482" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000482">Plan the Organization for Change</strong></p>
            <p xml:space="preserve" id="p_001510"><strong id="strong_000483" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000483">11.14</strong><span class="text" id="span_000896" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000896"> Programmer reluctance to document designs comes not so much from laziness as from the hesitancy to undertake defense of decisions that the designer knows are tentative. (Cosgrove)</span></p>
            <pagenum page="normal" id="p242" smilref="The_Mythical_Man_Month_Essay00006.smil#p242">242</pagenum>
            <p xml:space="preserve" id="p_001511"><strong id="strong_000484" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000484">11.15</strong><span class="text" id="span_000897" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000897"> Structuring an organization for change is much harder than designing a system for change.</span></p>
            <p xml:space="preserve" id="p_001512"><strong id="strong_000485" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000485">11.16</strong><span class="text" id="span_000898" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000898"> The project boss must work at keeping the managers and the technical people as interchangeable as their talents allow; in particular, one wants to be able to move people easily between technical and managerial roles.</span></p>
            <p xml:space="preserve" id="p_001513"><strong id="strong_000486" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000486">11.17 </strong><span class="text" id="span_000899" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000899">The barriers to effective dual-ladder organization are sociological, and they must be fought with constant vigilance and energy.</span></p>
            <p xml:space="preserve" id="p_001514"><strong id="strong_000487" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000487">11.18</strong><span class="text" id="span_000900" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000900"> It is easy to establish corresponding salary scales for the corresponding rungs on a dual ladder, but it requires strong proactive measures to give them corresponding prestige: equal offices, equal support services, over-compensating management actions.</span></p>
            <p xml:space="preserve" id="p_001515"><strong id="strong_000488" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000488">11.19</strong><span class="text" id="span_000901" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000901"> Organizing as a surgical team is a radical attack on all aspects of this problem. It is really the long-run answer to the problem of flexible organization.</span></p>
            <p xml:space="preserve" id="p_001516"><strong id="strong_000489" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000489">Two Steps Forward and One Step Back-- Program Maintenance</strong></p>
            <p xml:space="preserve" id="p_001517"><strong id="strong_000490" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000490">11.20</strong><span class="text" id="span_000902" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000902"> Program maintenance is fundamentally different from hardware maintenance; it consists chiefly of changes that repair design defects, add incremental function, or adapt to changes in the use environment or configuration.</span></p>
            <p xml:space="preserve" id="p_001518"><strong id="strong_000491" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000491">11.21</strong><span class="text" id="span_000903" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000903"> The total lifetime cost of maintaining a widely used program is typically 40 percent or more of the cost of developing it.</span></p>
            <p xml:space="preserve" id="p_001519"><strong id="strong_000492" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000492">11.22</strong><span class="text" id="span_000904" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000904"> Maintenance cost is strongly affected by the number of users. More users find more bugs.</span></p>
            <p xml:space="preserve" id="p_001520"><strong id="strong_000493" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000493">11.23</strong><span class="text" id="span_000905" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000905"> Campbell points out an interesting drop-and-climb curve in bugs per month over a product's life.</span></p>
            <p xml:space="preserve" id="p_001521"><strong id="strong_000494" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000494">11.24</strong><span class="text" id="span_000906" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000906"> Fixing a defect has a substantial (20 to 50 percent) chance of introducing another.</span></p>
            <p xml:space="preserve" id="p_001522"><strong id="strong_000495" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000495">11.25</strong><span class="text" id="span_000907" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000907"> After each fix, one must run the entire bank of test cases previously run against a system to ensure that it has not</span></p>
            <pagenum page="normal" id="p243" smilref="The_Mythical_Man_Month_Essay00006.smil#p243">243</pagenum>
            <p xml:space="preserve" id="p_001523" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001523">been damaged in an obscure way.</p>
            <p xml:space="preserve" id="p_001524"><strong id="strong_000496" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000496">11.26</strong><span class="text" id="span_000908" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000908"> Methods of designing programs so as to eliminate or at least illuminate side effects can have an immense payoff in maintenance costs.</span></p>
            <p xml:space="preserve" id="p_001525"><strong id="strong_000497" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000497">11.27</strong><span class="text" id="span_000909" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000909"> So can methods of implementing designs with fewer people, fewer interfaces, and fewer bugs.</span></p>
            <p xml:space="preserve" id="p_001526"><strong id="strong_000498" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000498">One Step Forward and One Step Back--System Entropy Rises over Lifetime</strong></p>
            <p xml:space="preserve" id="p_001527"><strong id="strong_000499" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000499">11.28</strong><span class="text" id="span_000910" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000910"> Lehman and Belady find that the total number of modules increases linearly with the release number of a large operating system (OS/360), but that the number of modules affected increases exponentially with the release number.</span></p>
            <p xml:space="preserve" id="p_001528"><strong id="strong_000500" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000500">11.29</strong><span class="text" id="span_000911" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000911"> All repairs tend to destroy structure, to increase the entropy and disorder of a system. Even the most skillful program maintenance only delays the program's subsidence into unfixable chaos, from which there has to be a ground-up redesign. [Many of the real needs for upgrading a program, such as performance, especially attack its internal structural boundaries. Often the original boundaries occasioned the deficiencies that surface later.]</span></p>
          </level3>
          <level3 id="level3_000013">
            <h3 xml:space="preserve" id="p_001529"><strong id="strong_000501" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000501">Chapter 12. Sharp Tools</strong></h3>
            <p xml:space="preserve" id="p_001530"><strong id="strong_000502" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000502">12.1</strong><span class="text" id="span_000912" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000912"> The manager of a project needs to establish a philosophy and set aside resources for the building of common tools, and at the same time to recognize the need for personalized tools.</span></p>
            <p xml:space="preserve" id="p_001531"><strong id="strong_000503" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000503">12.2</strong><span class="text" id="span_000913" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000913"> Teams building operating systems need a target machine of their own on which to debug; it needs maximum memory rather than maximum speed, and a system programmer to keep the standard software current and serviceable.</span></p>
            <p xml:space="preserve" id="p_001532"><strong id="strong_000504" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000504">12.3</strong><span class="text" id="span_000914" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000914"> The debugging machine, or its software, also needs to be instrumented, so that counts and measurements of all</span></p>
            <pagenum page="normal" id="p244" smilref="The_Mythical_Man_Month_Essay00006.smil#p244">244</pagenum>
            <p xml:space="preserve" id="p_001533" smilref="The_Mythical_Man_Month_Essay00006.smil#p_001533">kinds of program parameters can be automatically made.</p>
            <p xml:space="preserve" id="p_001534"><strong id="strong_000505" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000505">12.4</strong><span class="text" id="span_000915" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000915"> The requirement for target machine use has a peculiar growth curve: low activity followed by explosive growth, then leveling off.</span></p>
            <p xml:space="preserve" id="p_001535"><strong id="strong_000506" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000506">12.5</strong><span class="text" id="span_000916" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000916"> System debugging, like astronomy, has always been done chiefly at night.</span></p>
            <p xml:space="preserve" id="p_001536"><strong id="strong_000507" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000507">12.6</strong><span class="text" id="span_000917" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000917"> Allocating substantial blocks of target machine time to one subteam at a time proved the best way to schedule, much better than interleaving subteam use, despite theory.</span></p>
            <p xml:space="preserve" id="p_001537"><strong id="strong_000508" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000508">12.7</strong><span class="text" id="span_000918" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000918"> This preferred method of scheduling scarce computers by blocks has survived 20 years [in 1975] of technology change because it is most productive. [It still is, in 1995.]</span></p>
            <p xml:space="preserve" id="p_001538"><strong id="strong_000509" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000509">12.8</strong><span class="text" id="span_000919" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000919"> If a target computer is new, one needs a logical simulator for it. One gets it </span><em id="em_000446" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000446">sooner, </em><span class="text" id="span_000920" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000920">and it provides a </span><em id="em_000447" smilref="The_Mythical_Man_Month_Essay00006.smil#em_000447">dependable </em><span class="text" id="span_000921" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000921">debugging vehicle even after one has a real machine.</span></p>
            <p xml:space="preserve" id="p_001539"><strong id="strong_000510" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000510">12.9</strong><span class="text" id="span_000922" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000922"> A master program library should be divided into (1) a set of individual playpens, (2) a system integration sublibrary, currently under system test, and (3) a released version. Formal separation and progression gives control.</span></p>
            <p xml:space="preserve" id="p_001540"><strong id="strong_000511" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000511">12.10</strong><span class="text" id="span_000923" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000923"> The tool that save the most labor in a grogramming project is probably a text-editing system.</span></p>
            <p xml:space="preserve" id="p_001541"><strong id="strong_000512" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000512">12.11</strong><span class="text" id="span_000924" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000924"> Voluminosity in system documentation does indeed introduce a new kind of incomprehensibility [see Unix, for example], but it is far preferable to the severe underdocumentation that is so common.</span></p>
            <p xml:space="preserve" id="p_001542"><strong id="strong_000513" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000513">12.12</strong><span class="text" id="span_000925" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000925"> Build a performance simulator, outside in, top down. Start it very early. Listen when it speaks.</span></p>
            <p xml:space="preserve" id="p_001543"><strong id="strong_000514" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000514">High-Level Language</strong></p>
            <p xml:space="preserve" id="p_001544"><strong id="strong_000515" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000515">12.13</strong><span class="text" id="span_000926" smilref="The_Mythical_Man_Month_Essay00006.smil#span_000926"> Only sloth and inertia prevent the universal adoption of high-level language and interactive programming. [And today they have been adopted universally.]</span></p>
            <p xml:space="preserve" id="p_001545"><strong id="strong_000516" smilref="The_Mythical_Man_Month_Essay00006.smil#strong_000516">12.14</strong><span class="text" id="span_000927" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000927"> High-level language improves not only productivity but also debugging; fewer bugs and easier to find.</span></p>
            <p xml:space="preserve" id="p_001546"><strong id="strong_000517" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000517">12.15</strong><span class="text" id="span_000928" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000928"> The classical objections of function, object-code space,</span></p>
            <pagenum page="normal" id="p245" smilref="The_Mythical_Man_Month_Essay00007.smil#p245">245</pagenum>
            <p xml:space="preserve" id="p_001547" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001547">and object-code speed have been made obsolete by the advance of language and compiler technology.</p>
            <p xml:space="preserve" id="p_001548"><strong id="strong_000518" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000518">12.16</strong><span class="text" id="span_000929" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000929"> The only reasonable candidate for system programming today is PL/I. [No longer true.]</span></p>
            <p xml:space="preserve" id="p_001549"><strong id="strong_000519" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000519">Interactive Programming</strong></p>
            <p xml:space="preserve" id="p_001550"><strong id="strong_000520" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000520">12.17</strong><span class="text" id="span_000930" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000930"> Interactive systems will never displace batch systems for some applications. [Still true.]</span></p>
            <p xml:space="preserve" id="p_001551"><strong id="strong_000521" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000521">12.18</strong><span class="text" id="span_000931" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000931"> Debugging is the hard and slow part of system programming, and slow turnaround is the bane of debugging.</span></p>
            <p xml:space="preserve" id="p_001552"><strong id="strong_000522" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000522">12.19</strong><span class="text" id="span_000932" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000932"> Limited evidence shows that interactive programming at least doubles productivity in system programming.</span></p>
          </level3>
          <level3 id="level3_000014">
            <h3 xml:space="preserve" id="p_001553"><strong id="strong_000523" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000523">Chapter 13. The Whole and the Parts</strong></h3>
            <p xml:space="preserve" id="p_001554"><strong id="strong_000524" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000524">13.1 </strong><span class="text" id="span_000933" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000933">The detailed, painstaking architectural effort implied in Chapters 4, 5, and 6 not only makes a product easier to use, it makes it easier to build and reduces the number of system bugs that have to be found.</span></p>
            <p xml:space="preserve" id="p_001555"><strong id="strong_000525" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000525">13.2</strong><span class="text" id="span_000934" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000934"> Vyssotsky says "Many, many failures concern exactly those aspects that were never quite specified."</span></p>
            <p xml:space="preserve" id="p_001556"><strong id="strong_000526" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000526">13.3</strong><span class="text" id="span_000935" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000935"> Long before any code itself, the specification must be handed to an outside testing group to be scrutinized for completeness and clarity. The developers themselves cannot do this. (Vyssotsky)</span></p>
            <p xml:space="preserve" id="p_001557"><strong id="strong_000527" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000527">13.4</strong><span class="text" id="span_000936" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000936"> "Wirth's top-down design [by stepwise refinement] is the most important new programming formalization of the [1965-1975] decade."</span></p>
            <p xml:space="preserve" id="p_001558"><strong id="strong_000528" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000528">13.5</strong><span class="text" id="span_000937" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000937"> Wirth advocates using as high-level a notation as possible on each step.</span></p>
            <p xml:space="preserve" id="p_001559"><strong id="strong_000529" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000529">13.6</strong><span class="text" id="span_000938" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000938"> A good top-down design avoids bugs in four ways.</span></p>
            <p xml:space="preserve" id="p_001560"><strong id="strong_000530" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000530">13.7</strong><span class="text" id="span_000939" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000939"> Sometimes one has to go back, scrap a high level, and start over.</span></p>
            <p xml:space="preserve" id="p_001561"><strong id="strong_000531" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000531">13.8</strong><span class="text" id="span_000940" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000940"> Structured programming, designing programs whose control structures consist only of a specified set that govern blocks of code (versus miscellaneous branching), is a</span></p>
            <pagenum page="normal" id="p246" smilref="The_Mythical_Man_Month_Essay00007.smil#p246">246</pagenum>
            <p xml:space="preserve" id="p_001562" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001562">sound way to avoid bugs and is the right way to think.</p>
            <p xml:space="preserve" id="p_001563"><strong id="strong_000532" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000532">13.9</strong><span class="text" id="span_000941" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000941"> Gold's experimental results show three times as much progress is made in the first interaction of an interactive debugging session as on subsequent interactions. It still pays to plan debugging carefully before signing on. [I think it </span><em id="em_000448" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000448">still </em><span class="text" id="span_000942" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000942">does, in 1995.]</span></p>
            <p xml:space="preserve" id="p_001564"><strong id="strong_000533" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000533">13.10</strong><span class="text" id="span_000943" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000943"> I find that proper use of a good [quick response interactive debugging] system requires two hours at the desk for each two-hour session on the machine: one hour in sweeping up and documenting after the session and one in planning changes and tests for the next time.</span></p>
            <p xml:space="preserve" id="p_001565"><strong id="strong_000534" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000534">13.11</strong><span class="text" id="span_000944" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000944"> System debugging (in contrast to component debugging) will take longer than one expects.</span></p>
            <p xml:space="preserve" id="p_001566"><strong id="strong_000535" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000535">13.12</strong><span class="text" id="span_000945" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000945"> The difficulty of system debugging justifies a thoroughly systematic and planned approach.</span></p>
            <p xml:space="preserve" id="p_001567"><strong id="strong_000536" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000536">13.13</strong><span class="text" id="span_000946" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000946"> One should begin system debugging only after the pieces seem to work (versus-bolt-it-together-and-try in order to smoke out the interface bugs; and versus starting system debugging when the component bugs are fully known but not fixed.) [This is especially true for teams.]</span></p>
            <p xml:space="preserve" id="p_001568"><strong id="strong_000537" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000537">13.14</strong><span class="text" id="span_000947" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000947"> It is worthwhile to build lots of debugging scaffolding and test code, perhaps even 50 percent as much as the product being debugged.</span></p>
            <p xml:space="preserve" id="p_001569"><strong id="strong_000538" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000538">13.15</strong><span class="text" id="span_000948" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000948"> One must control and document changes and versions, with team members working in playpen copies.</span></p>
            <p xml:space="preserve" id="p_001570"><strong id="strong_000539" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000539">13.16</strong><span class="text" id="span_000949" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000949"> Add one component at a time during system debugging.</span></p>
            <p xml:space="preserve" id="p_001571"><strong id="strong_000540" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000540">13.17</strong><span class="text" id="span_000950" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000950"> Lehman and Belady offer evidence the change quanta should be large and infrequent or else very small and frequent. The latter is more subject to instability. [A Microsoft team makes small frequent quanta work. The growing system is rebuilt every night.]</span></p>
          </level3>
          <level3 id="level3_000015">
            <h3 xml:space="preserve" id="p_001572"><strong id="strong_000541" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000541">Chapter 14. Hatching a Catastrophe</strong></h3>
            <p xml:space="preserve" id="p_001573"><strong id="strong_000542" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000542">14.1</strong><span class="text" id="span_000951" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000951"> "How does a project get to be a year late? ... One day at a time."</span></p>
            <pagenum page="normal" id="p247" smilref="The_Mythical_Man_Month_Essay00007.smil#p247">247</pagenum>
            <p xml:space="preserve" id="p_001574"><strong id="strong_000543" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000543">14.2</strong><span class="text" id="span_000952" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000952"> Day-by-day schedule slippage is harder to recognize, harder to prevent, and harder to make up than calamities.</span></p>
            <p xml:space="preserve" id="p_001575"><strong id="strong_000544" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000544">14.3</strong><span class="text" id="span_000953" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000953"> The first step in controlling a big project on a tight schedule is to </span><em id="em_000449" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000449">have </em><span class="text" id="span_000954" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000954">a schedule, made up of milestones and dates for them.</span></p>
            <p xml:space="preserve" id="p_001576"><strong id="strong_000545" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000545">14.4</strong><span class="text" id="span_000955" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000955"> Milestones must be concrete, specific, measurable events defined with knife-edge sharpness.</span></p>
            <p xml:space="preserve" id="p_001577"><strong id="strong_000546" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000546">14.5</strong><span class="text" id="span_000956" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000956"> A programmer will rarely lie about milestone progress, if the milestone is so sharp he can't deceive himself.</span></p>
            <p xml:space="preserve" id="p_001578"><strong id="strong_000547" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000547">14.6</strong><span class="text" id="span_000957" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000957"> Studies of estimating behavior by government contractors on large projects show that activity time estimates revised carefully every two weeks do not significantly change as the start time approaches, that during the activity overestimates come steadily down; and that </span><em id="em_000450" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000450">under</em><span class="text" id="span_000958" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000958">estimates do not change until about three weeks before scheduled completion.</span></p>
            <p xml:space="preserve" id="p_001579"><strong id="strong_000548" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000548">14.7</strong><span class="text" id="span_000959" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000959"> Chronic schedule slippage is a morale-killer. [Jim McCarthy of Microsoft says, "If you miss one deadline, make sure you make the next one."</span><sup id="sup_000119" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000119">2</sup><span class="text" id="span_000960" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000960">]</span></p>
            <p xml:space="preserve" id="p_001580"><strong id="strong_000549" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000549">14.8</strong> <em id="em_000451" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000451">Hustle </em><span class="text" id="span_000961" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000961">is essential for great programming teams, just as for great baseball teams.</span></p>
            <p xml:space="preserve" id="p_001581"><strong id="strong_000550" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000550">14.9</strong><span class="text" id="span_000962" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000962"> There is no substitute for a critical-path schedule to enable one to tell which slips matter how much.</span></p>
            <p xml:space="preserve" id="p_001582"><strong id="strong_000551" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000551">14.10</strong><span class="text" id="span_000963" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000963"> The preparation of a critical-path chart is the most valuable part of its use, since laying out the network, identifying the dependencies, and estimating the segments force a great deal of very specific planning very early in a project.</span></p>
            <p xml:space="preserve" id="p_001583"><strong id="strong_000552" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000552">14.11 </strong><span class="text" id="span_000964" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000964">The first chart is always terrible, and one invents and invents in making the next one.</span></p>
            <p xml:space="preserve" id="p_001584"><strong id="strong_000553" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000553">14.12</strong><span class="text" id="span_000965" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000965"> A critical path chart answers the demoralizing excuse, "The other piece is late, anyhow."</span></p>
            <p xml:space="preserve" id="p_001585"><strong id="strong_000554" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000554">14.13</strong><span class="text" id="span_000966" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000966"> Every boss needs both exception information that requires action and a status picture for education and distant early warning.</span></p>
            <p xml:space="preserve" id="p_001586"><strong id="strong_000555" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000555">14.14</strong><span class="text" id="span_000967" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000967"> Getting the status is hard, since subordinate managers</span></p>
            <pagenum page="normal" id="p248" smilref="The_Mythical_Man_Month_Essay00007.smil#p248">248</pagenum>
            <p xml:space="preserve" id="p_001587" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001587">have every reason not to share it.</p>
            <p xml:space="preserve" id="p_001588"><strong id="strong_000556" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000556">14.15</strong><span class="text" id="span_000968" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000968"> By bad action, a boss can guarantee to squelch full status disclosure; conversely, carefully separating status reports and accepting them without panic or preemption will encourage honest reporting.</span></p>
            <p xml:space="preserve" id="p_001589"><strong id="strong_000557" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000557">14.16</strong><span class="text" id="span_000969" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000969"> One must have review techniques by which true status becomes known to all players. For this purpose a milestone schedule and completion document is the key.</span></p>
            <p xml:space="preserve" id="p_001590"><strong id="strong_000558" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000558">14.17</strong><span class="text" id="span_000970" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000970"> Vyssotsky: "I have found it handy to carry both 'scheduled' (boss's dates) and 'estimated' (lowest-level manager's dates) dates in the milestone report. The project manager has to keep his fingers off the estimated dates."</span></p>
            <p xml:space="preserve" id="p_001591"><strong id="strong_000559" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000559">14.18</strong><span class="text" id="span_000971" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000971"> A small </span><em id="em_000452" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000452">Plans and Controls </em><span class="text" id="span_000972" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000972">team that maintains the milestone report is invaluable for a large project.</span></p>
          </level3>
          <level3 id="level3_000016">
            <h3 xml:space="preserve" id="p_001592"><strong id="strong_000560" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000560">Chapter 15. The Other Face</strong></h3>
            <p xml:space="preserve" id="p_001593"><strong id="strong_000561" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000561">15.1</strong><span class="text" id="span_000973" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000973"> For the program product, the other face to the user, the documentation, is fully as important as the face to the machine.</span></p>
            <p xml:space="preserve" id="p_001594"><strong id="strong_000562" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000562">15.2</strong><span class="text" id="span_000974" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000974"> Even for the most private of programs, prose documentation is necessary, for memory will fail the user-author.</span></p>
            <p xml:space="preserve" id="p_001595"><strong id="strong_000563" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000563">15.3</strong><span class="text" id="span_000975" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000975"> Teachers and managers have by and large failed to instill in programmers an attitude about documentation that will inspire for a lifetime, overcoming sloth and schedule pressure.</span></p>
            <p xml:space="preserve" id="p_001596"><strong id="strong_000564" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000564">15.4</strong><span class="text" id="span_000976" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000976"> This failure is not due so much to lack of zeal or eloquence as to a failure to show </span><em id="em_000453" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000453">how </em><span class="text" id="span_000977" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000977">to document effectively and economically.</span></p>
            <p xml:space="preserve" id="p_001597"><strong id="strong_000565" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000565">15.5</strong><span class="text" id="span_000978" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000978"> Most documentation fails in giving too little </span><em id="em_000454" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000454">overview. </em><span class="text" id="span_000979" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000979">Stand way back and zoom in slowly.</span></p>
            <p xml:space="preserve" id="p_001598"><strong id="strong_000566" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000566">15.6</strong><span class="text" id="span_000980" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000980"> The critical user documentation should be drafted before the program is built, for it embodies basic planning decisions. It should describe nine things (see the chapter).</span></p>
            <p xml:space="preserve" id="p_001599"><strong id="strong_000567" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000567">15.7</strong><span class="text" id="span_000981" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000981"> A program should be shipped with a few test cases, some</span></p>
            <pagenum page="normal" id="p249" smilref="The_Mythical_Man_Month_Essay00007.smil#p249">249</pagenum>
            <p xml:space="preserve" id="p_001600" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001600">for valid input data, some for borderline input data, and some for clearly invalid input data.</p>
            <p xml:space="preserve" id="p_001601"><strong id="strong_000568" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000568">15.8</strong><span class="text" id="span_000982" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000982"> Documentation of program internals, for the person who must modify it, also demands a prose overview, which should contain five kinds of things (see the chapter).</span></p>
            <p xml:space="preserve" id="p_001602"><strong id="strong_000569" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000569">15.9</strong><span class="text" id="span_000983" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000983"> The flow chart is a most thoroughly oversold piece of program documentation; the detailed blow-by-blow flow chart is a nuisance, obsoleted by </span><em id="em_000455" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000455">written </em><span class="text" id="span_000984" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000984">high-level languages. (A flow chart is a </span><em id="em_000456" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000456">diagrammed </em><span class="text" id="span_000985" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000985">high-level language.)</span></p>
            <p xml:space="preserve" id="p_001603"><strong id="strong_000570" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000570">15.10</strong><span class="text" id="span_000986" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000986"> Few programs need more than a one-page flow chart, if that. [MILSPEC documentation requirements are really wrong on this point.]</span></p>
            <p xml:space="preserve" id="p_001604"><strong id="strong_000571" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000571">15.11</strong><span class="text" id="span_000987" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000987"> One does indeed need a program structure graph, which does not need the ANSI flow-charting standards.</span></p>
            <p xml:space="preserve" id="p_001605"><strong id="strong_000572" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000572">15.12</strong><span class="text" id="span_000988" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000988"> To keep documentation maintained, it is crucial that it be incorporated in the source program, rather than kept as a separate document.</span></p>
            <p xml:space="preserve" id="p_001606"><strong id="strong_000573" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000573">15.13</strong><span class="text" id="span_000989" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000989"> Three notions are key to minimizing the documentation burden:</span></p>
            <p xml:space="preserve" id="p_001607" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001607">* Use parts of the program that have to be there anyway, such as names and declarations, to carry as much of the documentation as possible.</p>
            <p xml:space="preserve" id="p_001608" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001608">* Use space and format to show subordination and nesting and to improve readability.</p>
            <p xml:space="preserve" id="p_001609" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001609">* Insert the necessary prose documentation into the program as paragraphs of comment, especially as module headers.</p>
            <p xml:space="preserve" id="p_001610"><strong id="strong_000574" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000574">15.14</strong><span class="text" id="span_000990" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000990"> In documentation for use by program modifiers, tell </span><em id="em_000457" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000457">why </em><span class="text" id="span_000991" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000991">things are like they are, rather than merely how they are. </span><em id="em_000458" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000458">Purpose </em><span class="text" id="span_000992" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000992">is the key to understanding; even high-level language syntax does not at all convey purpose.</span></p>
            <p xml:space="preserve" id="p_001611"><strong id="strong_000575" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000575">15.15</strong><span class="text" id="span_000993" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000993"> Self-documenting programming techniques find their greatest use and power in high-level languages used with on-line systems, which are the tools one </span><em id="em_000459" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000459">should </em><span class="text" id="span_000994" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000994">be using.</span></p>
            <pagenum page="normal" id="p250" smilref="The_Mythical_Man_Month_Essay00007.smil#p250">250</pagenum>
            <p xml:space="preserve" id="p_001612"><strong id="strong_000576" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000576">Original Epilogue</strong></p>
            <p xml:space="preserve" id="p_001613"><strong id="strong_000577" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000577">E.1</strong><span class="text" id="span_000995" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000995"> Software systems are perhaps the most intricate and complex (in terms of number of distinct kinds of parts) of the things humanity makes.</span></p>
            <p xml:space="preserve" id="p_001614"><strong id="strong_000578" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000578">E.2</strong><span class="text" id="span_000996" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000996"> The tar pit of software engineering will continue to be sticky for a long time to come.</span></p>
            <pagenum page="normal" id="p251" smilref="The_Mythical_Man_Month_Essay00007.smil#p251">251</pagenum>
            <p xml:space="preserve" id="p_001615"><strong id="strong_000579" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000579">The Mythical Man-Month </strong><em id="em_000460" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000460">after 20 Years</em></p>
            <pagenum page="normal" id="p252" smilref="The_Mythical_Man_Month_Essay00007.smil#p252">252</pagenum>
            <p xml:space="preserve" id="p_001616" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001616">[Image: Fish jumping on the water surface.]</p>
            <pagenum page="normal" id="p253" smilref="The_Mythical_Man_Month_Essay00007.smil#p253">253</pagenum>
          </level3>
        </level2>
        <level2 id="level2_000022">
          <h2 xml:space="preserve" id="h2_000022"><strong id="strong_000580" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000580">The Mythical Man-Month </strong><em id="em_000461" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000461">after 20 Years</em></h2>
          <p xml:space="preserve" id="p_001617"><em id="em_000462" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000462">I know no way of judging the future but by the past.</em></p>
          <p xml:space="preserve" id="p_001618"><em id="em_000463" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000463">PATRICK HENRY</em></p>
          <p xml:space="preserve" id="p_001619"><em id="em_000464" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000464">You can never plan the future by the past.</em></p>
          <p xml:space="preserve" id="p_001620"><em id="em_000465" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000465">EDMUND BURKE</em></p>
          <p xml:space="preserve" id="p_001621" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001621">Shooting the Rapids</p>
          <p xml:space="preserve" id="p_001622" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001622">The Bettman Archive</p>
          <p xml:space="preserve" id="p_001623"><strong id="strong_000581" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000581">253</strong></p>
          <pagenum page="normal" id="p254" smilref="The_Mythical_Man_Month_Essay00007.smil#p254">254</pagenum>
          <p xml:space="preserve" id="p_001624"><strong id="strong_000582" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000582">Why Is There a Twentieth Anniversary Edition?</strong></p>
          <p xml:space="preserve" id="p_001625"><span class="text" id="span_000997" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000997">The plane droned through the night toward LaGuardia. Clouds and darkness veiled all interesting sights. The document I was studying was pedestrian. I was not, however, bored. The stranger sitting next to me was reading </span><em id="em_000466" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000466">The Mythical Man-Month, </em><span class="text" id="span_000998" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000998">and I was waiting to see if by word or sign he would react. Finally as we taxied toward the gate, I could wait no longer:</span></p>
          <p xml:space="preserve" id="p_001626" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001626">"How is that book? Do you recommend it?"</p>
          <p xml:space="preserve" id="p_001627" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001627">"Hmph! Nothing in it I didn't know already." I decided not to introduce myself.</p>
          <p xml:space="preserve" id="p_001628"><span class="text" id="span_000999" smilref="The_Mythical_Man_Month_Essay00007.smil#span_000999">Why has </span><em id="em_000467" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000467">The Mythical Man-Month </em><span class="text" id="span_001000" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001000">persisted? Why is it still seen to be relevant to software practice today? Why does it have a readership outside the software engineering community, generating reviews, citations, and correspondence from lawyers, doctors, psychologists, sociologists, as well as from software people? How can a book written 20 years ago about a software-building experience 30 years ago still be relevant, much less useful?</span></p>
          <p xml:space="preserve" id="p_001629" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001629">One explanation sometimes heard is that the software development discipline has not advanced normally or properly. This view is often supported by contrasting computer software development productivity with computer hardware manufacturing productivity, which has multiplied at least a thousandfold over the two decades. As Chapter 16 explains, the anomaly is not that software has been so slow in its progress but rather that computer technology has exploded in a fashion unmatched in human history. By and large this comes from the gradual transition of computer manufacturing from an assembly industry to a process industry, from labor-intensive to capital-intensive manufacturing. Hardware and software development, in contrast to manufacturing, remain inherently labor-intensive.</p>
          <p xml:space="preserve" id="p_001630"><span class="text" id="span_001001" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001001">A second explanation often advanced is that </span><em id="em_000468" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000468">The Mythical Man-Month </em><span class="text" id="span_001002" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001002">is only incidentally about software but primarily about how people in teams make things. There is surely some truth in this; the preface to the 1975 edition says that managing</span></p>
          <pagenum page="normal" id="p255" smilref="The_Mythical_Man_Month_Essay00007.smil#p255">255</pagenum>
          <p xml:space="preserve" id="p_001631"><span class="text" id="span_001003" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001003">a software project is more like other management than most programmers initially believe. I still believe that to be true. Human history is a drama in which the stories stay the same, the scripts of those stories change slowly with evolving cultures, and the stage settings change all the time. So it is that we see our twentieth-century selves mirrored in Shakespeare, Homer, and the Bible. So to the extent </span><em id="em_000469" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000469">The MM-M </em><span class="text" id="span_001004" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001004">is about people and teams, obsolescence should be slow.</span></p>
          <p xml:space="preserve" id="p_001632" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001632">Whatever the reason, readers continue to buy the book, and they continue to send me much-appreciated comments. Nowadays I am often asked, "What do you now think was wrong when written? What is now obsolete? What is really new in the software engineering world?" These quite distinct questions are all fair, and I shall address them as best I can. Not in that order, however, but in clusters of topics. First, let us consider what was right when written, and still is.</p>
          <p xml:space="preserve" id="p_001633"><strong id="strong_000583" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000583">The Central Argument: Conceptual Integrity and the Architect</strong></p>
          <p xml:space="preserve" id="p_001634"><strong id="strong_000584" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000584">Conceptual integrity. </strong><span class="text" id="span_001005" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001005">A clean, elegant programming product must present to each of its users a coherent mental model of the application, of strategies for doing the application, and of the user-interface tactics to be used in specifying actions and parameters. The conceptual integrity of the product, as perceived by the user, is the most important factor in ease of use. (There are other factors, of course. The Macintosh's uniformity of user interface across all applications is an important example. Moreover, it is possible to construct coherent interfaces that are nevertheless quite awkward. Consider MS-DOS.)</span></p>
          <p xml:space="preserve" id="p_001635" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001635">There are many examples of elegant software products designed by a single mind, or by a pair. Most purely intellectual works such as books or musical compositions are so produced. Product-development processes in many industries cannot, however, afford this straightforward approach to conceptual integrity. Competitive pressures force urgency; in many modern</p>
          <pagenum page="normal" id="p256" smilref="The_Mythical_Man_Month_Essay00007.smil#p256">256</pagenum>
          <p xml:space="preserve" id="p_001636" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001636">technologies the end product is quite complex, and the design inherently requires many man-months of effort. Software products are both complex and fiercely competitive in schedule.</p>
          <p xml:space="preserve" id="p_001637"><span class="text" id="span_001006" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001006">Any product that is sufficiently big or urgent to require the effort of many minds thus encounters a peculiar difficulty: the result must be conceptually coherent to the single mind of the user and at the same time designed by many minds. How does one organize design efforts so as to achieve such conceptual integrity? This is the central question addressed by </span><em id="em_000470" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000470">The MM-M. </em><span class="text" id="span_001007" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001007">One of its theses is that managing large programming projects is qualitatively different from managing small ones, just because of the number of minds involved. Deliberate, and even heroic, management actions are necessary to achieve coherence.</span></p>
          <p xml:space="preserve" id="p_001638"><strong id="strong_000585" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000585">The architect. </strong><span class="text" id="span_001008" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001008">I argue in Chapters 4 through 7 that the most important action is the commissioning of some one mind to be the product's </span><em id="em_000471" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000471">architect, </em><span class="text" id="span_001009" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001009">who is responsible for the conceptual integrity of all aspects of the product perceivable by the user. The architect forms and owns the public mental model of the product that will be used to explain its use to the user. This includes the detailed specification of all of its function and the means for invoking and controlling it. The architect is also the user's agent, knowledgeably representing the user's interest in the inevitable tradeoffs among function, performance, size, cost, and schedule. This role is a full-time job, and only on the smallest teams can it be combined with that of the team manager. The architect is like the director and the manager like the producer of a motion picture.</span></p>
          <p xml:space="preserve" id="p_001639"><strong id="strong_000586" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000586">Separation of architecture from implementation and realization. </strong><span class="text" id="span_001010" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001010">To make the architect's crucial task even conceivable, it is necessary to separate the architecture, the definition of the product as perceivable by the user, from its implementation. Architecture versus implementation defines a clean boundary between parts of the design task, and there is plenty of work on each side of it.</span></p>
          <pagenum page="normal" id="p257" smilref="The_Mythical_Man_Month_Essay00007.smil#p257">257</pagenum>
          <p xml:space="preserve" id="p_001640"><strong id="strong_000587" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000587">Recursion of architects. </strong><span class="text" id="span_001011" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001011">For quite large products, one mind cannot do all of the architecture, even after all implementation concerns have been split off. So it is necessary for the system master architect to partition the system into subsystems. The subsystem boundaries must be at those places where interfaces between the subsystems are minimal and easiest to define rigorously. Then each piece will have its own architect, who must report to the system master architect with respect to the architecture. Clearly this process can proceed recursively as required.</span></p>
          <p xml:space="preserve" id="p_001641"><strong id="strong_000588" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000588">Today I am more convinced than ever. </strong><span class="text" id="span_001012" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001012">Conceptual integrity </span><em id="em_000472" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000472">is </em><span class="text" id="span_001013" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001013">central to product quality. Having a system architect </span><em id="em_000473" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000473">is </em><span class="text" id="span_001014" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001014">the most important single step toward conceptual integrity. These principles are by no means limited to software systems, but to the design of any complex construct, whether a computer, an airplane, a Strategic Defense Initiative, a Global Positioning System. After teaching a software engineering laboratory more than 20 times, I came to insist that student teams as small as four people choose a manager and a separate architect. Defining distinct roles in such small teams may be a little extreme, but I have observed it to work well and to contribute to design success even for small teams.</span></p>
          <p xml:space="preserve" id="p_001642"><strong id="strong_000589" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000589">The Second-System Effect: Featuritis and Frequency-Guessing</strong></p>
          <p xml:space="preserve" id="p_001643"><strong id="strong_000590" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000590">Designing for large user sets. </strong><span class="text" id="span_001015" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001015">One of the consequences of the personal computer revolution is that increasingly, at least in the business data processing community, off-the-shelf packages are replacing custom applications. Moreover, standard software packages sell hundreds of thousands of copies, or even millions. System architects for machine-vendor-supplied software have always had to design for a large, amorphous user set rather than for a single, definable application in one company. Many, many system architects now face this task.</span></p>
          <p xml:space="preserve" id="p_001644" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001644">Paradoxically, it is much more difficult to design a general-</p>
          <pagenum page="normal" id="p258" smilref="The_Mythical_Man_Month_Essay00007.smil#p258">258</pagenum>
          <p xml:space="preserve" id="p_001645" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001645">purpose tool than it is to design a special-purpose tool, precisely because one has to assign weights to the differing needs of the diverse users.</p>
          <p xml:space="preserve" id="p_001646"><strong id="strong_000591" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000591">Featuritis. </strong><span class="text" id="span_001016" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001016">The besetting temptation for the architect of a general purpose tool such as a spreadsheet or a word processor is to overload the product with features of marginal utility, at the expense of performance and even of ease of use. The appeal of proposed features is evident at the outset; the performance penalty is evident only as system testing proceeds. The loss of ease of use sneaks up insidiously, as features are added in little increments, and the manuals wax fatter and fatter.</span><sup id="sup_000120" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000120">1</sup></p>
          <p xml:space="preserve" id="p_001647"><span class="text" id="span_001017" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001017">For mass-market products that survive and evolve through many generations, the temptation is especially strong. Millions of customers request hundreds of features; any request is itself evidence that "the market demands it." Frequently, the original system architect has gone on to greater glories, and the architecture is in the hands of people with less experience at representing the user's overall interest in balance. A recent review of Microsoft Word 6.0 says "Word 6.0 packs in features; update slowed by baggage.... Word 6.0 is also big and slow." It notes with dismay that Word 6.0 requires 4 MB of RAM, and goes on to say that the rich added function means that "even a Macintosh IIfx [is] just barely up to the Word 6 task".</span><sup id="sup_000121" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000121">2</sup></p>
          <p xml:space="preserve" id="p_001648"><strong id="strong_000592" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000592">Defining the user set. </strong><span class="text" id="span_001018" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001018">The larger and more amorphous the user set, the more necessary it is to define it explicitly if one is to achieve conceptual integrity. Each member of the design team will surely have an implicit mental image of the users, and each designer's image will be different. Since an architect's image of the user consciously or subconsciously affects every architectural decision, it is essential for a design team to arrive at a single shared image. And that requires writing down the attributes of the expected user set, including:</span></p>
          <p xml:space="preserve" id="p_001649" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001649">* Who they are</p>
          <p xml:space="preserve" id="p_001650" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001650">* What they need</p>
          <pagenum page="normal" id="p259" smilref="The_Mythical_Man_Month_Essay00007.smil#p259">259</pagenum>
          <p xml:space="preserve" id="p_001651" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001651">* What they think they need</p>
          <p xml:space="preserve" id="p_001652" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001652">* What they want</p>
          <p xml:space="preserve" id="p_001653"><strong id="strong_000593" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000593">Frequencies. </strong><span class="text" id="span_001019" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001019">For any software product, any of the attributes of the user set is in fact a distribution, with many possible values, each with its own frequency. How is the architect to arrive at these frequencies? Surveying this ill-defined population is a dubious and costly proposition.</span><sup id="sup_000122" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000122">3</sup><span class="text" id="span_001020" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001020"> Over the years I have become convinced that an architect should </span><em id="em_000474" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000474">guess, </em><span class="text" id="span_001021" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001021">or, if you prefer, </span><em id="em_000475" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000475">postulate, </em><span class="text" id="span_001022" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001022">a complete set of attributes and values with their frequencies, in order to develop a complete, explicit, and shared description of the user set.</span></p>
          <p xml:space="preserve" id="p_001654"><span class="text" id="span_001023" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001023">Many benefits flow from this unlikely procedure. First, the process of carefully guessing the frequencies will cause the architect to think very carefully about the expected user set. Second, writing the frequencies down will subject them to debate, which will illuminate all the participants and bring to the surface the differences in the user images that the several designers carry. Third, enumerating the frequencies explicitly helps everyone recognize which decisions depend upon which user set properties. Even this sort of informal sensitivity analysis is valuable. When it develops that very important decisions are hinging on some particular guess, then it is worth the cost to establish better estimates for that value. (The gIBIS system developed by Jeff Conklin provides a tool for formally and accurately tracking design decisions and documenting the reasons for each.</span><sup id="sup_000123" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000123">4</sup><span class="text" id="span_001024" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001024"> I have not had opportunity to use it, but I think it would be very helpful.)</span></p>
          <p xml:space="preserve" id="p_001655"><span class="text" id="span_001025" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001025">To summarize: write down explicit guesses for the attributes of the user set. </span><em id="em_000476" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000476">It is far better to be explicit and wrong than to be vague.</em></p>
          <p xml:space="preserve" id="p_001656"><strong id="strong_000594" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000594">What about the "Second-System Effect"? </strong><span class="text" id="span_001026" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001026">A perceptive student remarked that </span><em id="em_000477" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000477">The Mythical Man-Month </em><span class="text" id="span_001027" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001027">recommended a recipe for disaster: Plan to deliver the second version of any new system (Chapter 11), which Chapter 5 characterizes as the most</span></p>
          <pagenum page="normal" id="p260" smilref="The_Mythical_Man_Month_Essay00007.smil#p260">260</pagenum>
          <p xml:space="preserve" id="p_001657" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001657">dangerous system one ever designs. I had to grant him a "gotcha."</p>
          <p xml:space="preserve" id="p_001658" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001658">The contradiction is more linguistic than real. The "second" system described in Chapter 5 is the second system fielded, the follow-on system that invites added function and frills. The "second" system in Chapter 11 is the second try at building what should be the first system to be fielded. It is built under all the schedule, talent, and ignorance constraints that characterize new projects--the constraints that exert a slimness discipline.</p>
          <p xml:space="preserve" id="p_001659"><strong id="strong_000595" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000595">The Triumph of the WIMP Interface</strong></p>
          <p xml:space="preserve" id="p_001660"><span class="text" id="span_001028" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001028">One of the most impressive developments in software during the past two decades has been the triumph of the Windows, Icons, Menus, Pointing interface--or WIMP for short. It is today so familiar as to need no description. This concept was first publicly displayed by Doug Englebart and his team from the Stanford Research Institute at the Western Joint Computer Conference of 1968.</span><sup id="sup_000124" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000124">5</sup><span class="text" id="span_001029" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001029"> From there the ideas went to Xerox Palo Alto Research Center, where they emerged in the Alto personal workstation developed by Bob Taylor and team. They were picked up by Steve Jobs for the Apple Lisa, a computer too slow to carry its exciting ease-of-use concepts. These concepts Jobs then embodied in the commercially successful Apple Macintosh in 1985. They were later adopted in Microsoft Windows for the IBM PC and compatibles. The Mac version will be my example.</span><sup id="sup_000125" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000125">6</sup></p>
          <p xml:space="preserve" id="p_001661"><strong id="strong_000596" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000596">Conceptual integrity via a metaphor. </strong><span class="text" id="span_001030" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001030">The WIMP is a superb example of a user interface that has conceptual integrity, achieved by the adoption of a familiar mental model, the desktop metaphor, and its careful consistent extension to exploit a computer graphics implementation. For example, the costly but proper decision to overlay windows instead of tiling them follows directly from the metaphor. The ability to size and shape windows is a consistent extension that gives the user the new powers enabled by the computer graphics medium. Papers on a</span></p>
          <pagenum page="normal" id="p261" smilref="The_Mythical_Man_Month_Essay00007.smil#p261">261</pagenum>
          <p xml:space="preserve" id="p_001662" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001662">desktop cannot be so readily sized and shaped. Dragging and dropping follow directly from the metaphor; selecting icons by pointing with a cursor is a direct analog of picking things with the hand. Icons and nested folders are faithful analogs of desktop documents; so is the trash can. The concepts of cutting, copying, and pasting faithfully mirror the things we used to do with documents on desktops. So faithfully is the metaphor followed and so consistent is its extension that new users are positively jarred by the notion of dragging a diskette's icon to the trash to eject the disk. Were the interface not almost uniformly consistent, that (pretty bad) inconsistency would not grate so much.</p>
          <p xml:space="preserve" id="p_001663"><span class="text" id="span_001031" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001031">Where is the WIMP interface forced to go far beyond the desktop metaphor? Most notably in two respects: menus and one-handedness. When working with a real desktop, one </span><em id="em_000478" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000478">does </em><span class="text" id="span_001032" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001032">actions to documents, rather than telling someone or something to do them. And when one does tell someone to do an action, one usually generates, rather than selects, the oral or written imperative verb commands: "Please file this." "Please find the earlier correspondence." "Please send this to Mary to handle."</span></p>
          <p xml:space="preserve" id="p_001664" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001664">Alas, the reliable interpretation of free-form generated English commands is beyond the present state of the art, whether commands are written or spoken. So the interface designers were two steps removed from direct user action on documents. They wisely picked up from the usual desktop its one example of command selection--the printed buck slip, on which the user selects from among a constrained menu of commands whose semantics are standardized. This idea they extended to a horizontal menu of vertical pull-down submenus.</p>
          <p xml:space="preserve" id="p_001665"><strong id="strong_000597" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000597">Command utterances and the two-cursor problem. </strong><span class="text" id="span_001033" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001033">Commands are imperative sentences; they always have a verb and usually have a direct object. For any action, one needs to specify a verb and a noun. The pointing metaphor says, to specify two things at a time, have two distinguished cursors on the screen, each driven by a separate mouse--one in the right hand and one</span></p>
          <pagenum page="normal" id="p262" smilref="The_Mythical_Man_Month_Essay00007.smil#p262">262</pagenum>
          <p xml:space="preserve" id="p_001666"><span class="text" id="span_001034" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001034">in the left. After all, on a physical desktop we normally work with both hands. (But, one hand is often holding things fixed in place, which happens by default on the computer desktop.) The mind is certainly capable of two-handed operation; we regularly use two hands in typing, driving, cooking. Alas, providing one mouse was already a big step forward for personal computer makers; no commercial system accommodates two simultaneous mouse-cursor actions, one driven with each hand.</span><sup id="sup_000126" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000126">7</sup></p>
          <p xml:space="preserve" id="p_001667"><span class="text" id="span_001035" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001035">The interface designers accepted reality and designed for one mouse, adopting the syntactic convention that one points out (</span><em id="em_000479" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000479">selects</em><span class="text" id="span_001036" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001036">) the noun first. One points at the verb, a menu item. This really gives away a lot of ease-of-use. As I watch users, or videotapes of users, or computer tracings of cursor movements, I am immediately struck that one cursor is having to do the work of two: pick an object in the desktop part of the window; pick a verb in the menu portion; find or re-find an object in the desktop; again pull down a menu (often the same one) and pick a verb. Back and forth, back and forth the cursor goes, from data-space to menu-space, each time discarding the useful information as to where it was last time it was in this space--altogether, an inefficient process.</span></p>
          <p xml:space="preserve" id="p_001668"><strong id="strong_000598" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000598">A brilliant solution. </strong><span class="text" id="span_001037" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001037">Even if the electronics and software could readily handle two simultaneously active cursors, there are space-layout difficulties. The desktop in the WIMP metaphor really includes a typewriter, and one must accommodate its real keyboard in physical space on the real desktop. A keyboard plus two mouse-pads uses a lot of the arm's-reach real estate. Well, the problem of the keyboard can be turned into an opportunity--why not enable efficient two-handed operation by using one hand on the keyboard to specify verbs and the other hand on a mouse to pick nouns. Now the cursor stays in the data space, exploiting the high locality of successive noun picks. Real efficiency, real user power.</span></p>
          <pagenum page="normal" id="p263" smilref="The_Mythical_Man_Month_Essay00007.smil#p263">263</pagenum>
          <p xml:space="preserve" id="p_001669"><strong id="strong_000599" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000599">User power versus ease of use. </strong><span class="text" id="span_001038" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001038">That solution, however, gives away the thing that makes menus so easy to use for novices-- menus present the alternative verbs valid at any particular state. We can buy a package, bring it home, and start using it without consulting the manual, merely by knowing what we bought it for, and experimenting with the different menu verbs.</span></p>
          <p xml:space="preserve" id="p_001670"><span class="text" id="span_001039" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001039">One of the hardest issues facing software architects is exactly how to balance user power versus ease of use. Do they design for simple operation for the novice or the occasional user, or for efficient power for the professional user? The ideal answer is to provide both, in a conceptually coherent way--that is achieved in the WIMP interface. The high-frequency menu verbs each have single-key + command-key equivalents, mostly chosen so that they can easily be struck as a single chord with the left hand. On the Mac, for example, the command key (*) is just below the Z and X keys; therefore the highest-frequency operations are encoded as *z, *x, *c</span><em id="em_000480" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000480">, *</em><span class="text" id="span_001040" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001040">v</span><em id="em_000481" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000481">, *</em><span class="text" id="span_001041" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001041">s</span><em id="em_000482" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000482">.</em></p>
          <p xml:space="preserve" id="p_001671"><strong id="strong_000600" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000600">Incremental transition from novice to power user. </strong><span class="text" id="span_001042" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001042">This dual system for specifying command verbs not only meets the low-learning-effort needs of the novice and the efficiency needs of the power user, it provides for each user to make a smooth transition between modes. The letter encodings, called </span><em id="em_000483" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000483">short cuts, </em><span class="text" id="span_001043" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001043">are shown on the menus beside the verbs, so that a user in doubt can pull down the menu to check the letter equivalent, instead of just picking the menu item. Each novice learns first the short cuts for his own high-frequency operations. Any short cut he is doubtful about he can try, since *z will undo any single mistake. Alternatively, he can check the menu to see what commands are valid. Novices will pull lots of menus; power users very few; and in-between users will only occasionally need to pick from a menu, since each will know the few short-cuts that make up most of his own operations. Most of us software designers are too familiar with this interface to appreciate fully its elegance and power.</span></p>
          <pagenum page="normal" id="p264" smilref="The_Mythical_Man_Month_Essay00007.smil#p264">264</pagenum>
          <p xml:space="preserve" id="p_001672"><strong id="strong_000601" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000601">The success of direct incorporation as a device for enforcing architecture. </strong><span class="text" id="span_001044" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001044">The Mac interface is remarkable in yet another way. Without coercion, its designers have made it a standard interface across applications, including the vast majority that are written by third parties. So the user gains conceptual coherence at the interface level not only within the software furnished with the machine but across all applications.</span></p>
          <p xml:space="preserve" id="p_001673"><span class="text" id="span_001045" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001045">This feat the Mac designers accomplished by building the interface into the read-only memory, so that it is easier and faster for developers to use it than to build their own idiosyncratic interfaces. These natural incentives for uniformity prevailed widely enough to establish a </span><em id="em_000484" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000484">de facto </em><span class="text" id="span_001046" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001046">standard. The natural incentives were helped by a total management commitment and a lot of persuasion by Apple. The independent reviewers in the product magazines, recognizing the immense value of cross-application conceptual integrity, have also supplemented the natural incentives by mercilessly criticizing products that do not conform.</span></p>
          <p xml:space="preserve" id="p_001674" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001674">This is a superb example of the technique, recommended in Chapter 6, of achieving uniformity by encouraging others to directly incorporate one's code into their products, rather than attempting to have them build their own software to one's specifications.</p>
          <p xml:space="preserve" id="p_001675"><strong id="strong_000602" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000602">The fate of WIMP: Obsolescence. </strong><span class="text" id="span_001047" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001047">Despite its excellencies, I expect the WIMP interface to be a historical relic in a generation. Pointing will still be the way to express nouns as we command our machines; speech is surely the right way to express the verbs. Tools such as Voice Navigator for the Mac and Dragon for the PC already provide this capability.</span></p>
          <p xml:space="preserve" id="p_001676"><strong id="strong_000603" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000603">Don't Build One to Throw Away--The Waterfall Model Is Wrong!</strong></p>
          <p xml:space="preserve" id="p_001677" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001677">The unforgettable picture of Galloping Gertie, the Tacoma Narrows Bridge, opens Chapter 11, which radically recommends:</p>
          <pagenum page="normal" id="p265" smilref="The_Mythical_Man_Month_Essay00007.smil#p265">265</pagenum>
          <p xml:space="preserve" id="p_001678" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001678">"Plan to throw one away; you will, anyhow." This I now perceive to be wrong, not because it is too radical, but because it is too simplistic.</p>
          <p xml:space="preserve" id="p_001679" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001679">The biggest mistake in the "Build one to throw away" concept is that it implicitly assumes the classical sequential or waterfall model of software construction. The model derives from a Gantt chart layout of a staged process, and it is often drawn as in Figure 19.1. Winton Royce improved the sequential model in a classic 1970 paper by providing for</p>
          <p xml:space="preserve" id="p_001680" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001680">* Some feedback from a stage to its predecessors</p>
          <p xml:space="preserve" id="p_001681" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001681">* Limiting the feedback to the immediately preceding stage only, so as to contain the cost and schedule delay it occasions.</p>
          <p xml:space="preserve" id="p_001682"><span class="text" id="span_001048" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001048">He preceded </span><em id="em_000485" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000485">The MM-M </em><span class="text" id="span_001049" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001049">in advising builders to "build it twice."</span><sup id="sup_000127" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000127">8 </sup><span class="text" id="span_001050" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001050">Chapter 11 is not the only one tainted by the sequential waterfall model; it runs through the book, beginning with the scheduling rule in Chapter </span><em id="em_000486" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000486">2. </em><span class="text" id="span_001051" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001051">That rule-of-thumb allocates 1/3 of the schedule to planning, 1/6 to coding, 1/4 to component test, and 1/4 to system test.</span></p>
          <p xml:space="preserve" id="p_001683"><span class="text" id="span_001052" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001052">[Image: </span><strong id="strong_000604" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000604">Fig. 19.1</strong><span class="text" id="span_001053" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001053"> Waterfall model of software construction.]</span></p>
          <pagenum page="normal" id="p266" smilref="The_Mythical_Man_Month_Essay00007.smil#p266">266</pagenum>
          <p xml:space="preserve" id="p_001684"><span class="text" id="span_001054" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001054">The basic fallacy of the waterfall model is that it assumes a project goes through the process </span><em id="em_000487" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000487">once, </em><span class="text" id="span_001055" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001055">that the architecture is excellent and easy to use, the implementation design is sound, and the realization is fixable as testing proceeds. Another way of saying it is that the waterfall model assumes the mistakes will all be in the realization, and thus that their repair can be smoothly interspersed with component and system testing.</span></p>
          <p xml:space="preserve" id="p_001685"><span class="text" id="span_001056" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001056">"Plan to throw one away" does indeed attack this fallacy head on. It is not the diagnosis that is wrong; it is the remedy. Now I did suggest that one might discard and redesign the first system piece by piece, rather than in one lump. This is fine so far as it goes, but it fails to get at the root of the problem. The waterfall model puts system test, and therefore by implication </span><em id="em_000488" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000488">user </em><span class="text" id="span_001057" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001057">testing, at the end of the construction process. Thus one can find impossible awkwardnesses for users, or unacceptable performance, or dangerous susceptibility to user error or malice, only after investing in full construction. To be sure, the Alpha test scrutiny of the specifications aims to find such flaws early, but there is no substitute for hands-on users.</span></p>
          <p xml:space="preserve" id="p_001686" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001686">The second fallacy of the waterfall model is that it assumes one builds a whole system at once, combining the pieces for an end-to-end system test after all of the implementation design, most of the coding, and much of the component testing has been done.</p>
          <p xml:space="preserve" id="p_001687"><span class="text" id="span_001058" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001058">The waterfall model, which was the way most people thought about software projects in 1975, unfortunately got enshrined into DOD-STD-2167, the Department of Defense specification for all military software. This ensured its survival well past the time when most thoughtful practitioners had recognized its inadequacy and abandoned it. Fortunately, the DoD has since begun to see the light.</span><sup id="sup_000128" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000128">9</sup></p>
          <p xml:space="preserve" id="p_001688"><strong id="strong_000605" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000605">There has to be upstream movement</strong><span class="text" id="span_001059" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001059">. Like the energetic salmon in the chapter-opening picture, experience and ideas from each downstream part of the construction process must leap upstream, sometimes more than one stage, and affect the</span></p>
          <pagenum page="normal" id="p267" smilref="The_Mythical_Man_Month_Essay00007.smil#p267">267</pagenum>
          <p xml:space="preserve" id="p_001689" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001689">upstream activity.</p>
          <p xml:space="preserve" id="p_001690" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001690">Designing the implementation will show that some architectural features cripple performance; so the architecture has to be reworked. Coding the realization will show some functions to balloon space requirements; so there may have to be changes to architecture and implementation.</p>
          <p xml:space="preserve" id="p_001691" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001691">One may well, therefore, iterate through two or more architecture-implementation design cycles before realizing anything as code.</p>
          <p xml:space="preserve" id="p_001692"><strong id="strong_000606" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000606">An Incremental-Build Model Is Better—</strong></p>
          <p xml:space="preserve" id="p_001693"><strong id="strong_000607" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000607">Progressive Refinement</strong></p>
          <p xml:space="preserve" id="p_001694"><strong id="strong_000608" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000608">Building an end-to-end skeleton system</strong></p>
          <p xml:space="preserve" id="p_001695"><span class="text" id="span_001060" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001060">Harlan Mills, working in a real-time system environment, early advocated that we should build the basic polling loop of a realtime system, with subroutine calls (</span><em id="em_000489" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000489">stubs</em><span class="text" id="span_001061" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001061">) for all the functions (Fig. 19.2), but only null subroutines. Compile it; test it. It goes round and round, doing literally nothing, but doing it correctly.</span><sup id="sup_000129" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000129">10</sup></p>
          <p xml:space="preserve" id="p_001696"><span class="text" id="span_001062" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001062">[Image: </span><strong id="strong_000609" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000609">Fig. 19.2</strong><span class="text" id="span_001063" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001063">.]</span></p>
          <pagenum page="normal" id="p268" smilref="The_Mythical_Man_Month_Essay00007.smil#p268">268</pagenum>
          <p xml:space="preserve" id="p_001697"><span class="text" id="span_001064" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001064">Next, we flesh out a (perhaps primitive) input module and an output module. Voilá! A running system that does something, however dull. Now, function by function, we incrementally build and add modules. </span><em id="em_000490" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000490">At every stage we have a running system. </em><span class="text" id="span_001065" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001065">If we are diligent, we have at every stage a debugged, tested system. (As the system grows, so does the burden of regression-testing each new module against all the previous test cases.)</span></p>
          <p xml:space="preserve" id="p_001698"><span class="text" id="span_001066" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001066">After every function works at a primitive level, we refine or rewrite first one module and then another, incrementally </span><em id="em_000491" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000491">growing </em><span class="text" id="span_001067" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001067">the system. Sometimes, to be sure, we have to change the original driving loop, and or even its module interfaces.</span></p>
          <p xml:space="preserve" id="p_001699" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001699">Since we have a working system at all times</p>
          <p xml:space="preserve" id="p_001700" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001700">* we can begin user testing very early, and</p>
          <p xml:space="preserve" id="p_001701" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001701">* we can adopt a build-to-budget strategy that protects absolutely against schedule or budget overruns (at the cost of possible functional shortfall).</p>
          <p xml:space="preserve" id="p_001702" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001702">For some 22 years, I taught the software engineering laboratory at the University of North Carolina, sometimes jointly with David Parnas. In this course, teams of usually four students built in one semester some real software application system. About halfway through those years, I switched to teaching incremental development. I was stunned by the electrifying effect on team morale of that first picture on the screen, that first running system.</p>
          <p xml:space="preserve" id="p_001703"><strong id="strong_000610" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000610">Parnas Families</strong></p>
          <p xml:space="preserve" id="p_001704"><span class="text" id="span_001068" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001068">David Parnas has been a major thought leader in software engineering during this whole 20-year period. Everyone is familiar with his information-hiding concept. Rather less familiar, but very important, is Parnas's concept of designing a software product as a </span><em id="em_000492" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000492">family </em><span class="text" id="span_001069" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001069">of related products.</span><sup id="sup_000130" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000130">11</sup><span class="text" id="span_001070" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001070"> He urges the designer to anticipate both lateral extensions and succeeding versions of</span></p>
          <pagenum page="normal" id="p269" smilref="The_Mythical_Man_Month_Essay00007.smil#p269">269</pagenum>
          <p xml:space="preserve" id="p_001705" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001705">a product, and to define their function or platform differences so as to construct a family tree of related products (Fig 19.3).</p>
          <p xml:space="preserve" id="p_001706" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001706">The trick in the design of such a tree is to put near its root those design decisions that are less likely to change.</p>
          <p xml:space="preserve" id="p_001707" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001707">Such a design strategy maximizes the re-use of modules. More important, the same strategy can be broadened to include not only deliverable products but also the successive intermediate versions created in an incremental-build strategy. The product then grows through its intermediate stages with minimum backtracking.</p>
          <p xml:space="preserve" id="p_001708"><span class="text" id="span_001071" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001071">[Chart: </span><strong id="strong_000611" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000611">Fig. 19.3</strong><span class="text" id="span_001072" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001072">.]</span></p>
          <pagenum page="normal" id="p270" smilref="The_Mythical_Man_Month_Essay00007.smil#p270">270</pagenum>
          <p xml:space="preserve" id="p_001709"><strong id="strong_000612" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000612">Microsoft's "Build Every Night" Approach</strong></p>
          <p xml:space="preserve" id="p_001710" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001710">James McCarthy described to me a product process used by his team and others at Microsoft. It is incremental growth carried to a logical conclusion. He says,</p>
          <p xml:space="preserve" id="p_001711"><em id="em_000493" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000493">After we first ship, we will be shipping later versions that add more function to an existing, running product. Why should the initial building process be different? Beginning at the time of our first milestone </em><span class="text" id="span_001073" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001073">[</span><em id="em_000494" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000494">where the march to first ship has three intermediate milestones</em><span class="text" id="span_001074" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001074">]</span><em id="em_000495" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000495"> we rebuild the developing system every night </em><span class="text" id="span_001075" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001075">[</span><em id="em_000496" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000496">and run the test cases</em><span class="text" id="span_001076" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001076">].</span><em id="em_000497" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000497"> The build cycle becomes the heartbeat of the project. Every day one or more of the programmer-tester teams check in modules with new functions. After every build, we have a running system. If the build breaks, we stop the whole process until the trouble is found and fixed. At all times everybody on the team knows the status.</em></p>
          <p xml:space="preserve" id="p_001712"><em id="em_000498" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000498">It is really hard. You have to devote lots of resources, but it is a disciplined process, a tracked and known process. It gives the team credibility to itself. Your credibility determines your morale, your emotional state.</em></p>
          <p xml:space="preserve" id="p_001713" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001713">Software builders in other organizations are surprised, even shocked, by this process. One says, "I've made it a practice to build every week, but I think it would be too much work to build every night." And that may be true. Bell Northern Research, for example, rebuilds its 12-million-line system every week.</p>
          <p xml:space="preserve" id="p_001714"><strong id="strong_000613" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000613">Incremental-Build and Rapid Prototyping</strong></p>
          <p xml:space="preserve" id="p_001715" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001715">Since an incremental development process enables early testing with real users, what is the difference between that and rapid prototyping? It seems to me that the two are related but separate. One can have either without the other. Harel usefully defines a prototype as</p>
          <p xml:space="preserve" id="p_001716"><span class="text" id="span_001077" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001077">[</span><em id="em_000499" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000499">A version of a program that</em><span class="text" id="span_001078" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001078">]</span><em id="em_000500" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000500"> reflects only the design decisions made in the process of preparing the conceptual model, and not decisions driven by implementation concerns.</em><sup id="sup_000131" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000131">12</sup></p>
          <pagenum page="normal" id="p271" smilref="The_Mythical_Man_Month_Essay00007.smil#p271">271</pagenum>
          <p xml:space="preserve" id="p_001717" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001717">It is possible to build a prototype that is not at all part of a product growing toward shipment. For example, one may build an interface prototype that has no real program function behind it, merely the finite-state machine that makes it appear to go through its paces. One can even prototype and test interfaces by the Wizard-of-Oz technique, with a concealed human simulating the system's responses. Such prototyping can be very useful for getting early user feedback, but it is quite apart from testing a product growing toward shipment.</p>
          <p xml:space="preserve" id="p_001718" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001718">Similarly, implementers may well undertake to build a vertical slice of a product, in which a very limited function set is constructed in full, so as to let early sunlight into places where performance snakes may lurk. What is the difference between the first-milestone-build of the Microsoft process and a rapid prototype? Function. The first-milestone product may not have enough function to be of interest to anyone; the shippable product is defined as such by its completeness in furnishing a useful set of functions, and by its quality, the belief that it works robustly.</p>
          <p xml:space="preserve" id="p_001719"><strong id="strong_000614" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000614">Parnas Was Right, and I Was Wrong about Information Hiding</strong></p>
          <p xml:space="preserve" id="p_001720"><span class="text" id="span_001079" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001079">In Chapter 7 I contrast two approaches to the question of how much each team member should be allowed or encouraged to know about each other's designs and code. In the Operating System/360 project, we decided that </span><em id="em_000501" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000501">all </em><span class="text" id="span_001080" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001080">programmers should see </span><em id="em_000502" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000502">all </em><span class="text" id="span_001081" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001081">the material--i.e., each programmer having a copy of the project workbook, which came to number over 10,000 pages. Harlan Mills has argued persuasively that "programming should be a public process," that exposing all the work to everybody's gaze helps quality control, both by peer pressure to do things well and by peers actually spotting flaws and bugs.</span></p>
          <p xml:space="preserve" id="p_001721" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001721">This view contrasts sharply with David Parnas's teaching that modules of code should be encapsulated with well-defined interfaces, and that the interior of such a module should be the</p>
          <pagenum page="normal" id="p272" smilref="The_Mythical_Man_Month_Essay00007.smil#p272">272</pagenum>
          <p xml:space="preserve" id="p_001722"><span class="text" id="span_001082" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001082">private property of its programmer, not discernible from outside. Programmers are most effective if shielded from, not exposed to, the innards of modules not their own.</span><sup id="sup_000132" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000132">13</sup></p>
          <p xml:space="preserve" id="p_001723" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001723">I dismissed Parnas's concept as a "recipe for disaster" in Chapter 7. Parnas was right, and I was wrong. I am now convinced that information hiding, today often embodied in object-oriented programming, is the only way of raising the level of software design.</p>
          <p xml:space="preserve" id="p_001724" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001724">One can indeed get disasters with either technique. Mills' technique ensures that programmers can know the detailed semantics of the interfaces they work to by knowing what is on the other side. Hiding those semantics leads to system bugs. On the other hand, Parnas's technique is robust under change and is more appropriate in a design-for-change philosophy.</p>
          <level3 id="level3_000017">
            <h3 xml:space="preserve" id="p_001725" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001725">Chapter 16 argues the following:</h3>
            <p xml:space="preserve" id="p_001726" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001726">* Most past progress in software productivity has come from eliminating noninherent difficulties such as awkward machine languages and slow batch turnaround.</p>
            <p xml:space="preserve" id="p_001727" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001727">* There are not a lot more of these easy pickings.</p>
            <p xml:space="preserve" id="p_001728" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001728">* Radical progress is going to have to come from attacking the essential difficulties of fashioning complex conceptual constructs.</p>
            <p xml:space="preserve" id="p_001729" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001729">The most obvious way to do this recognizes that programs are made up of conceptual chunks much larger than the individual high-level language statement--subroutines, or modules, or classes. If we can limit design and building so that we only do the putting together and parameterization of such chunks from prebuilt collections, we have radically raised the conceptual level, and eliminated the vast amounts of work and the copious opportunities for error that dwell at the individual statement level.</p>
            <p xml:space="preserve" id="p_001730" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001730">Parnas's information-hiding definition of modules is the first published step in that crucially important research program, and it is an intellectual ancestor of object-oriented programming.</p>
            <pagenum page="normal" id="p273" smilref="The_Mythical_Man_Month_Essay00007.smil#p273">273</pagenum>
            <p xml:space="preserve" id="p_001731"><span class="text" id="span_001083" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001083">He defined a module as a software entity with its own data model and its own set of operations. Its data can only be accessed via one of its proper operations. The second step was a contribution of several thinkers: the upgrading of the Parnas module into an </span><em id="em_000503" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000503">abstract data type, </em><span class="text" id="span_001084" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001084">from which many objects could be derived. The abstract data type provides a uniform way of thinking about and specifying module interfaces, and an access discipline that is easy to enforce.</span></p>
            <p xml:space="preserve" id="p_001732"><span class="text" id="span_001085" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001085">The third step, object-oriented programming, introduces the powerful concept of </span><em id="em_000504" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000504">inheritance, </em><span class="text" id="span_001086" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001086">whereby classes (data types) take as defaults specified attributes from their ancestors in the class hierarchy.</span><sup id="sup_000133" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000133">14</sup><span class="text" id="span_001087" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001087"> Most of what we hope to gain from object-oriented programming derives in fact from the first step, module encapsulation, plus the idea of prebuilt libraries of modules or classes </span><em id="em_000505" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000505">that are designed and tested for reuse. </em><span class="text" id="span_001088" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001088">Many people have chosen to ignore the fact that such modules are not just programs, but instead are program products in the sense discussed in Chapter 1. Some people are vainly hoping for significant module reuse without paying the initial cost of building product-quality modules--generalized, robust, tested, and documented. Object-oriented programming and reuse are discussed in Chapters 16 and 17.</span></p>
            <p xml:space="preserve" id="p_001733"><strong id="strong_000615" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000615">How Mythical Is the Man-Month? Boehm's Model and Data</strong></p>
            <p xml:space="preserve" id="p_001734" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001734">Over the years, there have been many quantitative studies of software productivity and the factors affecting it, especially the trade-offs between project staffing and schedule.</p>
            <p xml:space="preserve" id="p_001735"><span class="text" id="span_001089" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001089">The most substantial study is one done by Barry Boehm of some 63 software projects, mostly aerospace, with about 25 at TRW. His </span><em id="em_000506" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000506">Software Engineering Economics </em><span class="text" id="span_001090" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001090">contains not only the results but a useful set of cost models of progressive comprehensiveness. Whereas the coefficients in the models are surely different for ordinary commercial software and for aerospace software built to government standards, nevertheless his models</span></p>
            <pagenum page="normal" id="p274" smilref="The_Mythical_Man_Month_Essay00007.smil#p274">274</pagenum>
            <p xml:space="preserve" id="p_001736" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001736">are backed by an immense amount of data. I think the book will be a useful classic a generation from now.</p>
            <p xml:space="preserve" id="p_001737"><span class="text" id="span_001091" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001091">His results solidly confirm </span><em id="em_000507" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000507">The </em><span class="text" id="span_001092" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001092">MM-M's assertion that the trade-off between men and months is far from linear, that the man-month is indeed mythical as a measure of productivity. In particular, he finds:</span><sup id="sup_000134" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000134">15</sup></p>
            <p xml:space="preserve" id="p_001738"><span class="text" id="span_001093" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001093">* There is a cost-optimum schedule time to first shipment, T=2.5 (MM) </span><sup id="sup_000135" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000135">1/3</sup><span class="text" id="span_001094" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001094">. That is, the optimum time in months goes as the cube root of the expected effort in man-months, a figure derived from the size estimate and other factors in his model. An optimum staffing curve is a corollary.</span></p>
            <p xml:space="preserve" id="p_001739" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001739">* The cost curve rises slowly as the planned schedule gets longer than the optimum. People with more time take more time.</p>
            <p xml:space="preserve" id="p_001740" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001740">* The cost curve rises sharply as the planned schedule gets shorter than the optimum.</p>
            <p xml:space="preserve" id="p_001741"><span class="text" id="span_001095" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001095">* </span><em id="em_000508" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000508">Hardly any projects succeed in less than 3/4 of the calculated optimum schedule, regardless of the number of people applied! </em><span class="text" id="span_001096" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001096">This quotable result gives the software manager solid ammunition when higher management is demanding impossible schedule commitments.</span></p>
            <p xml:space="preserve" id="p_001742"><strong id="strong_000616" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000616">How true is Brooks's Law? </strong><span class="text" id="span_001097" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001097">There have even been careful studies evaluating the truth of Brooks's (intentionally simplistic) Law, that adding manpower to a late software project makes it later. The best treatment is that of Abdel-Hamid and Madnick, in their ambitious and valuable 1991 book, </span><em id="em_000509" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000509">Software Project Dynamics: An Integrated Approach.</em><sup id="sup_000136" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000136">16</sup><span class="text" id="span_001098" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001098"> The book develops a quantitative model of project dynamics. Their chapter on Brooks's Law provides more detailed insight into what happens under various assumptions as to what manpower is added, and when. To investigate this, the authors extend their own careful model of a middle-sized applications project by assuming that new people have a learning curve and accounting for the extra communication</span></p>
            <pagenum page="normal" id="p275" smilref="The_Mythical_Man_Month_Essay00007.smil#p275">275</pagenum>
            <p xml:space="preserve" id="p_001743"><span class="text" id="span_001099" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001099">and training work. They conclude that "Adding more people to a late project always makes it more costly, but it does not </span><em id="em_000510" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000510">always </em><span class="text" id="span_001100" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001100">cause it to be completed later [italics theirs]." In particular, adding extra manpower early in the schedule is a much safer maneuver than adding it later, since the new people always have an immediate negative effect, which takes weeks to compensate.</span></p>
            <p xml:space="preserve" id="p_001744"><span class="text" id="span_001101" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001101">Stutzke develops a simpler model in order to perform a similar investigation, with a similar result.</span><sup id="sup_000137" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000137">17</sup><span class="text" id="span_001102" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001102"> He develops a detailed analysis of the process and costs of assimilating the new workers, including explicitly the diversion of their mentors from the project task itself. He tests his model against an actual project in which manpower was successfully doubled and the original schedule achieved, after a mid-project slip. He treats alternatives to adding more programmers, especially overtime. Most valuable are his many items of practical advice as to how new workers should be added, trained, supported with tools, etc., so as to minimize the disruptive effects of adding them. Especially noteworthy is his comment that new people added late in a development project must be team players willing to pitch in and work within the process, and not attempt to alter or improve the process itself!</span></p>
            <p xml:space="preserve" id="p_001745" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001745">Stutzke believes that the added burden of communication in a larger project is a second-order effect and does not model it. It is not clear whether and how Abdel-Hamid and Madnick take it into account. Neither model takes into account the fact that the work must be repartitioned, a process I have often found to be nontrivial.</p>
            <p xml:space="preserve" id="p_001746" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001746">The "outrageously simplified" statement of Brooks's Law is made more useful by these careful treatments of the proper qualifications. On balance, I stand by the bald statement as the best zeroth-order approximation to the truth, a rule of thumb to warn managers against blindly making the instinctive fix to a late project.</p>
            <pagenum page="normal" id="p276" smilref="The_Mythical_Man_Month_Essay00007.smil#p276">276</pagenum>
            <p xml:space="preserve" id="p_001747"><strong id="strong_000617" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000617">People Are Everything (Well, Almost Everything)</strong></p>
            <p xml:space="preserve" id="p_001748"><span class="text" id="span_001103" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001103">Some readers have found it curious that </span><em id="em_000511" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000511">The MM-M </em><span class="text" id="span_001104" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001104">devotes most of the essays to the managerial aspects of software engineering, rather than the many technical issues. This bias was due in part to the nature of my role on the IBM Operating System/360 (now MVS/370). More fundamentally, it sprang from a conviction that the quality of the people on a project, and their organization and management, are much more important factors in success than are the tools they use or the technical approaches they take.</span></p>
            <p xml:space="preserve" id="p_001749" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001749">Subsequent researches have supported that conviction. Boehm's COCOMO model finds that the quality of the team is by far the largest factor in its success, indeed four times more potent than the next largest factor. Most academic research on software engineering has concentrated on tools. I admire and covet sharp tools. Nevertheless, it is encouraging to see ongoing research efforts on the care, growing, and feeding of people, and on the dynamics of software management.</p>
            <p xml:space="preserve" id="p_001750"><strong id="strong_000618" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000618">Peopleware. </strong><span class="text" id="span_001105" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001105">A major contribution during recent years has been DeMarco and Lister's 1987 book, </span><em id="em_000512" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000512">Peopleware: Productive Projects and Teams. </em><span class="text" id="span_001106" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001106">Its underlying thesis is that "The major problems of our work are not so much </span><em id="em_000513" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000513">technological </em><span class="text" id="span_001107" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001107">as </span><em id="em_000514" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000514">sociological </em><span class="text" id="span_001108" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001108">in nature." It abounds with gems such as, "The manager's function is not to make people work, it is to make it possible for people to work." It deals with such mundane topics as space, furniture, team meals together. DeMarco and Lister provide real data from their Coding War Games that show stunning correlation between performances of programmers from the same organization, and between workplace characteristics and both productivity and defect levels.</span></p>
            <p xml:space="preserve" id="p_001751"><em id="em_000515" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000515">The top performers' space is quieter, more private, better protected against interruption, and there is more of it.... Does it really matter to you ... whether quiet, space, and privacy help your current people to do better work or [alternatively] help you to attract and keep better people?</em><sup id="sup_000138" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000138">18</sup></p>
            <pagenum page="normal" id="p277" smilref="The_Mythical_Man_Month_Essay00007.smil#p277">277</pagenum>
            <p xml:space="preserve" id="p_001752" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001752">I heartily commend the book to all my readers.</p>
            <p xml:space="preserve" id="p_001753"><strong id="strong_000619" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000619">Moving projects. </strong><span class="text" id="span_001109" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001109">DeMarco and Lister give considerable attention to team </span><em id="em_000516" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000516">fusion, </em><span class="text" id="span_001110" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001110">an intangible but vital property. I think it is management's overlooking fusion that accounts for the readiness I have observed in multilocation companies to move a project from one laboratory to another.</span></p>
            <p xml:space="preserve" id="p_001754"><span class="text" id="span_001111" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001111">My experience and observation are limited to perhaps a half-dozen moves. I have never seen a successful one. One can move </span><em id="em_000517" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000517">missions </em><span class="text" id="span_001112" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001112">successfully. But in every case of attempts to move projects, the new team in fact started over, in spite of having good documentation, some well-advanced designs, and some of the people from the sending team. I think it is the breaking of fusion of the old team that aborts the embryonic product, and brings about restart.</span></p>
            <p xml:space="preserve" id="p_001755"><strong id="strong_000620" smilref="The_Mythical_Man_Month_Essay00007.smil#strong_000620">The Power of Giving Up Power</strong></p>
            <p xml:space="preserve" id="p_001756"><span class="text" id="span_001113" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001113">If one believes, as I have argued at many places in this book, that creativity comes from individuals and not from structures or processes, then a central question facing the software manager is how to design structure and process so as to enhance, rather than inhibit, creativity and initiative. Fortunately, this problem is not peculiar to software organizations, and great thinkers have worked on it. E. F. Schumacher, in his classic, </span><em id="em_000518" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000518">Small is Beautiful: Economics as if People Mattered, </em><span class="text" id="span_001114" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001114">proposes a theory of organizing enterprises to maximize the creativity and joy of the workers. For his first principle he chooses the "Principle of Subsidiary Function" from the Encyclical </span><em id="em_000519" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000519">Quadragesimo Anno </em><span class="text" id="span_001115" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001115">of Pope Pius XI:</span></p>
            <p xml:space="preserve" id="p_001757"><em id="em_000520" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000520">It is an injustice and at the same time a grave evil and disturbance of right order to assign to a greater and higher association what lesser and subordinate organizations can do. For every social activity ought of its very nature to furnish help to the members of the body social and never destroy and absorb them....Those in command should be sure that the more perfectly a graduated order is</em></p>
            <pagenum page="normal" id="p278" smilref="The_Mythical_Man_Month_Essay00007.smil#p278">278</pagenum>
            <p xml:space="preserve" id="p_001758"><em id="em_000521" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000521">preserved among the various associations, in observing the principle of subsidiary function, the stronger will be the social authority and effectiveness and the happier and more prosperous the condition of the State.</em><sup id="sup_000139" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000139">19</sup></p>
            <p xml:space="preserve" id="p_001759" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001759">Schumacher goes on to interpret:</p>
            <p xml:space="preserve" id="p_001760"><em id="em_000522" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000522">The Principle of Subsidiary Function teaches us that the centre will gain in authority and effectiveness if the freedom and responsibility of the lower formations are carefully preserved, with the result that the organization as a whole will be "happier and more prosperous."</em></p>
            <p xml:space="preserve" id="p_001761"><em id="em_000523" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000523">How can such a structure be achieved?.... The large organization will consist of many semi-autonomous units, which we may call </em><span class="text" id="span_001116" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001116">quasi-firms. </span><em id="em_000524" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000524">Each of them will have a large amount of freedom, to give the greatest possible chance to creativity and </em><span class="text" id="span_001117" smilref="The_Mythical_Man_Month_Essay00007.smil#span_001117">entrepreneurship.... </span><em id="em_000525" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000525">Each quasi-firm must have both a profit and loss account, and a balance sheet.</em><sup id="sup_000140" smilref="The_Mythical_Man_Month_Essay00007.smil#sup_000140">20</sup></p>
            <p xml:space="preserve" id="p_001762" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001762">Among the most exciting developments in software engineering are the early stages of putting such organizational ideas into practice. First, the microcomputer revolution created a new software industry of hundreds of start-up firms, all of them starting small, and marked by enthusiasm, freedom, and creativity. The industry is changing now, as many small companies are being acquired by larger ones. It remains to be seen if the larger acquirers will understand the importance of preserving the creativity of smallness.</p>
            <p xml:space="preserve" id="p_001763" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001763">More remarkably, high management in some large firms have undertaken to delegate power down to individual software project teams, making them approach Schumacher's quasi-firms in structure and responsibility. They are surprised and delighted at the results.</p>
            <p xml:space="preserve" id="p_001764" smilref="The_Mythical_Man_Month_Essay00007.smil#p_001764">Jim McCarthy of Microsoft described to me his experience at emancipating his teams:</p>
            <p xml:space="preserve" id="p_001765"><em id="em_000526" smilref="The_Mythical_Man_Month_Essay00007.smil#em_000526">Each feature team (30-40 people) owns its feature set, its schedule, and even its process of how to define, build, ship. The team is made</em></p>
            <pagenum page="normal" id="p279" smilref="The_Mythical_Man_Month_Essay00007.smil#p279">279</pagenum>
            <p xml:space="preserve" id="p_001766"><em id="em_000527" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000527">up for four or five specialties, including building, testing, and writing. The team settles squabbles; the bosses don't. I can't emphasize enough the importance of empowerment, of the team being accountable to itself for its success.</em></p>
            <p xml:space="preserve" id="p_001767" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001767">Earl Wheeler, retired head of IBM's software business, told me his experience in undertaking the downward delegation of power long centralized in IBM's division managements:</p>
            <p xml:space="preserve" id="p_001768"><em id="em_000528" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000528">The key thrust </em><span class="text" id="span_001118" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001118">[</span><em id="em_000529" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000529">of recent years</em><span class="text" id="span_001119" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001119">]</span><em id="em_000530" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000530"> was delegating power down. It was like magic! Improved quality, productivity, morale. We have small teams, with no central control. The teams own the process, but they have to have one. They have many different processes. They own the schedule, but they feel the pressure of the market. This pressure causes them to reach for tools on their own.</em></p>
            <p xml:space="preserve" id="p_001769" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001769">Conversations with individual team members, of course, show both an appreciation of the power and freedom that is delegated, and a somewhat more conservative estimate of how much control really is relinquished. Nevertheless, the delegation achieved is clearly a step in the right direction. It yields exactly the benefits Pius XI predicted: the center gains in real authority by delegating power, and the organization as a whole is happier and more prosperous.</p>
            <p xml:space="preserve" id="p_001770"><strong id="strong_000621" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000621">What's the Biggest New Surprise? Millions of Computers</strong></p>
            <p xml:space="preserve" id="p_001771"><span class="text" id="span_001120" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001120">Every software guru I have talked with admits to being caught by surprise by the microcomputer revolution and its outgrowth, the shrink-wrapped software industry. This is beyond doubt the crucial change of the two decades since </span><em id="em_000531" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000531">The MM-M. </em><span class="text" id="span_001121" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001121">It has many implications for software engineering.</span></p>
            <p xml:space="preserve" id="p_001772"><strong id="strong_000622" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000622">The microcomputer revolution has changed how everybody uses computers. </strong><span class="text" id="span_001122" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001122">Schumacher stated the challenge more than 20 years ago:</span></p>
            <p xml:space="preserve" id="p_001773"><em id="em_000532" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000532">What is</em> <em id="em_000533" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000533">it that we really require from the scientists and technologists?</em></p>
            <pagenum page="normal" id="p280" smilref="The_Mythical_Man_Month_Essay00008.smil#p280">280</pagenum>
            <p xml:space="preserve" id="p_001774"><em id="em_000534" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000534">I should answer: We need methods and equipment which are</em></p>
            <p xml:space="preserve" id="p_001775"><em id="em_000535" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000535">* cheap enough so that they are accessible to virtually everyone;</em></p>
            <p xml:space="preserve" id="p_001776"><em id="em_000536" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000536">* suitable for small-scale application; and</em></p>
            <p xml:space="preserve" id="p_001777"><span class="text" id="span_001123" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001123">* </span><em id="em_000537" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000537">compatible with man's need for creativity.</em><sup id="sup_000141" smilref="The_Mythical_Man_Month_Essay00008.smil#sup_000141">21</sup></p>
            <p xml:space="preserve" id="p_001778" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001778">These are exactly the wonderful properties that the microcomputer revolution has brought to the computer industry and to its users, now the general public. The average American can now afford not only a computer of his own, but a suite of software that 20 years ago would have cost a king's salary. Each of Schumacher's goals is worth contemplating; the degree to which each has been achieved is worth savoring, especially the last. In area after area, new means of self-expression are accessible to ordinary people as well as to professionals.</p>
            <p xml:space="preserve" id="p_001779"><span class="text" id="span_001124" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001124">Partly the enhancement comes in other fields as it has in software creation--in the removal of accidental difficulties. Written manuscripts used to be accidentally rigidified by the time and cost of retyping to incorporate changes. On a 300-page work, one might go through retyping every three to six months, but in between, one just kept marking the manuscript. One could not easily assess what the changes had done to the flow of the logic and the rhythm of the words. Now, manuscripts have become wondrously fluid.</span><sup id="sup_000142" smilref="The_Mythical_Man_Month_Essay00008.smil#sup_000142">22</sup></p>
            <p xml:space="preserve" id="p_001780" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001780">The computer has brought a similar fluidity to many other media: artistic drawings, building plans, mechanical drawings, musical compositions, photographs, video sequences, slide presentations, multimedia works, and even to spreadsheets. In each case, the manual method of production required recopying the bulky unchanged parts in order to see changes in context. Now we enjoy for each medium the same benefits that timesharing brought to software creation--the ability to revise and to assess instantly the effect without losing one's train of thought.</p>
            <p xml:space="preserve" id="p_001781" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001781">Creativity is also enhanced by new and flexible auxiliary tools. For prose production, as one example, we are now served by spelling checkers, grammar checkers, style advisors, bibliographic</p>
            <pagenum page="normal" id="p281" smilref="The_Mythical_Man_Month_Essay00008.smil#p281">281</pagenum>
            <p xml:space="preserve" id="p_001782" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001782">systems, and the remarkable ability to see pages concurrently formatted into final layout. We do not yet appreciate what instantaneous encyclopedias or the infinite resources of the World-Wide Web will mean for a writer's impromptu research.</p>
            <p xml:space="preserve" id="p_001783" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001783">Most important, the new fluidity of the media makes easy the exploration of many radically different alternatives when a creative work is just taking form. Here is another case where an order of magnitude in a quantitative parameter, here change-time, makes a qualitative difference in how one goes about a task.</p>
            <p xml:space="preserve" id="p_001784" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001784">Tools for drawing enable building designers to explore many more options per hour of creative investment. The connection of computers to synthesizers, with software for automatically generating or playing scores, makes it much easier to capture keyboard doodles. Digital photograph manipulation, as with Adobe Photoshop, enables minutes-long experiments that would take hours in a darkroom. Spreadsheets enable the easy exploration of dozens of "what if" alternative scenarios.</p>
            <p xml:space="preserve" id="p_001785"><span class="text" id="span_001125" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001125">Finally, wholly new creative media have been enabled by the ubiquity of the personal computer. Hypertexts, proposed by Vannevar Bush in 1945, are practical only with computers.</span><sup id="sup_000143" smilref="The_Mythical_Man_Month_Essay00008.smil#sup_000143">23 </sup><span class="text" id="span_001126" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001126">Multimedia presentations and experiences were big deals--just too much trouble--before the personal computer and the rich, cheap software available for it. Virtual-environment systems, not yet cheap or ubiquitous, will become so, and will be yet another creative medium.</span></p>
            <p xml:space="preserve" id="p_001786"><strong id="strong_000623" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000623">The microcomputer revolution has changed how everybody builds software. </strong><span class="text" id="span_001127" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001127">The software processes of the 1970s have themselves been altered by the microprocessor revolution and the technology advances that enabled it. Many of the accidental difficulties of those software building processes have been eliminated. Fast individual computers are now the routine tools of the software developer, so that turnaround time is an almost obsolete concept. The personal computer of today is not only faster</span></p>
            <pagenum page="normal" id="p282" smilref="The_Mythical_Man_Month_Essay00008.smil#p282">282</pagenum>
            <p xml:space="preserve" id="p_001787" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001787">than the supercomputer of 1960, it is faster than the Unix workstation of 1985. All of this means that compilation is fast even on the humblest machines, and large memories have eliminated waits for disk-based linking. Large memories also make it reasonable to keep symbol tables in memory with object code, so high-level debugging without recompilation is routine.</p>
            <p xml:space="preserve" id="p_001788" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001788">In the last 20 years, we have come almost completely through the use of time-sharing as the methodology for constructing software. In 1975, time-sharing had just replaced batch computing as the most common technique. The network was used to give the software builder access both to shared files and to a shared powerful engine for compilation, linking, and testing. Today, the personal workstation provides the computing engine, and the network primarily gives shared access to the files that are the team's developing work-product. Client-server systems make shared access to check-in, build, and the application of test cases a different and simpler process.</p>
            <p xml:space="preserve" id="p_001789" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001789">Similar advances in user interfaces have occurred. The WIMP interface provides much more convenient editing of program texts as well as of English-language texts. The 24-line, 72-column screen has been replaced by full-page or even two-page screens, so programmers can see much more context for changes they are making.</p>
            <p xml:space="preserve" id="p_001790"><strong id="strong_000624" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000624">Whole New Software Industry--Shrink-Wrapped Software</strong></p>
            <p xml:space="preserve" id="p_001791" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001791">Alongside the classical software industry there has exploded another. Product unit sales run in hundreds of thousands, even millions. Entire rich software packages can be had for less than the cost of one supported programmer-day. The two industries are different in many ways, and they coexist.</p>
            <p xml:space="preserve" id="p_001792"><strong id="strong_000625" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000625">The classical software industry. </strong><span class="text" id="span_001128" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001128">In 1975, the software industry had several identifiable and somewhat different components, all of which still exist today:</span></p>
            <p xml:space="preserve" id="p_001793" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001793">* Computer vendors, who provide operating systems, compilers,</p>
            <pagenum page="normal" id="p283" smilref="The_Mythical_Man_Month_Essay00008.smil#p283">283</pagenum>
            <p xml:space="preserve" id="p_001794" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001794">and utilities for their products.</p>
            <p xml:space="preserve" id="p_001795" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001795">* Application users, such as the MIS shops of utilities, banks, insurance companies, and government agencies, who build application packages for their own use.</p>
            <p xml:space="preserve" id="p_001796" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001796">* Custom application builders, who contract to build proprietary packages for users. Many of these contractors specialize in defense applications, where requirements, standards, and marketing procedures are peculiar.</p>
            <p xml:space="preserve" id="p_001797" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001797">* Commercial package developers, who at that time developed mostly large applications for specialized markets, such as statistical analysis packages and CAD systems.</p>
            <p xml:space="preserve" id="p_001798" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001798">Tom DeMarco notes the fragmentation of the classical software industry, especially the application-user component:</p>
            <p xml:space="preserve" id="p_001799"><em id="em_000538" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000538">What I didn't expect: the field has partitioned into niches. How you do something is much more a function of the niche than it is the use of general systems analysis methods, general languages, and general testing techniques. Ada was the last of the general-purpose languages, and it has become a niche language.</em></p>
            <p xml:space="preserve" id="p_001800" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001800">In the routine commercial application niche, fourth-generation languages have made powerful contributions. Boehm says, "Most successful 4GLs are the result of someone's codifying a piece of an application domain in terms of options and parameters." The most pervasive of these 4GLs are application generators and combined database-communications packages with inquiry languages.</p>
            <p xml:space="preserve" id="p_001801"><strong id="strong_000626" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000626">Operating system worlds have coalesced. </strong><span class="text" id="span_001129" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001129">In 1975, operating systems abounded: each hardware vendor had at least one proprietary operating system per product line; many had two. How different things are today! Open systems are the watchword, and there are only five significant operating systems environments</span></p>
            <pagenum page="normal" id="p284" smilref="The_Mythical_Man_Month_Essay00008.smil#p284">284</pagenum>
            <p xml:space="preserve" id="p_001802" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001802">into which people market applications packages (in chronological order):</p>
            <p xml:space="preserve" id="p_001803" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001803">* The IBM MVS and VM environments</p>
            <p xml:space="preserve" id="p_001804" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001804">* The DEC VMS environment</p>
            <p xml:space="preserve" id="p_001805" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001805">* The Unix environment, in one flavor or another</p>
            <p xml:space="preserve" id="p_001806" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001806">* The IBM PC environment, whether DOS, OS-2, or Windows</p>
            <p xml:space="preserve" id="p_001807" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001807">* The Apple Macintosh environment.</p>
            <p xml:space="preserve" id="p_001808"><strong id="strong_000627" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000627">The shrink-wrapped industry. </strong><span class="text" id="span_001130" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001130">For the developer in the shrink-wrapped industry, the economics are entirely different from those of the classical industry: development cost is divided by large quantities; packaging and marketing costs loom large. In the classical in-house application development industry, schedule and the details of function were negotiable, development cost might not be; in the fiercely competitive open market, schedule and function quite dominate development cost.</span></p>
            <p xml:space="preserve" id="p_001809" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001809">As one would expect, the starkly different economics have given rise to rather different programming cultures. The classical industry tended to be dominated by large firms with established management styles and work cultures. The shrink-wrapped industry, on the other hand, began as hundreds of start-ups, freewheeling and fiercely focused on getting the job done rather than on process. In this climate, there has always been a much greater recognition of the talent of the individual programmer, an implicit awareness that great designs come from great designers. The start-up culture has the capability of rewarding star performers in proportion to their contributions; in the classical software industry the sociology of corporations and their salary-management plans have always made this difficult. It is not surprising that many of the stars of the new generation have gravitated to the shrink-wrapped industry.</p>
            <p xml:space="preserve" id="p_001810"><strong id="strong_000628" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000628">Buy </strong><em id="em_000539" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000539">and </em><span class="text" id="span_001131" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001131">Build--Shrink-Wrapped Packages As Components</span></p>
            <p xml:space="preserve" id="p_001811" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001811">Radically better software robustness and productivity are to be</p>
            <pagenum page="normal" id="p285" smilref="The_Mythical_Man_Month_Essay00008.smil#p285">285</pagenum>
            <p xml:space="preserve" id="p_001812" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001812">had only by moving up a level, and making programs by the composition of modules, or objects. An especially promising trend is the use of mass-market packages as the platforms on which richer and more customized products are built. A truck-tracking system is built on a shrink-wrapped database and communications package; so is a student information system. The want ads in computer magazines offer hundreds of HyperCard stacks and customized templates for Excel, dozens of special functions in Pascal for Mini Cad or functions in Auto Lisp for Auto Cad.</p>
            <p xml:space="preserve" id="p_001813"><strong id="strong_000629" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000629">Metaprogramming. </strong><span class="text" id="span_001132" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001132">Building HyperCard stacks, Excel templates, or Mini Cad functions is sometimes called </span><em id="em_000540" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000540">metaprogramming, </em><span class="text" id="span_001133" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001133">the construction of a new layer that customizes function for a subset of a package's users. The metaprogramming concept is not new, only resurgent and renamed. In the early 1960s, computer vendors and many big management information systems (MIS) shops had small groups of specialists who crafted whole application programming languages out of macros in assembly language. Eastman Kodak's MIS shop had a house application language defined on the IBM 7080 macroassembler. Similarly with IBM's OS/360 Queued Telecommunications Access Method, one could read many pages of an ostensibly assembly-language telecommunications program before encountering a machine-level instruction. Now the chunks offered by the metaprogrammer are many times larger than those macros. This development of secondary markets is most encouraging--while we have been waiting to see an effective market in C++ classes develop, a market in reusable metaprograms has grown up unremarked.</span></p>
            <p xml:space="preserve" id="p_001814"><strong id="strong_000630" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000630">This really does attack essence. </strong><span class="text" id="span_001134" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001134">Because the build-on-package phenomenon does not today affect the average MIS programmer, it is not yet very visible to the software engineering discipline. Nevertheless, it will grow rapidly, because it does attack the essence of fashioning conceptual constructs. The shrink-</span></p>
            <pagenum page="normal" id="p286" smilref="The_Mythical_Man_Month_Essay00008.smil#p286">286</pagenum>
            <p xml:space="preserve" id="p_001815" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001815">wrapped package provides a big module of function, with an elaborate but proper interface, and its internal conceptual structure does not have to be designed at all. High-function software products such as Excel or 4th Dimension are big modules indeed, but they serve as known, documented, tested modules with which to build customized systems. Next-level application builders get richness of function, a shorter development time, a tested component, better documentation, and radically lower cost.</p>
            <p xml:space="preserve" id="p_001816" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001816">The difficulty, of course, is that the shrink-wrapped software package is designed as a stand-alone entity whose functions and interfaces metaprogrammers cannot change. Moreover, and more seriously, shrink-wrapped package builders seemingly have little incentive to make their products suitable as modules in a larger system. I think that perception is wrong, that there is an untapped market in providing packages designed to facilitate metaprogrammer use.</p>
            <p xml:space="preserve" id="p_001817"><strong id="strong_000631" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000631">So what is needed? </strong><span class="text" id="span_001135" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001135">We can identify four levels of users of shrink-wrapped packages:</span></p>
            <p xml:space="preserve" id="p_001818" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001818">* The as-is user, who operates the application in straightforward manner, content with the functions and the interface the designers provided.</p>
            <p xml:space="preserve" id="p_001819" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001819">* The metaprogrammer, who builds templates or functions on top of a single application, using the interface provided, principally to save work for the end user.</p>
            <p xml:space="preserve" id="p_001820" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001820">* The external function writer, who hand-codes added functions into an application. These are essentially new application language primitives that call out to separate code modules written in a general-purpose language. One needs the capability to interface these new functions to the application as intercepted commands, as callbacks, or as overloaded functions.</p>
            <p xml:space="preserve" id="p_001821" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001821">* The metaprogrammer who uses one, or especially several, applications as components in a larger system. This is the user whose needs are poorly met today. This is also the use</p>
            <pagenum page="normal" id="p287" smilref="The_Mythical_Man_Month_Essay00008.smil#p287">287</pagenum>
            <p xml:space="preserve" id="p_001822" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001822">which promises substantial effectiveness gains in building new applications.</p>
            <p xml:space="preserve" id="p_001823"><span class="text" id="span_001136" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001136">For this last user, a shrink-wrapped application needs an additional documented interface, the metaprogramming interface (MPI). It needs several capabilities. First, the metaprogram needs to be in control of an ensemble of applications, whereas normally each application assumes it is itself in control. The ensemble must control the user interface, which ordinarily the application assumes it is doing. The ensemble must be able to invoke any application function as if its command string had come from the user. It should receive output from the application as if it is the screen, except that it needs the output parsed into logical units of suitable datatypes, rather than the text string that would have been displayed. Some applications, such as FoxPro, have wormholes that allow one to pass a command string in, but the information one gets back is skimpy and un-parsed. The wormhole is an </span><em id="em_000541" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000541">ad hoc </em><span class="text" id="span_001137" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001137">fix for a need that demands a general, designed solution.</span></p>
            <p xml:space="preserve" id="p_001824" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001824">It is powerful to have a scripting language for controlling the interactions among the ensemble of applications. Unix first provided this kind of function, with its pipes and its standard ASCII-string file format. Today AppleScript is a rather good example.</p>
            <p xml:space="preserve" id="p_001825"><strong id="strong_000632" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000632">The State and Future of Software Engineering</strong></p>
            <p xml:space="preserve" id="p_001826" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001826">I once asked Jim Ferrell, chairman of the Department of Chemical Engineering at North Carolina State University, to relate the history of chemical engineering, as distinguished from chemistry. He thereupon gave a wonderful impromptu hour-long account, beginning with the existence from antiquity of many different production processes for many products, from steel to bread to perfume. He told how Professor Arthur D. Little founded a Department of Industrial Chemistry at MIT in 1918, to find, develop, and teach a common base of technique shared</p>
            <pagenum page="normal" id="p288" smilref="The_Mythical_Man_Month_Essay00008.smil#p288">288</pagenum>
            <p xml:space="preserve" id="p_001827" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001827">by all the processes. First came rules of thumb, then empirical nomograms, then formulas for designing particular components, then mathematical models for heat transport, mass transport, momentum transport in single vessels.</p>
            <p xml:space="preserve" id="p_001828"><span class="text" id="span_001138" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001138">As Ferrell's tale unfolded, I was struck by the many parallels between the development of chemical engineering and that of software engineering, almost exactly fifty years later. Pamas reproves me for writing about </span><em id="em_000542" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000542">software engineering </em><span class="text" id="span_001139" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001139">at all. He contrasts the software discipline with electrical engineering and feels it is a presumption to call what we do engineering. He may be right that the field will never develop into an engineering discipline with as precise and all-encompassing a mathematical base as electrical engineering has. After all, software engineering, like chemical engineering, is concerned with the nonlinear problems of scaling up into industrial-scale processes, and like industrial engineering, it is permanently confounded by the complexities of human behavior.</span></p>
            <p xml:space="preserve" id="p_001829" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001829">Nevertheless, the course and timing of chemical engineering's development leads me to believe that software engineering at age 27 may be not hopeless but merely immature, as chemical engineering was in 1945. It was only after WWII that chemical engineers really addressed the behavior of closed-loop interconnected continuous-flow systems.</p>
            <p xml:space="preserve" id="p_001830" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001830">The distinctive concerns of software engineering are today exactly those set forth in Chapter 1:</p>
            <p xml:space="preserve" id="p_001831"><span class="text" id="span_001140" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001140">* How to design and build a set of programs into a </span><em id="em_000543" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000543">system</em></p>
            <p xml:space="preserve" id="p_001832"><span class="text" id="span_001141" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001141">* How to design and build a program or a system into a robust, tested, documented, supported </span><em id="em_000544" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000544">product</em></p>
            <p xml:space="preserve" id="p_001833"><span class="text" id="span_001142" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001142">* How to maintain intellectual control over </span><em id="em_000545" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000545">complexity </em><span class="text" id="span_001143" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001143">in large doses.</span></p>
            <p xml:space="preserve" id="p_001834" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001834">The tar pit of software engineering will continue to be sticky for a long time to come. One can expect the human race to continue attempting systems just within or just beyond our reach; and software systems are perhaps the most intricate of man's handiworks.</p>
            <pagenum page="normal" id="p289" smilref="The_Mythical_Man_Month_Essay00008.smil#p289">289</pagenum>
            <p xml:space="preserve" id="p_001835" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001835">This complex craft will demand our continual development of the discipline, our learning to compose in larger units, our best use of new tools, our best adaptation of proven engineering management methods, liberal application of common sense, and a God-given humility to recognize our fallibility and limitations.</p>
            <pagenum page="normal" id="p290" smilref="The_Mythical_Man_Month_Essay00008.smil#p290">290</pagenum>
            <p xml:space="preserve" id="p_001836" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001836">[Blank Page]</p>
            <pagenum page="normal" id="p291" smilref="The_Mythical_Man_Month_Essay00008.smil#p291">291</pagenum>
          </level3>
        </level2>
        <level2 id="level2_000023">
          <h2 xml:space="preserve" id="h2_000023"><strong id="strong_000633"><em id="em_000546" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000546">Epilogue Fifty Years of Wonder, Excitement, and Joy</em></strong></h2>
          <p xml:space="preserve" id="p_001837"><span class="text" id="span_001144" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001144">Still vivid in my mind is the wonder and delight with which I-- then 13 years old--read the account of the August 7,1944, dedication of the Harvard Mark I computer, an electromechanical marvel for which Howard Aiken was the architect and IBM engineers Clair Lake, Benjamin Durfee, and Francis Hamilton were the implementation designers. Equally wonder-provoking was the reading of Vannevar Bush's "That We May Think" paper in the April 1945 </span><em id="em_000547" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000547">Atlantic Monthly, </em><span class="text" id="span_001145" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001145">in which he proposed organizing knowledge as a big hypertext web and giving users machines for both following existing trails and blazing new trails of associations.</span></p>
          <p xml:space="preserve" id="p_001838" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001838">My passion for computers got another strong boost in 1952, when a summer job at IBM in Endicott, New York, gave me hands-on experience in programming the IBM 604 and formal instruction in programming IBM's 701, its first stored-program machine. Graduate school under Aiken and Iverson at Harvard made my career dream a reality, and I was hooked for life. To only a fraction of the human race does God give the privilege of earning one's bread doing what one would have gladly pursued free, for passion. I am very thankful.</p>
          <p xml:space="preserve" id="p_001839" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001839">It is hard to imagine a more exciting time to have lived as a computer devotee. From mechanisms to vacuum tubes to transistors to integrated circuits, the technology has exploded. The first computer on which I worked, fresh out of Harvard, was the</p>
          <p xml:space="preserve" id="p_001840"><strong id="strong_000634" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000634">291</strong></p>
          <pagenum page="normal" id="p292" smilref="The_Mythical_Man_Month_Essay00008.smil#p292">292</pagenum>
          <p xml:space="preserve" id="p_001841"><span class="text" id="span_001146" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001146">IBM 7030 Stretch supercomputer. Stretch reigned as the world's fastest computer from 1961 to 1964; nine copies were delivered. My Macintosh Powerbook is today not only faster, with a larger memory and bigger disk, it is a thousand times cheaper. </span><em id="em_000548" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000548">(Five </em><span class="text" id="span_001147" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001147">thousand times cheaper in constant dollars.) We have seen in turn the computer revolution, the electronic computer revolution, the minicomputer revolution, and the microcomputer revolution, each bringing orders-of-magnitude more computers.</span></p>
          <p xml:space="preserve" id="p_001842"><span class="text" id="span_001148" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001148">The computer-related intellectual discipline has exploded as has the technology. When I was a graduate student in the mid-1950s, I could read </span><em id="em_000549" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000549">all </em><span class="text" id="span_001149" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001149">the journals and conference proceedings; I could stay current in </span><em id="em_000550" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000550">all </em><span class="text" id="span_001150" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001150">the discipline. Today my intellectual life has seen me regretfully kissing subdiscipline interests goodbye one by one, as my portfolio has continuously overflowed beyond mastery. Too many interests, too many exciting opportunities for learning, research, and thought. What a marvelous predicament! Not only is the end not in sight, the pace is not slackening. We have many future joys.</span></p>
          <pagenum page="normal" id="p293" smilref="The_Mythical_Man_Month_Essay00008.smil#p293">293</pagenum>
        </level2>
        <level2 id="level2_000024">
          <h2 xml:space="preserve" id="h2_000024"><strong id="strong_000635"><em id="em_000551" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000551">Notes and References</em></strong></h2>
          <level3 id="level3_000018">
            <h3 xml:space="preserve" id="p_001843" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001843">Chapter 1</h3>
            <p xml:space="preserve" id="p_001844"><span class="text" id="span_001151" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001151">1. Ershov considers this not only a woe, but also a part of the joy. A. P. Ershov, "Aesthetics and the human factor in programming," </span><em id="em_000552" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000552">CACM, </em><span class="text" id="span_001152" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001152">15, 7 (July, 1972), pp. 501-505.</span></p>
          </level3>
          <level3 id="level3_000019">
            <h3 xml:space="preserve" id="p_001845" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001845">Chapter 2</h3>
            <p xml:space="preserve" id="p_001846" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001846">1. V. A. Vyssotsky of Bell Telephone Laboratories estimates that a large project can sustain a manpower buildup of 30 percent per year. More than that strains and even inhibits the evolution of the essential informal structure and its communication pathways discussed in Chapter 7.</p>
            <p xml:space="preserve" id="p_001847" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001847">F. J. Corbató of MIT points out that a long project must anticipate a turnover of 20 percent per year, and these must be both technically trained and integrated into the formal structure.</p>
            <p xml:space="preserve" id="p_001848"><span class="text" id="span_001153" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001153">2. C. Portman of International Computers Limited says, </span><em id="em_000553" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000553">"When everything has been seen to work, all integrated, you have four more months work to do." </em><span class="text" id="span_001154" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001154">Several other sets of schedule divisions are given in Wolverton, R. W., "The cost of developing large-scale software," </span><em id="em_000554" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000554">IEEE Trans, on Computers, </em><span class="text" id="span_001155" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001155">C-23, 6 (June, 1974) pp. 615-636.</span></p>
            <p xml:space="preserve" id="p_001849"><span class="text" id="span_001156" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001156">3. Figures 2.5 through 2.8 are due to Jerry Ogdin, who in quoting my example from an earlier publication of this chapter much improved its illustration. Ogdin, J. L., "The Mongolian hordes versus superprogrammer," </span><em id="em_000555" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000555">Infosystems </em><span class="text" id="span_001157" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001157">(Dec, 1972), pp. 20-23.</span></p>
            <p xml:space="preserve" id="p_001850"><strong id="strong_000636" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000636">293</strong></p>
            <pagenum page="normal" id="p294" smilref="The_Mythical_Man_Month_Essay00008.smil#p294">294</pagenum>
          </level3>
          <level3 id="level3_000020">
            <h3 xml:space="preserve" id="p_001851"><strong id="strong_000637" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000637">Chapter 3</strong></h3>
            <p xml:space="preserve" id="p_001852"><strong id="strong_000638" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000638">1. </strong><span class="text" id="span_001158" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001158">Sackman, H., W. J. Erikson, and E. E. Grant, "Exploratory experimental studies comparing online and offline programming performance," </span><em id="em_000556" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000556">CACM, </em><span class="text" id="span_001159" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001159">11, 1 (Jan., 1968), pp. 3-11.</span></p>
            <p xml:space="preserve" id="p_001853" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001853">2. Mills, H., "Chief programmer teams, principles, and procedures," IBM Federal Systems Division Report FSC 71-5108, Gaithersburg, Md., 1971.</p>
            <p xml:space="preserve" id="p_001854"><span class="text" id="span_001160" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001160">3. Baker, F. T., "Chief programmer team management of production programming," </span><em id="em_000557" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000557">IBM Sys. J., </em><span class="text" id="span_001161" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001161">11, 1 (1972).</span></p>
          </level3>
          <level3 id="level3_000021">
            <h3 xml:space="preserve" id="p_001855"><strong id="strong_000639" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000639">Chapter 4</strong></h3>
            <p xml:space="preserve" id="p_001856"><strong id="strong_000640" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000640">1. </strong><span class="text" id="span_001162" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001162">Eschapasse, M., </span><em id="em_000558" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000558">Reims Cathedral, </em><span class="text" id="span_001163" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001163">Caisse Nationale des Monuments Historiques, Paris, 1967.</span></p>
            <p xml:space="preserve" id="p_001857"><span class="text" id="span_001164" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001164">2. Brooks, F. P., "Architectural philosophy," in W. Buchholz (éd.), </span><em id="em_000559" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000559">Planning A Computer System. </em><span class="text" id="span_001165" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001165">New York: McGraw-Hill, 1962.</span></p>
            <p xml:space="preserve" id="p_001858"><span class="text" id="span_001166" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001166">3. Blaauw, G. A., "Hardware requirements for the fourth generation," in F. Gruenberger (éd.), </span><em id="em_000560" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000560">Fourth Generation Computers. </em><span class="text" id="span_001167" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001167">Englewood Cliffs, N.J.: Prentice-Hall, 1970.</span></p>
            <p xml:space="preserve" id="p_001859"><span class="text" id="span_001168" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001168">4. Brooks, F. P., and K. E. Iverson, </span><em id="em_000561" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000561">Automatic Data Processing, System/360 Edition. </em><span class="text" id="span_001169" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001169">New York: Wiley, 1969, Chapter 5.</span></p>
            <p xml:space="preserve" id="p_001860"><span class="text" id="span_001170" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001170">5. Glegg, G. L., </span><em id="em_000562" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000562">The Design of Design. </em><span class="text" id="span_001171" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001171">Cambridge: Cambridge Univ. Press, 1969, says </span><em id="em_000563" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000563">"At first sight, the idea of any rules or principles being superimposed on the creative mind seems more likely to hinder than to help, but this is quite untrue in practice. Disciplined thinking focusses inspiration rather than blinkers it. "</em></p>
            <p xml:space="preserve" id="p_001861"><span class="text" id="span_001172" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001172">6. Conway, R. W., "The PL/C Compiler," </span><em id="em_000564" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000564">Proceedings of a Conf. on Definition and Implementation of Universal Programming Languages. </em><span class="text" id="span_001173" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001173">Stuttgart, 1970.</span></p>
            <p xml:space="preserve" id="p_001862" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001862">7. For a good discussion of the necessity for programming technology, see C. H. Reynolds, "What's wrong with com-</p>
            <pagenum page="normal" id="p295" smilref="The_Mythical_Man_Month_Essay00008.smil#p295">295</pagenum>
            <p xml:space="preserve" id="p_001863"><span class="text" id="span_001174" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001174">pu ter programming management?" in G. F. Weinwuim (éd.), </span><em id="em_000565" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000565">On the Management of Computer Programming. </em><span class="text" id="span_001175" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001175">Philadelphia: Auerbach, 1971, pp. 35-42.</span></p>
          </level3>
          <level3 id="level3_000022">
            <h3 xml:space="preserve" id="p_001864"><strong id="strong_000641" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000641">Chapter 5</strong></h3>
            <p xml:space="preserve" id="p_001865"><span class="text" id="span_001176" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001176">1. Strachey, C, "Review of </span><em id="em_000566" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000566">Planning a Computer System," Comp. ]., </em><span class="text" id="span_001177" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001177">5, 2 (July, 1962), pp. 152-153.</span></p>
            <p xml:space="preserve" id="p_001866" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001866">2. This applies only to the control programs. Some of the compiler teams in the OS/360 effort were building their third or fourth systems, and the excellence of their products shows it.</p>
            <p xml:space="preserve" id="p_001867"><span class="text" id="span_001178" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001178">3. Shell, D. L., "The Share 709 system: a cooperative effort"; Greenwald, I. D., and M. Kane, "The Share 709 system: programming and modification"; Boehm, E. M., and T. B. Steel, Jr., "The Share 709 system: machine implementation of symbolic programming"; all in </span><em id="em_000567" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000567">JACM, </em><span class="text" id="span_001179" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001179">6, 2 (April, 1959), pp.123-140.</span></p>
          </level3>
          <level3 id="level3_000023">
            <h3 xml:space="preserve" id="p_001868"><strong id="strong_000642" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000642">Chapter 6</strong></h3>
            <p xml:space="preserve" id="p_001869"><span class="text" id="span_001180" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001180">1. Neustadt, R. E., </span><em id="em_000568" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000568">Presidential Power. </em><span class="text" id="span_001181" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001181">New York: Wiley, 1960, Chapter 2.</span></p>
            <p xml:space="preserve" id="p_001870"><span class="text" id="span_001182" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001182">2. Backus, J. W., "The syntax and semantics of the proposed international algebraic language." </span><em id="em_000569" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000569">Proc. Intl. Conf. Inf. Proc. UNESCO, </em><span class="text" id="span_001183" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001183">Paris, 1959, published by R. Oldenbourg, Munich, and Butterworth, London. Besides this, a whole collection of papers on the subject is contained in T. B. Steel, Jr. (éd.), </span><em id="em_000570" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000570">Formal Language Description Languages for Computer Programming. </em><span class="text" id="span_001184" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001184">Amsterdam: North Holland, (1966).</span></p>
            <p xml:space="preserve" id="p_001871"><span class="text" id="span_001185" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001185">3. Lucas, P., and K. Walk, "On the formal description of PL/I," </span><em id="em_000571" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000571">Annual Review in Automatic Programming Language. </em><span class="text" id="span_001186" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001186">New York: Wiley, 1962, Chapter 2, p. 2.</span></p>
            <p xml:space="preserve" id="p_001872"><span class="text" id="span_001187" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001187">4. Iverson, K. E., </span><em id="em_000572" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000572">A Programming Language. </em><span class="text" id="span_001188" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001188">New York: Wiley, 1962, Chapter 2.</span></p>
            <pagenum page="normal" id="p296" smilref="The_Mythical_Man_Month_Essay00008.smil#p296">296</pagenum>
            <p xml:space="preserve" id="p_001873"><span class="text" id="span_001189" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001189">5. Falkoff, A. D., K. E. Iverson, E. H. Sussenguth, "A formal description of System/360," </span><em id="em_000573" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000573">IBM Systems Journal, </em><span class="text" id="span_001190" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001190">3, 3 (1964), pp. 198-261.</span></p>
            <p xml:space="preserve" id="p_001874"><span class="text" id="span_001191" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001191">6. Bell, C. G., and A. Newell, </span><em id="em_000574" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000574">Computer Structures. </em><span class="text" id="span_001192" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001192">New York: McGraw-Hill, 1970, pp. 120-136, 517-541.</span></p>
            <p xml:space="preserve" id="p_001875" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001875">7. Bell, C. G., private communication.</p>
          </level3>
          <level3 id="level3_000024">
            <h3 xml:space="preserve" id="p_001876"><strong id="strong_000643" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000643">Chapter 7</strong></h3>
            <p xml:space="preserve" id="p_001877" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001877">1. Parnas, D. L., "Information distribution aspects of design methodology," Carnegie-Mellon Univ., Dept. of Computer Science Technical Report, February, 1971.</p>
            <p xml:space="preserve" id="p_001878" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001878">2. Copyright 1939, 1940 Street &amp; Smith Publications, Copyright 1950, 1967 by Robert A. Heinlein. Published by arrangement with Spectrum Literary Agency.</p>
          </level3>
          <level3 id="level3_000025">
            <h3 xml:space="preserve" id="p_001879"><strong id="strong_000644" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000644">Chapter 8</strong></h3>
            <p xml:space="preserve" id="p_001880"><span class="text" id="span_001193" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001193">1. Sackman, H., W. J. Erikson, and E. E. Grant, "Exploratory experimentation studies comparing online and offline programming performance," </span><em id="em_000575" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000575">CACM, </em><span class="text" id="span_001194" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001194">11, 1 (Jan., 1968), pp. 3-11.</span></p>
            <p xml:space="preserve" id="p_001881"><span class="text" id="span_001195" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001195">2. Nanus, B., and L. Farr, "Some cost contributors to large-scale programs," </span><em id="em_000576" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000576">AFIPS Proc. SJCC, </em><span class="text" id="span_001196" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001196">25 (Spring, 1964), pp. 239-248.</span></p>
            <p xml:space="preserve" id="p_001882" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001882">3. Weinwurm, G. F., "Research in the management of computer programming," Report SP-2059, System Development Corp., Santa Monica, 1965.</p>
            <p xml:space="preserve" id="p_001883" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001883">4. Morin, L. H., "Estimation of resources for computer programming projects," M. S. thesis, Univ. of North Carolina, Chapel Hill, 1974.</p>
            <p xml:space="preserve" id="p_001884" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001884">5. Portman, C, private communication.</p>
            <p xml:space="preserve" id="p_001885" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001885">6. An unpublished 1964 study by E. F. Bardain shows programmers realizing 27 percent productive time. (Quoted by</p>
            <pagenum page="normal" id="p297" smilref="The_Mythical_Man_Month_Essay00008.smil#p297">297</pagenum>
            <p xml:space="preserve" id="p_001886"><span class="text" id="span_001197" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001197">D. B. Mayer and A. W. Stalnaker, "Selection and evaluation of computer personnel," </span><em id="em_000577" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000577">Proc. 23rd ACM Conf., </em><span class="text" id="span_001198" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001198">1968, p. 661.)</span></p>
            <p xml:space="preserve" id="p_001887" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001887">7. Aron, J., private communication.</p>
            <p xml:space="preserve" id="p_001888"><span class="text" id="span_001199" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001199">8. Paper given at a panel session and not included in the </span><em id="em_000578" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000578">AFIPS Proceedings.</em></p>
            <p xml:space="preserve" id="p_001889"><span class="text" id="span_001200" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001200">9. Wolverton, R. W., "The cost of developing large-scale software," </span><em id="em_000579" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000579">IEEE Trans, on Computers, </em><span class="text" id="span_001201" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001201">C-23, 6 (June, 1974) pp. 615-636. This important recent paper contains data on many of the issues of this chapter, as well as confirming the productivity conclusions.</span></p>
            <p xml:space="preserve" id="p_001890" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001890">10. Corbató, F. J., "Sensitive issues in the design of multi-use systems," lecture at the opening of the Honeywell EDP Technology Center, 1968.</p>
            <p xml:space="preserve" id="p_001891"><span class="text" id="span_001202" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001202">11. W. M. Taliaffero also reports a constant productivity of 2400 statements/year in assembler, Fortran, and Cobol. See "Modularity. The key to system growth potential," </span><em id="em_000580" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000580">Software, </em><span class="text" id="span_001203" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001203">1, 3 (July 1971) pp. 245-257.</span></p>
            <p xml:space="preserve" id="p_001892"><span class="text" id="span_001204" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001204">12. E. A. Nelson's System Development Corp. Report TM-3225, </span><em id="em_000581" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000581">Management Handbook for the Estimation of Computer Programming Costs, </em><span class="text" id="span_001205" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001205">shows a 3-to-l productivity improvement for high-level language (pp. 66-67), although his standard deviations are wide.</span></p>
          </level3>
          <level3 id="level3_000026">
            <h3 xml:space="preserve" id="p_001893" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001893">Chapter 9</h3>
            <p xml:space="preserve" id="p_001894"><span class="text" id="span_001206" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001206">1. Brooks, F. P. and K. E. Iverson, </span><em id="em_000582" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000582">Automatic Data Processing, System/360 Edition. </em><span class="text" id="span_001207" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001207">New York: Wiley, 1969, Chapter 6.</span></p>
            <p xml:space="preserve" id="p_001895"><span class="text" id="span_001208" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001208">2. Knuth, D. E., </span><em id="em_000583" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000583">The Art of Computer Programming, </em><span class="text" id="span_001209" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001209">Vols. 1-3. Reading, Mass.: Addison-Wesley, 1968, ff.</span></p>
          </level3>
          <level3 id="level3_000027">
            <h3 xml:space="preserve" id="p_001896" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001896">Chapter 10</h3>
            <p xml:space="preserve" id="p_001897"><span class="text" id="span_001210" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001210">1. Conway, M. E., "How do committees invent?" </span><em id="em_000584" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000584">Datamation, </em><span class="text" id="span_001211" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001211">14, 4 (April, 1968), pp. 28-31.</span></p>
            <pagenum page="normal" id="p298" smilref="The_Mythical_Man_Month_Essay00008.smil#p298">298</pagenum>
          </level3>
          <level3 id="level3_000028">
            <h3 xml:space="preserve" id="p_001898"><strong id="strong_000645" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000645">Chapter 11</strong></h3>
            <p xml:space="preserve" id="p_001899" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001899">1. Speech at Oglethorpe University, May 22, 1932.</p>
            <p xml:space="preserve" id="p_001900"><span class="text" id="span_001212" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001212">2. An illuminating account of Multics experience on two successive systems is in F. J. Corbató, J. H. Saltzer, and C. T. Clingen, "Multics--the first seven years," </span><em id="em_000585" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000585">AFIPS Proc SJCC, </em><span class="text" id="span_001213" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001213">40 (1972), pp. 571-583.</span></p>
            <p xml:space="preserve" id="p_001901"><span class="text" id="span_001214" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001214">3. Cosgrove, J., "Needed: a new planning framework," </span><em id="em_000586" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000586">Datamation, </em><span class="text" id="span_001215" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001215">17, 23 (Dec, 1971), pp. 37-39.</span></p>
            <p xml:space="preserve" id="p_001902"><span class="text" id="span_001216" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001216">4. The matter of design change is complex, and I oversimplify here. See J. H. Saltzer, "Evolutionary design of complex systems," in D. Eckman (éd.), </span><em id="em_000587" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000587">Systems: Research and Design. </em><span class="text" id="span_001217" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001217">New York: Wiley, 1961. When all is said and done, however, I still advocate building a pilot system whose discarding is planned.</span></p>
            <p xml:space="preserve" id="p_001903"><span class="text" id="span_001218" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001218">5. Campbell, E., "Report to the AEC Computer Information Meeting," December, 1970. The phenomenon is also discussed by J. L. Ogdin in "Designing reliable software," </span><em id="em_000588" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000588">Datamation, </em><span class="text" id="span_001219" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001219">18, 7 (July, 1972), pp. 71-78. My experienced friends seem divided rather evenly as to whether the curve finally goes down again.</span></p>
            <p xml:space="preserve" id="p_001904" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001904">6. Lehman, M., and L. Belady, "Programming system dynamics," given at the ACM SIGOPS Third Symposium on Operating System Principles, October, 1971.</p>
            <p xml:space="preserve" id="p_001905"><span class="text" id="span_001220" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001220">7. Lewis, C. S., </span><em id="em_000589" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000589">Mere Christianity. </em><span class="text" id="span_001221" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001221">New York: Macmillan, 1960, p. 54.</span></p>
          </level3>
          <level3 id="level3_000029">
            <h3 xml:space="preserve" id="p_001906"><strong id="strong_000646" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000646">Chapter 12</strong></h3>
            <p xml:space="preserve" id="p_001907"><span class="text" id="span_001222" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001222">1. See also J. W. Pomeroy, </span><em id="em_000590" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000590">"A </em><span class="text" id="span_001223" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001223">guide to programming tools and techniques," </span><em id="em_000591" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000591">IBM Sys. J., </em><span class="text" id="span_001224" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001224">11, 3 (1972), pp. 234-254.</span></p>
            <p xml:space="preserve" id="p_001908"><span class="text" id="span_001225" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001225">2. Landy, B., and R. M. Needham, "Software engineering techniques used in the development of the Cambridge Multiple-Access System," </span><em id="em_000592" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000592">Software, 1, </em><span class="text" id="span_001226" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001226">2 (April, 1971), pp. 167-173.</span></p>
            <pagenum page="normal" id="p299" smilref="The_Mythical_Man_Month_Essay00008.smil#p299">299</pagenum>
            <p xml:space="preserve" id="p_001909"><span class="text" id="span_001227" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001227">3. Corbató, F. J., "PL/I as a tool for system programming," </span><em id="em_000593" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000593">Datamation, </em><span class="text" id="span_001228" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001228">15, 5 (May, 1969), pp. 68-76.</span></p>
            <p xml:space="preserve" id="p_001910" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001910">4. Hopkins, M., "Problems of PL/I for system programming," IBM Research Report RC 3489, Yorktown Heights, N.Y., Augusto, 1971.</p>
            <p xml:space="preserve" id="p_001911"><span class="text" id="span_001229" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001229">5. Corbató, F. J., J. H. Saltzer, and C. T. Clingen, "Multics-- the first seven years," </span><em id="em_000594" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000594">AFIPS Proc SJCC, </em><span class="text" id="span_001230" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001230">40 (1972), pp. 571-582. </span><em id="em_000595" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000595">"Only a half-dozen areas which were written in PL/I have been recoded in machine language for reasons of squeezing out the utmost in performance. Several programs, originally in machine language, have been recoded in PL/1 to increase their maintainabil-ity."</em></p>
            <p xml:space="preserve" id="p_001912"><span class="text" id="span_001231" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001231">6. To quote Corbató's paper cited in reference 3: </span><em id="em_000596" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000596">"PL/I is here now and the alternatives are still untested. " </em><span class="text" id="span_001232" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001232">But see a quite contrary view, well-documented, in Henricksen, J. O. and R. E. Merwin, "Programming language efficiency in real-time software systems," </span><em id="em_000597" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000597">AFIPS Proc SJCC, </em><span class="text" id="span_001233" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001233">40 (1972) pp. 155-161.</span></p>
            <p xml:space="preserve" id="p_001913"><span class="text" id="span_001234" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001234">7. Not all agree. Harlan Mills says, in a private communication, </span><em id="em_000598" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000598">"My experience begins to tell me that in production programming the person to put at the terminal is the secretary. The idea is to make programming a more public practice, under common scrutiny of many team members, rather than a private art. "</em></p>
            <p xml:space="preserve" id="p_001914" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001914">8. Harr, J., "Programming Experience for the Number 1 Electronic Switching System," paper given at the 1969 SJCC.</p>
          </level3>
          <level3 id="level3_000030">
            <h3 xml:space="preserve" id="p_001915"><strong id="strong_000647" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000647">Chapter 13</strong></h3>
            <p xml:space="preserve" id="p_001916"><span class="text" id="span_001235" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001235">1. Vyssotsky, V. A., "Common sense in designing testable software," lecture at The Computer Program Test Methods Symposium, Chapel Hill, N.C., 1972. Most of Vyssotsky's lecture is contained in Hetzel, W. C. (éd.), </span><em id="em_000599" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000599">Program Test Methods. </em><span class="text" id="span_001236" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001236">Englewood Cliffs, N.J.: Prentice-Hall, 1972, pp. 41-47.</span></p>
            <p xml:space="preserve" id="p_001917"><span class="text" id="span_001237" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001237">2. Wirth, N., "Program development by stepwise refinement," </span><em id="em_000600" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000600">CACM </em><span class="text" id="span_001238" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001238">14, 4 (April, 1971), pp. 221-227. See also</span></p>
            <pagenum page="normal" id="p300" smilref="The_Mythical_Man_Month_Essay00008.smil#p300">300</pagenum>
            <p xml:space="preserve" id="p_001918"><span class="text" id="span_001239" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001239">Mills, H. "Top-down programming in large systems," in R. Rustin (éd.). </span><em id="em_000601" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000601">Debugging Techniques in Large Systems. </em><span class="text" id="span_001240" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001240">Engle-wood Cliffs, N.J.: Prentice-Hall, 1971, pp. 41-55 and Baker, F. T., "System quality through structured programming," </span><em id="em_000602" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000602">AFIPS Proc FJCC, </em><span class="text" id="span_001241" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001241">41-1 (1972), pp. 339-343.</span></p>
            <p xml:space="preserve" id="p_001919"><span class="text" id="span_001242" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001242">3. Dahl, O. J., E. W. Dijkstra, and C. A. R. Hoare, </span><em id="em_000603" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000603">Structured Programming. </em><span class="text" id="span_001243" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001243">London and New York: Academic Press, 1972. This volume contains the fullest treatment. See also Dijk-stra's germinal letter, "GOTO statement considered harmful," </span><em id="em_000604" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000604">CACM, </em><span class="text" id="span_001244" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001244">11, 3 (March, 1968), pp. 147-148.</span></p>
            <p xml:space="preserve" id="p_001920"><span class="text" id="span_001245" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001245">4. Böhm, C, and A. Jacopini, "Flow diagrams, Turing machines, and languages with only two formation rules," </span><em id="em_000605" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000605">CACM, </em><span class="text" id="span_001246" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001246">9, 5 (May, 1966), pp. 366-371.</span></p>
            <p xml:space="preserve" id="p_001921"><span class="text" id="span_001247" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001247">5. Codd, E. F., E. S. Lowry, E. McDonough, and C. A. Scalzi, "Multiprogramming STRETCH: Feasibility considerations," </span><em id="em_000606" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000606">CACM, </em><span class="text" id="span_001248" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001248">2, 11 (Nov., 1959), pp. 13-17.</span></p>
            <p xml:space="preserve" id="p_001922"><span class="text" id="span_001249" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001249">6. Strachey, C, "Time sharing in large fast computers," </span><em id="em_000607" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000607">Proc. Int. Conf. on Info. Processing, </em><span class="text" id="span_001250" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001250">UNESCO (June, 1959), pp. 336-341. See also Codd's remarks on p. 341, where he reported progress on work like that proposed in Strachey's paper.</span></p>
            <p xml:space="preserve" id="p_001923"><span class="text" id="span_001251" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001251">7. Corbató, F. J., M. Merwin-Daggett, R. C. Daley, "An experimental time-sharing system," </span><em id="em_000608" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000608">AFIPS Proc. SJCC, </em><span class="text" id="span_001252" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001252">2, (1962), pp. 335-344. Reprinted in S. Rosen, </span><em id="em_000609" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000609">Programming Systems and Languages. </em><span class="text" id="span_001253" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001253">New York: McGraw-Hill, 1967, pp. 683-698.</span></p>
            <p xml:space="preserve" id="p_001924" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001924">8. Gold, M. M., "A methodology for evaluating time-shared computer system usage," Ph.D. dissertation, Carnegie-Mellon University, 1967, p. 100.</p>
            <p xml:space="preserve" id="p_001925"><span class="text" id="span_001254" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001254">9. Gruenberger, F., "Program testing and validating," </span><em id="em_000610" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000610">Datamation, </em><span class="text" id="span_001255" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001255">14, 7, (July, 1968), pp. 39-47.</span></p>
            <p xml:space="preserve" id="p_001926"><span class="text" id="span_001256" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001256">10. Ralston, A., </span><em id="em_000611" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000611">Introduction to Programming and Computer Science. </em><span class="text" id="span_001257" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001257">New York: McGraw-Hill, 1971, pp. 237-244.</span></p>
            <p xml:space="preserve" id="p_001927"><span class="text" id="span_001258" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001258">11. Brooks, F. P., and K. E. Iverson, </span><em id="em_000612" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000612">Automatic Data Processing, System/360 Edition. </em><span class="text" id="span_001259" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001259">New York: Wiley, 1969, pp. 296-299.</span></p>
            <pagenum page="normal" id="p301" smilref="The_Mythical_Man_Month_Essay00008.smil#p301">301</pagenum>
            <p xml:space="preserve" id="p_001928"><span class="text" id="span_001260" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001260">12. A good treatment of development of specifications and of system build and test is given by F. M. Trapnell, "A systematic approach to the development of system programs," </span><em id="em_000613" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000613">AFIPS Proc SJCC, </em><span class="text" id="span_001261" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001261">34 (1969) pp. 411-418.</span></p>
            <p xml:space="preserve" id="p_001929"><span class="text" id="span_001262" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001262">13. A real-time system will require an environment simulator. See, for example, M. G. Ginzberg, "Notes on testing realtime system programs," </span><em id="em_000614" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000614">IBM Sys. </em><span class="text" id="span_001263" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001263">/., 4, 1 (1965), pp. 58-72.</span></p>
            <p xml:space="preserve" id="p_001930" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001930">14. Lehman, M., and L. Belady, "Programming system dynamics," given at the ACM SIGOPS Third Symposium on Operating System Principles, October, 1971.</p>
          </level3>
          <level3 id="level3_000031">
            <h3 xml:space="preserve" id="p_001931"><strong id="strong_000648" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000648">Chapter 14</strong></h3>
            <p xml:space="preserve" id="p_001932"><span class="text" id="span_001264" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001264">1. See C. H. Reynolds, "What's wrong with computer programming management?" in G. F. Weinwurm (éd.), </span><em id="em_000615" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000615">On the Management of Computer Programming. </em><span class="text" id="span_001265" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001265">Philadelphia: Auer-bach, 1971, pp. 35^2.</span></p>
            <p xml:space="preserve" id="p_001933"><span class="text" id="span_001266" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001266">2. King, W. R., and T. A. Wilson, "Subjective time estimates in critical path planning--a preliminary analysis," </span><em id="em_000616" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000616">Mgt. Sci., </em><span class="text" id="span_001267" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001267">13, 5 (Jan., 1967), pp. 307-320, and sequel, W. R. King, D. M. Witterrongel, K. D. Hezel, "On the analysis of critical path time estimating behavior," </span><em id="em_000617" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000617">Mgt. Sci., </em><span class="text" id="span_001268" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001268">14, 1 (Sept., 1967), pp. 79-84.</span></p>
            <p xml:space="preserve" id="p_001934"><span class="text" id="span_001269" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001269">3. For a fuller discussion, see Brooks, F. P., and K. E. Iverson, </span><em id="em_000618" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000618">Automatic Data Processing, System/360 Edition, </em><span class="text" id="span_001270" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001270">New York: Wiley, 1969, pp. 428-430.</span></p>
            <p xml:space="preserve" id="p_001935" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001935">4. Private communication.</p>
          </level3>
          <level3 id="level3_000032">
            <h3 xml:space="preserve" id="p_001936"><strong id="strong_000649" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000649">Chapter 15</strong></h3>
            <p xml:space="preserve" id="p_001937"><span class="text" id="span_001271" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001271">1. Goldstine, H. H., and J. von Neumann, "Planning and coding problems for an electronic computing instrument," Part II, Vol. 1, report prepared for the U.S. Army Ordinance Department, 1947; reprinted in J. von Neumann, </span><em id="em_000619" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000619">Collected Works, </em><span class="text" id="span_001272" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001272">A. H. Taub (éd.), Vol. v., New York: McMillan, pp. 80-151.</span></p>
            <pagenum page="normal" id="p302" smilref="The_Mythical_Man_Month_Essay00008.smil#p302">302</pagenum>
            <p xml:space="preserve" id="p_001938" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001938">2. Private communication, 1957. The argument is published in Iverson, K. E., "The Use of APL in Teaching," Yorktown, N.Y.: IBM Corp., 1969.</p>
            <p xml:space="preserve" id="p_001939"><span class="text" id="span_001273" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001273">3. Another list of techniques for PL/I is given by A. B. Walter and M. Bohl in "From better to best--tips for good programming," </span><em id="em_000620" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000620">Software Age, </em><span class="text" id="span_001274" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001274">3,11 (Nov., 1969), pp. 46-50.</span></p>
            <p xml:space="preserve" id="p_001940"><span class="text" id="span_001275" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001275">The same techniques can be used in Algol and even Fortran. D. E. Lang of the University of Colorado has a Fortran formatting program called STYLE that accomplishes such a result. See also D. D. McCracken and G. M. Weinberg, "How to write a readable FORTRAN program," </span><em id="em_000621" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000621">Datamation, </em><span class="text" id="span_001276" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001276">18,10 (Oct., 1972), pp. 73-77.</span></p>
          </level3>
          <level3 id="level3_000033">
            <h3 xml:space="preserve" id="p_001941"><strong id="strong_000650" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000650">Chapter 16</strong></h3>
            <p xml:space="preserve" id="p_001942"><strong id="strong_000651" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000651">1. </strong><span class="text" id="span_001277" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001277">The essay entitled "No Silver Bullet" is from Information Processing 1986, the Proceedings of the IFIP Tenth World Computing Conference, edited by H.-J. Kugler (1986), pp. 1069-76. Reprinted with the kind permission of IFIP and Elsevier Science B. V., Amsterdam, The Netherlands.</span></p>
            <p xml:space="preserve" id="p_001943"><span class="text" id="span_001278" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001278">2. Parnas, D. L., "Designing software for ease of extension and contraction," </span><em id="em_000622" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000622">IEEE Trans, on SE, </em><span class="text" id="span_001279" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001279">5, 2 (March, 1979), pp. 128-138.</span></p>
            <p xml:space="preserve" id="p_001944"><span class="text" id="span_001280" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001280">3. Booch, G., "Object-oriented design," in </span><em id="em_000623" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000623">Software Engineering with Ada. </em><span class="text" id="span_001281" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001281">Menlo Park, Calif.: Benjamin/Cummings, 1983.</span></p>
            <p xml:space="preserve" id="p_001945"><span class="text" id="span_001282" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001282">4. Mostow, J., éd., Special Issue on Artificial Intelligence and Software Engineering, </span><em id="em_000624" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000624">IEEE Trans, on SE, </em><span class="text" id="span_001283" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001283">11, 11 (Nov., 1985).</span></p>
            <p xml:space="preserve" id="p_001946"><span class="text" id="span_001284" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001284">5. Parnas, D. L., "Software aspects of strategic defense systems," </span><em id="em_000625" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000625">Communications of the ACM, </em><span class="text" id="span_001285" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001285">28, 12 (Dec, 1985), pp. 1326-1335. Also in </span><em id="em_000626" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000626">American Scientist, </em><span class="text" id="span_001286" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001286">73, 5 (Sept.-Oct, 1985), pp. 432-440.</span></p>
            <p xml:space="preserve" id="p_001947"><span class="text" id="span_001287" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001287">6. Balzer, R., </span><em id="em_000627" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000627">"A </em><span class="text" id="span_001288" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001288">15-year perspective on automatic programming," in Mostow, </span><em id="em_000628" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000628">op. cit.</em></p>
            <p xml:space="preserve" id="p_001948"><em id="em_000629" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000629">7. </em><span class="text" id="span_001289" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001289">Mostow, op. cit.</span></p>
            <p xml:space="preserve" id="p_001949" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001949">8. Parnas, 1985, op. cit.</p>
            <pagenum page="normal" id="p303" smilref="The_Mythical_Man_Month_Essay00008.smil#p303">303</pagenum>
            <p xml:space="preserve" id="p_001950"><span class="text" id="span_001290" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001290">9. Raeder, G., "A survey of current graphical programming techniques," in R. B. Grafton and T. Ichikawa, eds., Special Issue on Visual Programming, </span><em id="em_000630" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000630">Computer, </em><span class="text" id="span_001291" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001291">18, 8 (Aug., 1985), pp. 11-25.</span></p>
            <p xml:space="preserve" id="p_001951" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001951">10. The topic is discussed in Chapter 15 of this book.</p>
            <p xml:space="preserve" id="p_001952"><span class="text" id="span_001292" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001292">11. Mills, H. D., "Top-down programming in large systems," </span><em id="em_000631" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000631">Debugging Techniques in Large Systems, </em><span class="text" id="span_001293" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001293">R. Rustin, éd., Engle-wood Cliffs, N.J., Prentice-Hall, 1971.</span></p>
            <p xml:space="preserve" id="p_001953"><span class="text" id="span_001294" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001294">12. Boehm, B. W., "A spiral model of software development and enhancement," </span><em id="em_000632" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000632">Computer, </em><span class="text" id="span_001295" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001295">20, 5 (May, 1985), pp. 43-57.</span></p>
          </level3>
          <level3 id="level3_000034">
            <h3 xml:space="preserve" id="p_001954"><strong id="strong_000652" smilref="The_Mythical_Man_Month_Essay00008.smil#strong_000652">Chapter </strong><span class="text" id="span_001296" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001296">17</span></h3>
            <p xml:space="preserve" id="p_001955" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001955">Material quoted without citation is from personal communications.</p>
            <p xml:space="preserve" id="p_001956"><span class="text" id="span_001297" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001297">1. Brooks, F. P., "No silver bullet--essence and accidents of software engineering," in </span><em id="em_000633" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000633">Information Processing 86, </em><span class="text" id="span_001298" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001298">H. J. Kugler, ed. Amsterdam: Elsevier Science (North Holland), 1986, pp. 1069-1076.</span></p>
            <p xml:space="preserve" id="p_001957"><span class="text" id="span_001299" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001299">2. Brooks, F. P., "No silver bullet--essence and accidents of software engineering," </span><em id="em_000634" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000634">Computer </em><span class="text" id="span_001300" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001300">20,4 (April, 1987), pp. 10-19.</span></p>
            <p xml:space="preserve" id="p_001958"><span class="text" id="span_001301" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001301">3. Several of the letters, and a reply, appeared in the July, 1987 issue of </span><em id="em_000635" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000635">Computer.</em></p>
            <p xml:space="preserve" id="p_001959"><span class="text" id="span_001302" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001302">It is a special pleasure to observe that whereas "NSB" received no awards, Bruce M. Skwiersky's review of it was selected as the best review published in </span><em id="em_000636" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000636">Computing Reviews </em><span class="text" id="span_001303" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001303">in 1988. E. A. Weiss, "Editorial," </span><em id="em_000637" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000637">Computing Reviews </em><span class="text" id="span_001304" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001304">(June, 1989), pp. 283-284, both announces the award and reprints Skwiersky's review. The review has one significant error: "sixfold" should be "10</span><sup id="sup_000144" smilref="The_Mythical_Man_Month_Essay00008.smil#sup_000144">6</sup><span class="text" id="span_001305" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001305">."</span></p>
            <p xml:space="preserve" id="p_001960"><span class="text" id="span_001306" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001306">4. "According to Aristotle, and in Scholastic philosophy, an accident is a quality which does not belong to a thing by right of that thing's essential or substantial nature but occurs in it as an effect of other causes." </span><em id="em_000638" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000638">Webster's New International Dictionary of the English Language, </em><span class="text" id="span_001307" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001307">2d éd., Springfield, Mass.: G. C. Merriam, 1960.</span></p>
            <pagenum page="normal" id="p304" smilref="The_Mythical_Man_Month_Essay00008.smil#p304">304</pagenum>
            <p xml:space="preserve" id="p_001961"><span class="text" id="span_001308" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001308">5. Sayers, Dorothy L., </span><em id="em_000639" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000639">The Mind of the Maker. </em><span class="text" id="span_001309" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001309">New York: Har-court, Brace, 1941.</span></p>
            <p xml:space="preserve" id="p_001962"><span class="text" id="span_001310" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001310">6. Glass, R. L., and S. A. Conger, "Research software tasks: Intellectual or clerical?" </span><em id="em_000640" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000640">Information and Management, </em><span class="text" id="span_001311" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001311">23, 4 (1992). The authors report a measurement of software requirements specification to be about 80% intellectual and 20% clerical. Fjelstadt and Hamlen, 1979, get essentially the same results for application software maintenance. I know of no attempt to measure this fraction for the whole end-to-end task.</span></p>
            <p xml:space="preserve" id="p_001963"><span class="text" id="span_001312" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001312">7. Herzberg, F., B. Mausner, and B. B. Sayderman. </span><em id="em_000641" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000641">The Motivation to Work, </em><span class="text" id="span_001313" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001313">2nd ed. London: Wiley, 1959.</span></p>
            <p xml:space="preserve" id="p_001964"><span class="text" id="span_001314" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001314">8. Cox, B. J., "There is a silver bullet," </span><em id="em_000642" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000642">Byte </em><span class="text" id="span_001315" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001315">(Oct., 1990), pp. 209-218.</span></p>
            <p xml:space="preserve" id="p_001965"><span class="text" id="span_001316" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001316">9. Harel, D., "Biting the silver bullet: Toward a brighter future for system development," </span><em id="em_000643" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000643">Computer </em><span class="text" id="span_001317" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001317">(Jan., 1992), pp. 8-20.</span></p>
            <p xml:space="preserve" id="p_001966"><span class="text" id="span_001318" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001318">10. Pamas, D. L., "Software aspects of strategic defense systems," </span><em id="em_000644" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000644">Communications of the ACM, </em><span class="text" id="span_001319" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001319">28, 12 (Dec, 1985), pp. 1326-1335.</span></p>
            <p xml:space="preserve" id="p_001967"><span class="text" id="span_001320" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001320">11. Turski, W. M., "And no philosophers' stone, either," in </span><em id="em_000645" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000645">Information Processing 86, </em><span class="text" id="span_001321" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001321">H. J. Kugler, ed. Amsterdam: Elsevier Science (North Holland), 1986, pp. 1077-1080.</span></p>
            <p xml:space="preserve" id="p_001968"><span class="text" id="span_001322" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001322">12. Glass, R. L., and S. A. Conger, "Research Software Tasks: Intellectual or Clerical?" </span><em id="em_000646" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000646">Information and Management, </em><span class="text" id="span_001323" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001323">23, 4 (1992), pp. 183-192.</span></p>
            <p xml:space="preserve" id="p_001969"><span class="text" id="span_001324" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001324">13. </span><em id="em_000647" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000647">Review of Electronic Digital Computers, Proceedings of a Joint AIEE-IRE Computer Conference </em><span class="text" id="span_001325" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001325">(Philadelphia, Dec. 10-12, 1951). New York: American Institute of Electrical Engineers, pp. 13-20.</span></p>
            <p xml:space="preserve" id="p_001970"><span class="text" id="span_001326" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001326">14. </span><em id="em_000648" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000648">Ibid., </em><span class="text" id="span_001327" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001327">pp. 36, 68, 71, 97.</span></p>
            <p xml:space="preserve" id="p_001971"><span class="text" id="span_001328" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001328">15. </span><em id="em_000649" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000649">Proceedings of the Eastern Joint Computer Conference, </em><span class="text" id="span_001329" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001329">(Washington, Dec. 8-10, 1953). New York: Institute of Electrical Engineers, pp. 45-47.</span></p>
            <p xml:space="preserve" id="p_001972"><span class="text" id="span_001330" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001330">16. </span><em id="em_000650" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000650">Proceedings of the 1955 Western Joint Computer Conference </em><span class="text" id="span_001331" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001331">(Los</span></p>
            <pagenum page="normal" id="p305" smilref="The_Mythical_Man_Month_Essay00008.smil#p305">305</pagenum>
            <p xml:space="preserve" id="p_001973" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001973">Angeles, March 1-3, 1955). New York: Institute of Electrical Engineers.</p>
            <p xml:space="preserve" id="p_001974"><span class="text" id="span_001332" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001332">17. Everett, R. R., C. A. Zraket, and H. D. Bennington, "SAGE--A data processing system for air defense," </span><em id="em_000651" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000651">Proceedings of the Eastern Joint Computer Conference, </em><span class="text" id="span_001333" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001333">(Washington, Dec. 11-13, 1957). New York: Institute of Electrical Engineers.</span></p>
            <p xml:space="preserve" id="p_001975"><span class="text" id="span_001334" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001334">18. Harel, D., H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, A. Shtul-Trauring, "Statemate: A working environment for the development of complex reactive systems," </span><em id="em_000652" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000652">IEEE Trans, on SE, </em><span class="text" id="span_001335" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001335">16, 4 (1990), pp. 403-444.</span></p>
            <p xml:space="preserve" id="p_001976"><span class="text" id="span_001336" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001336">19. Jones, C, </span><em id="em_000653" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000653">Assessment and Control of Software Risks. </em><span class="text" id="span_001337" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001337">Engle-wood Cliffs, N.J.: Prentice-Hall, 1994. p. 619.</span></p>
            <p xml:space="preserve" id="p_001977"><span class="text" id="span_001338" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001338">20. Coqui, H., "Corporate survival: The software dimension," </span><em id="em_000654" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000654">Focus '89, </em><span class="text" id="span_001339" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001339">Cannes, 1989.</span></p>
            <p xml:space="preserve" id="p_001978"><span class="text" id="span_001340" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001340">21. Coggins, JamesM., "DesigningC+ + libraries," C+ + </span><em id="em_000655" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000655">Journal, </em><span class="text" id="span_001341" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001341">1,1 (June, 1990), pp. 25-32.</span></p>
            <p xml:space="preserve" id="p_001979" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001979">22. The tense is future; I know of no such result yet reported for a fifth use.</p>
            <p xml:space="preserve" id="p_001980" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001980">23. Jones, op. cit., p 604.</p>
            <p xml:space="preserve" id="p_001981"><span class="text" id="span_001342" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001342">24. Huang, Weigiao, "Industrializing software production," </span><em id="em_000656" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000656">Proceedings ACM 1988 Computer Science Conference, </em><span class="text" id="span_001343" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001343">Atlanta, 1988. I fear the lack of personal job growth in such an arrangement.</span></p>
            <p xml:space="preserve" id="p_001982"><span class="text" id="span_001344" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001344">25. The entire September, 1994 issue of </span><em id="em_000657" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000657">IEEE Software </em><span class="text" id="span_001345" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001345">is on reuse.</span></p>
            <p xml:space="preserve" id="p_001983" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001983">26. Jones, op. cit., p. 323.</p>
            <p xml:space="preserve" id="p_001984" smilref="The_Mythical_Man_Month_Essay00008.smil#p_001984">27. Jones, op. cit., p. 329.</p>
            <p xml:space="preserve" id="p_001985"><span class="text" id="span_001346" smilref="The_Mythical_Man_Month_Essay00008.smil#span_001346">28. Yourdon, E., </span><em id="em_000658" smilref="The_Mythical_Man_Month_Essay00008.smil#em_000658">Decline and Fall of the American Programmer. </em><span class="text" id="span_001347" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001347">En-glewood Cliffs, N.J.: Yourdon Press, 1992, p. 221.</span></p>
            <p xml:space="preserve" id="p_001986"><span class="text" id="span_001348" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001348">29. Glass, R. L., "Glass"(column), </span><em id="em_000659" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000659">System Development, </em><span class="text" id="span_001349" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001349">(January, 1988), pp. 4-5.</span></p>
            <pagenum page="normal" id="p306" smilref="The_Mythical_Man_Month_Essay00009.smil#p306">306</pagenum>
          </level3>
          <level3 id="level3_000035">
            <h3 xml:space="preserve" id="p_001987"><strong id="strong_000653" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000653">Chapter 18</strong></h3>
            <p xml:space="preserve" id="p_001988"><span class="text" id="span_001350" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001350">1. Boehm, B. W., </span><em id="em_000660" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000660">Software Etigineering Economics, </em><span class="text" id="span_001351" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001351">Englewood Cliffs, N.J.: Prentice-Hall, 1981, pp. 81-84.</span></p>
            <p xml:space="preserve" id="p_001989" smilref="The_Mythical_Man_Month_Essay00009.smil#p_001989">2. McCarthy, J., "21 Rules for Delivering Great Software on Time," Software World USA Conference, Washington (Sept., 1994).</p>
          </level3>
          <level3 id="level3_000036">
            <h3 xml:space="preserve" id="p_001990"><strong id="strong_000654" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000654">Chapter 19</strong></h3>
            <p xml:space="preserve" id="p_001991" smilref="The_Mythical_Man_Month_Essay00009.smil#p_001991">Material quoted without citation is from personal communications.</p>
            <p xml:space="preserve" id="p_001992"><span class="text" id="span_001352" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001352">1. On this painful subject, see also Niklaus Wirth "A plea for lean software," </span><em id="em_000661" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000661">Computer, </em><span class="text" id="span_001353" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001353">28, 2 (Feb., 1995), pp. 64-68.</span></p>
            <p xml:space="preserve" id="p_001993"><span class="text" id="span_001354" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001354">2. Coleman, D., 1994, "Word 6.0 packs in features; update slowed by baggage," </span><em id="em_000662" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000662">MacWeek, </em><span class="text" id="span_001355" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001355">8, 38 (Sept. 26, 1994), p. 1.</span></p>
            <p xml:space="preserve" id="p_001994"><span class="text" id="span_001356" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001356">3. Many surveys of machine language and programming language command frequencies </span><em id="em_000663" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000663">after </em><span class="text" id="span_001357" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001357">fielding have been published. For example, see J. Hennessy and D. Patterson, </span><em id="em_000664" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000664">Computer Architecture. </em><span class="text" id="span_001358" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001358">These frequency data are very useful for building successor products, although they never exactly apply. I know of no published frequency estimates prepared </span><em id="em_000665" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000665">before </em><span class="text" id="span_001359" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001359">the product was designed, much less comparisons of </span><em id="em_000666" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000666">a priori </em><span class="text" id="span_001360" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001360">estimates and </span><em id="em_000667" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000667">a posteriori </em><span class="text" id="span_001361" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001361">data. Ken Brooks suggests that bulletin boards on the Internet now provide a cheap method of soliciting data from prospective users of a new product, even though only a self-selected set responds.</span></p>
            <p xml:space="preserve" id="p_001995"><span class="text" id="span_001362" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001362">4. Conklin, J., and M. Begeman, "gIBIS: A Hypertext Tool for Exploratory Policy Discussion," </span><em id="em_000668" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000668">ACM Transactions on Office Information Systems, </em><span class="text" id="span_001363" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001363">Oct. 1988, pp. 303-331.</span></p>
            <p xml:space="preserve" id="p_001996"><span class="text" id="span_001364" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001364">5. Englebart, D., and W. English, "A research center for augmenting human intellect," </span><em id="em_000669" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000669">AFIPS Conference Proceedings, Fall Joint Computer Conference, </em><span class="text" id="span_001365" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001365">San Francisco (Dec. 9-11, 1968), pp. 395-410.</span></p>
            <p xml:space="preserve" id="p_001997"><span class="text" id="span_001366" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001366">6. Apple Computer, Inc., </span><em id="em_000670" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000670">Macintosh Human Interface Guidelines, </em><span class="text" id="span_001367" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001367">Reading, Mass.: Addison-Wesley, 1992.</span></p>
            <pagenum page="normal" id="p307" smilref="The_Mythical_Man_Month_Essay00009.smil#p307">307</pagenum>
            <p xml:space="preserve" id="p_001998" smilref="The_Mythical_Man_Month_Essay00009.smil#p_001998">7. It appears the Apple Desk Top Bus could handle two mice electronically, but the operating system provides no such function.</p>
            <p xml:space="preserve" id="p_001999"><span class="text" id="span_001368" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001368">8. Royce, W. W., 1970. "Managing the development of large software systems: Concepts and techniques," </span><em id="em_000671" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000671">Proceedings, WESCON </em><span class="text" id="span_001369" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001369">(Aug., 1970), reprinted in the </span><em id="em_000672" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000672">ICSE 9 Proceedings. </em><span class="text" id="span_001370" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001370">Neither Royce nor others believed one could go through the software process without revising earlier documents; the model was put forth as an ideal and a conceptual aid. See D. L. Pamas and P. C. Clements, "A rational design process: How and why to fake it," </span><em id="em_000673" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000673">IEEE Transactions on Software Engineering, </em><span class="text" id="span_001371" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001371">SE-12, 2 (Feb., 1986), pp. 251-257.</span></p>
            <p xml:space="preserve" id="p_002000" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002000">9. A major reworking of DOD-STD-2167 produced DOD-STD-2167A (1988), which allows but does not mandate more recent models such as the spiral model. Unfortunately, the MILSPECS that 2167A references and the illustrative examples it uses are still waterfall-oriented, so most procurements have continued to use the waterfall, Boehm reports. A Defense Science Board Task Force under Larry Druffel and George Heilmeyer, in their 1994 "Report of the DSB task force on acquiring defense software commercially," has advocated the wholesale use of more modern models.</p>
            <p xml:space="preserve" id="p_002001"><span class="text" id="span_001372" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001372">10. Mills, H. D., "Top-down programming in large systems," in </span><em id="em_000674" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000674">Debugging Techniques in Large Systems, </em><span class="text" id="span_001373" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001373">R. Rustin, ed. Engle-wood Cliffs, N.J.: Prentice-Hall, 1971.</span></p>
            <p xml:space="preserve" id="p_002002"><span class="text" id="span_001374" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001374">11. Parnas, D. L., "On the design and development of program families," IEEE </span><em id="em_000675" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000675">Trans, on Software Engineering, </em><span class="text" id="span_001375" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001375">SE-2, 1 (March, 1976), pp. 1-9; Parnas, D. L., "Designing software for ease of extension and contraction," </span><em id="em_000676" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000676">IEEE Trans, on Software Engineering, </em><span class="text" id="span_001376" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001376">SE-5, 2 (March, 1979), pp. 128-138.</span></p>
            <p xml:space="preserve" id="p_002003"><span class="text" id="span_001377" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001377">12. D. Harel, "Biting the silver bullet," </span><em id="em_000677" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000677">Computer </em><span class="text" id="span_001378" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001378">(Jan., 1992), pp. 8-20.</span></p>
            <p xml:space="preserve" id="p_002004" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002004">13. The seminal papers on information hiding are: Parnas, D. L., "Information distribution aspects of design methodology," Carnegie-Mellon, Dept. of Computer Science, Tech-</p>
            <pagenum page="normal" id="p308" smilref="The_Mythical_Man_Month_Essay00009.smil#p308">308</pagenum>
            <p xml:space="preserve" id="p_002005"><span class="text" id="span_001379" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001379">nical Report (Feb., 1971); Pamas, D. L., </span><em id="em_000678" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000678">"A </em><span class="text" id="span_001380" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001380">technique for software module specification with examples," </span><em id="em_000679" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000679">Comm. ACM, </em><span class="text" id="span_001381" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001381">5, 5 (May, 1972), pp. 330-336; Parnas, D. L. (1972). "On the criteria to be used in decomposing systems into modules," </span><em id="em_000680" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000680">Comm. ACM, </em><span class="text" id="span_001382" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001382">5,12 (Dec, 1972), pp. 1053-1058.</span></p>
            <p xml:space="preserve" id="p_002006" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002006">14. The ideas of objects were initially sketched by Hoare and Dijkstra, but the first and most influential development of them was the Simula-67 language by Dahl and Nygaard.</p>
            <p xml:space="preserve" id="p_002007"><span class="text" id="span_001383" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001383">15. Boehm, B. W., </span><em id="em_000681" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000681">Software Engineering Economics, </em><span class="text" id="span_001384" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001384">Englewood Cliffs, N.J.: Prentice-Hall, 1981, pp. 83-94; 470-472.</span></p>
            <p xml:space="preserve" id="p_002008"><span class="text" id="span_001385" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001385">16. Abdel-Hamid, T., and S. Madnick, </span><em id="em_000682" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000682">Software Project Dynamics: An Integrated Approach, </em><span class="text" id="span_001386" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001386">ch. 19, "Model enhancement and Brooks's law." Englewood Cliffs, N.J.: Prentice Hall, 1991.</span></p>
            <p xml:space="preserve" id="p_002009"><span class="text" id="span_001387" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001387">17. Stutzke, R. D., "A Mathematical Expression of Brooks's Law." In </span><em id="em_000683" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000683">Ninth International Forum on COCOMO and Cost Modeling. </em><span class="text" id="span_001388" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001388">Los Angeles: 1994.</span></p>
            <p xml:space="preserve" id="p_002010"><span class="text" id="span_001389" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001389">18. DeMarco, T., and T. Lister, </span><em id="em_000684" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000684">Peopleware: Productive Projects and Teams. </em><span class="text" id="span_001390" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001390">New York: Dorset House, 1987.</span></p>
            <p xml:space="preserve" id="p_002011"><span class="text" id="span_001391" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001391">19. Pius XI, Encyclical </span><em id="em_000685" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000685">Quadrageshno Anno, </em><span class="text" id="span_001392" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001392">[Ihm, Claudia Carien, éd., </span><em id="em_000686" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000686">The Papal Encyclicals 1903-1939, </em><span class="text" id="span_001393" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001393">Raleigh, N.C.: McGrath, p. 428.]</span></p>
            <p xml:space="preserve" id="p_002012"><span class="text" id="span_001394" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001394">20. Schumacher, E. F., </span><em id="em_000687" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000687">Small Is Beautiful: Economics as if People Mattered, </em><span class="text" id="span_001395" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001395">Perennial Library Edition. New York: Harper and Row, 1973, p. 244.</span></p>
            <p xml:space="preserve" id="p_002013" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002013">21. Schumacher, op. cit., p. 34.</p>
            <p xml:space="preserve" id="p_002014" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002014">22. A thought-provoking wall poster proclaims: "Freedom of the press belongs to him who has one."</p>
            <p xml:space="preserve" id="p_002015"><span class="text" id="span_001396" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001396">23. Bush, V., "That we may think," </span><em id="em_000688" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000688">Atlantic Monthly, </em><span class="text" id="span_001397" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001397">176, 1 (April, 1945), pp. 101-108.</span></p>
            <p xml:space="preserve" id="p_002016" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002016">24. Ken Thompson of Bell Labs, inventor of Unix, realized early the importance of big screens for programming. He devised a way to get 120 lines of code, in two columns, onto his primitive Tektronix electron-storage tube. He clung to this terminal through a whole generation of small-window, fast tubes.</p>
            <pagenum page="normal" id="p309" smilref="The_Mythical_Man_Month_Essay00009.smil#p309">309</pagenum>
          </level3>
        </level2>
        <level2 id="level2_000025">
          <h2 xml:space="preserve" id="h2_000025"><strong id="strong_000655"><em id="em_000689" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000689">Index</em></strong></h2>
          <p xml:space="preserve" id="p_002017" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002017">Abdel-Hamid, T., 308 AppleScript, 287</p>
          <p xml:space="preserve" id="p_002018"><span class="text" id="span_001398" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001398">abstract data type, 188, 220, architect, 37, </span><strong id="strong_000656" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000656">41, </strong><span class="text" id="span_001399" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001399">54, 62, 66, 79,</span></p>
          <p xml:space="preserve" id="p_002019"><strong id="strong_000657" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000657">273 </strong><span class="text" id="span_001400" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001400">100, 233, 236, 238, 255, 257</span></p>
          <p xml:space="preserve" id="p_002020"><span class="text" id="span_001401" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001401">accident, </span><strong id="strong_000658" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000658">179,182, </strong><span class="text" id="span_001402" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001402">209, 214, 272, architecture, </span><strong id="strong_000659" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000659">44, </strong><span class="text" id="span_001403" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001403">143, 233, 234,</span></p>
          <p xml:space="preserve" id="p_002021"><span class="text" id="span_001404" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001404">280, 281, 303, </span><em id="em_000690" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000690">viii </em><span class="text" id="span_001405" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001405">245, 266</span></p>
          <p xml:space="preserve" id="p_002022" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002022">accounting, 132 archive, chronological, 33</p>
          <p xml:space="preserve" id="p_002023"><span class="text" id="span_001406" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001406">Ada, </span><strong id="strong_000660" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000660">188, </strong><span class="text" id="span_001407" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001407">283 aristocracy, 39, 44, 46</span></p>
          <p xml:space="preserve" id="p_002024" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002024">administrator, 33 Aristotle, 209, 303</p>
          <p xml:space="preserve" id="p_002025" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002025">Adobe Photoshop, 281 Aron, J., 90, 93, 237, 297</p>
          <p xml:space="preserve" id="p_002026" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002026">advancement, dual ladder of, ARPA network, 78</p>
          <p xml:space="preserve" id="p_002027"><span class="text" id="span_001408" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001408">119, 242 artificial intelligence, </span><strong id="strong_000661" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000661">190, </strong><span class="text" id="span_001409" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001409">302</span></p>
          <p xml:space="preserve" id="p_002028" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002028">advisor, testing, 192 assembler, 132</p>
          <p xml:space="preserve" id="p_002029" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002029">Aiken, H. H., 291 authority, 8, 80, 231, 236</p>
          <p xml:space="preserve" id="p_002030" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002030">airplane-seat metaphor, 194 AutoCad, 285</p>
          <p xml:space="preserve" id="p_002031" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002031">Algol, 34, 44, 64, 68, 203, 295, AutoLisp, 285</p>
          <p xml:space="preserve" id="p_002032"><span class="text" id="span_001410" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001410">302 automatic programming, 302 algorithm, </span><strong id="strong_000662" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000662">102, </strong><span class="text" id="span_001411" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001411">239</span></p>
          <p xml:space="preserve" id="p_002033" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002033">allocation, dynamic memory, 57 Bach, J. S., 47</p>
          <p xml:space="preserve" id="p_002034" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002034">alpha test, 142, 245, 266 Backus, J. W., 64, 295</p>
          <p xml:space="preserve" id="p_002035" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002035">alpha version, 240 Backus-Naur Form, 64</p>
          <p xml:space="preserve" id="p_002036" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002036">Alto personal workstation, 260 Baker, F. T., 36, 294, 300</p>
          <p xml:space="preserve" id="p_002037" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002037">ANSI, 168, 249 Balzer, R., 302</p>
          <p xml:space="preserve" id="p_002038" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002038">APL, 64, 98, 136, 175, 203, 302 Bardain, E. F., 296</p>
          <p xml:space="preserve" id="p_002039" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002039">Apple Computer, Inc., 264, 306 barrier, sociological, 119</p>
          <p xml:space="preserve" id="p_002040" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002040">Apple Desk Top Bus, 307 Begeman, M., 306</p>
          <p xml:space="preserve" id="p_002041"><span class="text" id="span_001412" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001412">Apple Lisa, 260 Belady, L., 122, 123, 150, 243, Apple Macintosh, 255, 258, </span><strong id="strong_000663" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000663">264, </strong><span class="text" id="span_001413" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001413">246, 298, 301</span></p>
          <p xml:space="preserve" id="p_002042" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002042">284, 291, 306 Bell Northern Research, 270</p>
          <p xml:space="preserve" id="p_002043" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002043">Note: Bold numerals indicate a relatively substantial discussion of a topic.</p>
          <p xml:space="preserve" id="p_002044"><strong id="strong_000664" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000664">309</strong></p>
          <pagenum page="normal" id="p310" smilref="The_Mythical_Man_Month_Essay00009.smil#p310">310</pagenum>
          <p xml:space="preserve" id="p_002045" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002045">Bell Telephone Laboratories, 90, building a program, 200</p>
          <p xml:space="preserve" id="p_002046"><span class="text" id="span_001414" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001414">119, 133, 137, 142, 158, 237, bullet, brass, 219 293, </span><em id="em_000691" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000691">xi, </em><span class="text" id="span_001415" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001415">308 silver, </span><strong id="strong_000665" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000665">179, 207, </strong><span class="text" id="span_001416" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001416">212, 214, 226,</span></p>
          <p xml:space="preserve" id="p_002047"><span class="text" id="span_001417" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001417">Bell, C. G., 64, 296, </span><em id="em_000692" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000692">viii </em><span class="text" id="span_001418" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001418">303, 304</span></p>
          <p xml:space="preserve" id="p_002048" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002048">Bengough, W., 107 Burke, E., 253</p>
          <p xml:space="preserve" id="p_002049" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002049">Bennington, H. D., 305 Burks, A. W., 194</p>
          <p xml:space="preserve" id="p_002050"><span class="text" id="span_001419" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001419">beta version, 240 Burris, R., </span><em id="em_000693" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000693">xii</em></p>
          <p xml:space="preserve" id="p_002051" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002051">Bible, 255 Bush, V., 281, 291, 308</p>
          <p xml:space="preserve" id="p_002052"><span class="text" id="span_001420" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001420">Bierly, R., </span><em id="em_000694" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000694">viii </em><span class="text" id="span_001421" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001421">Butler, S., 229</span></p>
          <p xml:space="preserve" id="p_002053" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002053">Blaauw, G. A., 45, 49, 62, 63, 294 buy versus build, 197 Bloch, E., /</p>
          <p xml:space="preserve" id="p_002054"><span class="text" id="span_001422" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001422">Blum, B., 210 </span><em id="em_000695" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000695">C++, </em><span class="text" id="span_001423" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001423">220, 285, 305</span></p>
          <p xml:space="preserve" id="p_002055" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002055">Boehm, B. W., 217, 237, 273, 283, Cambridge Multiple-Access</p>
          <p xml:space="preserve" id="p_002056"><span class="text" id="span_001424" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001424">303, 306, 308, </span><em id="em_000696" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000696">viii </em><span class="text" id="span_001425" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001425">System, 298</span></p>
          <p xml:space="preserve" id="p_002057" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002057">Boehm, E. M., 295 Cambridge University, 133</p>
          <p xml:space="preserve" id="p_002058"><span class="text" id="span_001426" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001426">Boes, H., </span><em id="em_000697" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000697">ix </em><span class="text" id="span_001427" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001427">Campbell, E., 121, 242, 298</span></p>
          <p xml:space="preserve" id="p_002059" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002059">Bohl, M., 302 Canova, A., 153</p>
          <p xml:space="preserve" id="p_002060" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002060">Böhm, C, 144, 300 Capp, A., 80</p>
          <p xml:space="preserve" id="p_002061" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002061">Booch, G., 302 Carnegie-Mellon University, 78</p>
          <p xml:space="preserve" id="p_002062" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002062">Boudot-Lamotte, E., 40 CASE statement, 144</p>
          <p xml:space="preserve" id="p_002063"><span class="text" id="span_001428" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001428">brass bullet, 219 Case, R. P., </span><em id="em_000698" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000698">viii, xi</em></p>
          <p xml:space="preserve" id="p_002064" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002064">breakthrough, 186 Cashman, T. J., 169</p>
          <p xml:space="preserve" id="p_002065" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002065">Breughel, P. , the Elder, 73 cathedral, 41</p>
          <p xml:space="preserve" id="p_002066"><span class="text" id="span_001429" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001429">Brooks's Law, 25, 274 change summary, </span><em id="em_000699" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000699">77, </em><span class="text" id="span_001430" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001430">78</span></p>
          <p xml:space="preserve" id="p_002067"><span class="text" id="span_001431" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001431">Brooks, F. P. Jr., 102, 226, 229, change, </span><strong id="strong_000666" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000666">117</strong></p>
          <p xml:space="preserve" id="p_002068"><span class="text" id="span_001432" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001432">237, 294, 297, 300, 301, 303, </span><em id="em_000700" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000700">i </em><span class="text" id="span_001433" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001433">control of, 149</span></p>
          <p xml:space="preserve" id="p_002069"><span class="text" id="span_001434" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001434">Brooks, K. P., 216, 224, 306, </span><em id="em_000701" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000701">viii </em><span class="text" id="span_001435" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001435">design, 166, 241, 298</span></p>
          <p xml:space="preserve" id="p_002070"><span class="text" id="span_001436" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001436">Brooks, N. G., </span><em id="em_000702" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000702">v, viii </em><span class="text" id="span_001437" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001437">organization, </span><strong id="strong_000667" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000667">118</strong></p>
          <p xml:space="preserve" id="p_002071"><span class="text" id="span_001438" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001438">Buchanan, B., </span><em id="em_000703" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000703">viii </em><span class="text" id="span_001439" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001439">changeability, 117,</span><strong id="strong_000668" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000668">184, </strong><span class="text" id="span_001440" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001440">241</span></p>
          <p xml:space="preserve" id="p_002072" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002072">Buchholz, W., 294 channel, 45</p>
          <p xml:space="preserve" id="p_002073" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002073">budget, 6, 108, 110, 239 chemical engineering, 116, 287,</p>
          <p xml:space="preserve" id="p_002074" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002074">access, 99, 238 288</p>
          <p xml:space="preserve" id="p_002075"><span class="text" id="span_001441" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001441">size, </span><strong id="strong_000669" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000669">100, </strong><span class="text" id="span_001442" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001442">238 chief programmer, 32, 232</span></p>
          <p xml:space="preserve" id="p_002076"><span class="text" id="span_001443" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001443">bug, </span><strong id="strong_000670" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000670">142, </strong><span class="text" id="span_001444" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001444">143, 195, 209, 231, 235, ClarisWorks, 219</span></p>
          <p xml:space="preserve" id="p_002077" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002077">242, 243, 244, 245, 272 class, 189, 222, 225, 272</p>
          <p xml:space="preserve" id="p_002078" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002078">documented, 148 Clements, P. C, 307, 308</p>
          <p xml:space="preserve" id="p_002079"><span class="text" id="span_001445" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001445">Build-every-night approach, </span><strong id="strong_000671" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000671">270 </strong><span class="text" id="span_001446" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001446">clerk, program, 33</span></p>
          <p xml:space="preserve" id="p_002080"><span class="text" id="span_001447" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001447">build, incremental, </span><strong id="strong_000672" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000672">270 </strong><span class="text" id="span_001448" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001448">client-server system, 282</span></p>
          <p xml:space="preserve" id="p_002081" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002081">system, 147, 246, 301 Clingen, C. T., 298, 299</p>
          <p xml:space="preserve" id="p_002082" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002082">build-to-budget strategy, 268 COBOL, 199, 203, 218</p>
          <p xml:space="preserve" id="p_002083" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002083">build-up, manpower, 179 Codd, E. R, 146, 300</p>
          <pagenum page="normal" id="p311" smilref="The_Mythical_Man_Month_Essay00009.smil#p311">311</pagenum>
          <p xml:space="preserve" id="p_002084" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002084">Coding War Games, 276 Coqui, H., 217, 305</p>
          <p xml:space="preserve" id="p_002085"><span class="text" id="span_001449" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001449">coding, 20, 237 Corbatò, F. J., 93, 146, 237, 293, Coggins, J. M., 220, 221, 305, </span><em id="em_000704" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000704">viii </em><span class="text" id="span_001450" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001450">297, 298, 299, 300, </span><em id="em_000705" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000705">xi</em></p>
          <p xml:space="preserve" id="p_002086" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002086">Coleman, D., 306 Cornell University, 47</p>
          <p xml:space="preserve" id="p_002087" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002087">command key, 263 Cosgrove, J., 117, 118, 241, 298</p>
          <p xml:space="preserve" id="p_002088"><span class="text" id="span_001451" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001451">command, </span><strong id="strong_000673" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000673">261, </strong><span class="text" id="span_001452" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001452">286, 287, 306 cost, 6, 16, 87, 121, 182, 224, 233, comment, 172, 249 242, 274</span></p>
          <p xml:space="preserve" id="p_002089" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002089">committee, 17, 74, 79 cost, development, 198 communication, 16, 17, 35, 54, front-loaded, 221</p>
          <p xml:space="preserve" id="p_002090"><span class="text" id="span_001453" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001453">61, 73, 78, 79, 88, 100, 111, courage, managerial, 12, </span><strong id="strong_000674" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000674">21,</strong><span class="text" id="span_001454" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001454">119, 183, 232, 233, 234, 235, 236, 153, </span><strong id="strong_000675" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000675">221, 242, </strong><span class="text" id="span_001455" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001455">274</span></p>
          <p xml:space="preserve" id="p_002091" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002091">240, 274 court, for design disputes, 66</p>
          <p xml:space="preserve" id="p_002092" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002092">compatibility, 63, 64, 68 Cox, B. J., 210, 212, 304</p>
          <p xml:space="preserve" id="p_002093" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002093">compile-time operation, 66 Crabbe, G., 163</p>
          <p xml:space="preserve" id="p_002094"><span class="text" id="span_001456" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001456">compiler, 132 creation, component stages, 15, complexity, </span><strong id="strong_000676" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000676">182, 211, </strong><span class="text" id="span_001457" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001457">226, 233, 45, 143</span></p>
          <p xml:space="preserve" id="p_002095" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002095">288 creative joy, 7,120, 280</p>
          <p xml:space="preserve" id="p_002096"><span class="text" id="span_001458" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001458">arbitrary, </span><strong id="strong_000677" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000677">184, </strong><span class="text" id="span_001459" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001459">211 creative style, 47</span></p>
          <p xml:space="preserve" id="p_002097" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002097">conceptual, 210 creative work, 46</p>
          <p xml:space="preserve" id="p_002098"><span class="text" id="span_001460" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001460">component debugging, </span><strong id="strong_000678" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000678">144 </strong><span class="text" id="span_001461" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001461">creativity, 278, 280</span></p>
          <p xml:space="preserve" id="p_002099" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002099">component, 223, 230, 239, 284, critical-path schedule, 89, 156, 286 158, 247, 301</p>
          <p xml:space="preserve" id="p_002100" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002100">dummy, 148 Crockwell, D., 87</p>
          <p xml:space="preserve" id="p_002101" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002101">comprehensibility, 186 Crowley, W. R., 132</p>
          <p xml:space="preserve" id="p_002102" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002102">computer facility, 128 cursor, 261</p>
          <p xml:space="preserve" id="p_002103" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002103">conceptual construct, 182, 186, customizability, 219</p>
          <p xml:space="preserve" id="p_002104"><span class="text" id="span_001462" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001462">209 customization, 222 conceptual integrity, 35, 36, </span><strong id="strong_000679" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000679">42,</strong></p>
          <p xml:space="preserve" id="p_002105"><span class="text" id="span_001463" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001463">62, 80, 142, 184, 232, 233, d'Orbais, J., 41 255, 257, </span><strong id="strong_000680" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000680">260, </strong><span class="text" id="span_001464" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001464">264 Dahl, O. J., 300, 308</span></p>
          <p xml:space="preserve" id="p_002106" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002106">conceptual structure, 180 Daley, R. C, 300</p>
          <p xml:space="preserve" id="p_002107"><span class="text" id="span_001465" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001465">conference, </span><strong id="strong_000681" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000681">66 </strong><span class="text" id="span_001466" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001466">data base, 108</span></p>
          <p xml:space="preserve" id="p_002108"><span class="text" id="span_001467" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001467">conformity, </span><strong id="strong_000682" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000682">184 </strong><span class="text" id="span_001468" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001468">data service, </span><strong id="strong_000683" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000683">131</strong></p>
          <p xml:space="preserve" id="p_002109" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002109">Conger, S. A., 214, 304 database, 198, 223, 240, 283, 285</p>
          <p xml:space="preserve" id="p_002110" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002110">Conklin, J., 259, 306 datatype, abstract, 189</p>
          <p xml:space="preserve" id="p_002111" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002111">control program, 91, 93 date, estimated, 158 convergence of debugging, 9 scheduled, 158</p>
          <p xml:space="preserve" id="p_002112" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002112">Conway, M. E., Ill, 297 debugging aid, 128</p>
          <p xml:space="preserve" id="p_002113"><span class="text" id="span_001469" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001469">Conway, R. W., 47, 294 debugging, component, </span><strong id="strong_000684" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000684">144</strong></p>
          <p xml:space="preserve" id="p_002114" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002114">Cooley, J. W., 102 high-level language, 135</p>
          <p xml:space="preserve" id="p_002115"><span class="text" id="span_001470" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001470">copilot, 32 interactive, 34, 136, </span><strong id="strong_000685" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000685">146, </strong><span class="text" id="span_001471" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001471">245</span></p>
          <pagenum page="normal" id="p312" smilref="The_Mythical_Man_Month_Essay00009.smil#p312">312</pagenum>
          <p xml:space="preserve" id="p_002116"><span class="text" id="span_001472" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001472">debugging </span><em id="em_000706" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000706">{continued) </em><span class="text" id="span_001473" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001473">DOD-STD-2167, 266, 307</span></p>
          <p xml:space="preserve" id="p_002117" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002117">on-machine, 145 DOD-STD-2167A, 307</p>
          <p xml:space="preserve" id="p_002118" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002118">sequential nature of, 17 Dragon voice recognition system,</p>
          <p xml:space="preserve" id="p_002119"><span class="text" id="span_001474" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001474">system, </span><strong id="strong_000686" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000686">147 </strong><span class="text" id="span_001475" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001475">264</span></p>
          <p xml:space="preserve" id="p_002120" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002120">DEC PDP-8, 64 Druffel, L., 307</p>
          <p xml:space="preserve" id="p_002121"><span class="text" id="span_001476" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001476">DEC VMS operating system, 284 dual ladder of advancement, </span><strong id="strong_000687" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000687">119,</strong></p>
          <p xml:space="preserve" id="p_002122" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002122">DECLARE, 174 242</p>
          <p xml:space="preserve" id="p_002123" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002123">Defense Science Board Task Force dummy component, 148</p>
          <p xml:space="preserve" id="p_002124"><span class="text" id="span_001477" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001477">on Military Software, </span><em id="em_000707" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000707">i, vii, </em><span class="text" id="span_001478" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001478">dump, memory 133,145</span></p>
          <p xml:space="preserve" id="p_002125"><em id="em_000708" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000708">viii </em><span class="text" id="span_001479" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001479">Durfee, B., 291 Defense Science Board, 307</span></p>
          <p xml:space="preserve" id="p_002126" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002126">DeMarco, T., 218, 223, 224, 276, ease of use, 43, 98, 255, 258, 260,</p>
          <p xml:space="preserve" id="p_002127"><span class="text" id="span_001480" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001480">283, 308, </span><em id="em_000709" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000709">viii </em><span class="text" id="span_001481" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001481">262, </span><strong id="strong_000688" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000688">263</strong></p>
          <p xml:space="preserve" id="p_002128"><span class="text" id="span_001482" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001482">democracy, </span><strong id="strong_000689" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000689">44 </strong><span class="text" id="span_001483" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001483">Eastman Kodak Company, 285</span></p>
          <p xml:space="preserve" id="p_002129" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002129">Department of Defense, 266 Eckman, D., 298</p>
          <p xml:space="preserve" id="p_002130" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002130">dependability of debugging editor, job description for, 33</p>
          <p xml:space="preserve" id="p_002131" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002131">vehicle, 131 text, 32, 34, 68, 128, 133,134,</p>
          <p xml:space="preserve" id="p_002132"><span class="text" id="span_001484" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001484">description; </span><em id="em_000710" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000710">See </em><span class="text" id="span_001485" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001485">specification, 146</span></p>
          <p xml:space="preserve" id="p_002133" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002133">design change, 241 Einstein, A., 213</p>
          <p xml:space="preserve" id="p_002134" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002134">design-for-change, 272 electronic mail, 234, 235</p>
          <p xml:space="preserve" id="p_002135"><span class="text" id="span_001486" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001486">designer, great, 180, </span><strong id="strong_000690" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000690">202, </strong><span class="text" id="span_001487" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001487">304 electronic notebook, 78, 235</span></p>
          <p xml:space="preserve" id="p_002136" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002136">desktop metaphor, 194, 260, 262 Electronic Switching System, 90</p>
          <p xml:space="preserve" id="p_002137" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002137">development, incremental, 200 encapsulation, 78, 220, 236, 271</p>
          <p xml:space="preserve" id="p_002138" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002138">diagram, 216 Engelbart, D. C, 78, 260, 306</p>
          <p xml:space="preserve" id="p_002139" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002139">difference in judgement, 35 English, W., 306</p>
          <p xml:space="preserve" id="p_002140" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002140">difference of interest, 35 entropy, 122, 243</p>
          <p xml:space="preserve" id="p_002141"><span class="text" id="span_001488" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001488">Digitek Corporation, 102 environment, 6, 165,</span><strong id="strong_000691" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000691">196</strong></p>
          <p xml:space="preserve" id="p_002142" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002142">Dijkstra, E. W., 144, 300, 308 Erikson, W. J., 29, 30, 88, 294,</p>
          <p xml:space="preserve" id="p_002143" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002143">director, technical, role of, 79, 296</p>
          <p xml:space="preserve" id="p_002144"><span class="text" id="span_001489" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001489">236, 256 Ershov, A. P., 293, </span><em id="em_000711" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000711">xi</em></p>
          <p xml:space="preserve" id="p_002145" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002145">discipline, 46, 54, 55, 233 Eschapasse, M., 294</p>
          <p xml:space="preserve" id="p_002146" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002146">Disk Operating System, IBM essence, 179,181,196, 214, 222,</p>
          <p xml:space="preserve" id="p_002147"><span class="text" id="span_001490" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001490">1410-7010, 56, 57, 99 272, 285, 303, </span><em id="em_000712" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000712">viii</em></p>
          <p xml:space="preserve" id="p_002148"><span class="text" id="span_001491" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001491">display terminal, 78, 129 estimating, 14, </span><strong id="strong_000692" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000692">21, </strong><span class="text" id="span_001492" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001492">88, 109, 155,</span></p>
          <p xml:space="preserve" id="p_002149" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002149">division of labor, 79, 236 231, 237, 239, 247, 301</p>
          <p xml:space="preserve" id="p_002150"><span class="text" id="span_001493" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001493">DO...WHILE, 144 Evans, B. O., </span><em id="em_000713" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000713">v</em></p>
          <p xml:space="preserve" id="p_002151"><span class="text" id="span_001494" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001494">document, </span><strong id="strong_000693" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000693">107, </strong><span class="text" id="span_001495" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001495">239 Everett, R. R., 305</span></p>
          <p xml:space="preserve" id="p_002152" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002152">documentation system, 134, 244 Excel, 285, 286</p>
          <p xml:space="preserve" id="p_002153"><span class="text" id="span_001496" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001496">documentation, 6, 32, 33, 122, expert system, </span><strong id="strong_000694" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000694">191</strong></p>
          <p xml:space="preserve" id="p_002154"><strong id="strong_000695" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000695">164, </strong><span class="text" id="span_001497" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001497">224, 235, 248 extension, 221, 268, 302</span></p>
          <pagenum page="normal" id="p313" smilref="The_Mythical_Man_Month_Essay00009.smil#p313">313</pagenum>
          <p xml:space="preserve" id="p_002155" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002155">Fagg, P., 24 GO TO, 170</p>
          <p xml:space="preserve" id="p_002156"><span class="text" id="span_001498" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001498">Falkoff, A. D., 296 God, </span><strong id="strong_000696" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000696">42,</strong><span class="text" id="span_001499" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001499">184, 232, 289, 291, </span><em id="em_000714" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000714">ix</em></p>
          <p xml:space="preserve" id="p_002157"><span class="text" id="span_001500" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001500">family, software product, </span><strong id="strong_000697" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000697">268 </strong><span class="text" id="span_001501" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001501">Gödel, 213</span></p>
          <p xml:space="preserve" id="p_002158" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002158">Farr, L., 88, 296 Goethe, J. W. von, 163</p>
          <p xml:space="preserve" id="p_002159" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002159">Fast Fourier Transform, 102 Gold, M. M., 146, 246, 300</p>
          <p xml:space="preserve" id="p_002160"><span class="text" id="span_001502" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001502">featuritis, </span><strong id="strong_000698" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000698">257 </strong><span class="text" id="span_001503" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001503">Goldstine, H. H., 170,194, 301</span></p>
          <p xml:space="preserve" id="p_002161"><span class="text" id="span_001504" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001504">Feigenbaum, E. A., 191 Gordon, P., </span><em id="em_000715" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000715">vii</em></p>
          <p xml:space="preserve" id="p_002162" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002162">Ferrell, J., 287 GOTO, 300</p>
          <p xml:space="preserve" id="p_002163" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002163">file, dummy, 148 Grafton, R. B., 302</p>
          <p xml:space="preserve" id="p_002164" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002164">miniature, 148 Grant, E. E., 29, 30, 88, 294, 296</p>
          <p xml:space="preserve" id="p_002165"><span class="text" id="span_001505" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001505">filters, 187 graph, </span><strong id="strong_000699" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000699">185, </strong><span class="text" id="span_001506" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001506">216 Fjelstadt, 304 structure, 248</span></p>
          <p xml:space="preserve" id="p_002166"><span class="text" id="span_001507" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001507">floorspace, 239 graphical programming, </span><strong id="strong_000700" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000700">194, </strong><span class="text" id="span_001508" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001508">302</span></p>
          <p xml:space="preserve" id="p_002167"><span class="text" id="span_001509" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001509">flow arrow, 174 great designer, 180, </span><strong id="strong_000701" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000701">202, </strong><span class="text" id="span_001510" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001510">284</span></p>
          <p xml:space="preserve" id="p_002168"><span class="text" id="span_001511" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001511">flow chart, </span><strong id="strong_000702" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000702">167,</strong><span class="text" id="span_001512" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001512">185,194, 248, 300 Greenwald, I. D., 295</span></p>
          <p xml:space="preserve" id="p_002169"><span class="text" id="span_001513" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001513">forecast, 109, 239 growing software, 180, </span><strong id="strong_000703" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000703">200, </strong><span class="text" id="span_001514" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001514">212, formal definition, </span><strong id="strong_000704" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000704">63, </strong><span class="text" id="span_001515" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001515">234 268</span></p>
          <p xml:space="preserve" id="p_002170"><span class="text" id="span_001516" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001516">formal document, </span><strong id="strong_000705" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000705">111 </strong><span class="text" id="span_001517" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001517">Gruenberger, F., 147, 294, 300 formal progression of release, 133</span></p>
          <p xml:space="preserve" id="p_002171" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002171">formality, of written proposals, Hamilton, F., 291</p>
          <p xml:space="preserve" id="p_002172" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002172">67 Hamlen, 304</p>
          <p xml:space="preserve" id="p_002173" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002173">Fortran, 45,102, 203, 302 hardware, computer, 181</p>
          <p xml:space="preserve" id="p_002174" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002174">Fortran, H., 99 Hardy, H., 97</p>
          <p xml:space="preserve" id="p_002175"><span class="text" id="span_001518" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001518">FoxPro database, 287 Harel, D. L., </span><strong id="strong_000706" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000706">212, </strong><span class="text" id="span_001519" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001519">214, 270, 304, Franklin, B. (Poor Richard), 87 305, 307</span></p>
          <p xml:space="preserve" id="p_002176"><span class="text" id="span_001520" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001520">Franklin, J. W., 134 Harr, J., 90, 93,137, 237, 299, </span><em id="em_000716" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000716">xi</em></p>
          <p xml:space="preserve" id="p_002177"><span class="text" id="span_001521" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001521">frequency data, 306 Hayes-Roth, R., </span><em id="em_000717" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000717">viii</em></p>
          <p xml:space="preserve" id="p_002178"><span class="text" id="span_001522" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001522">frequency guessing, </span><strong id="strong_000707" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000707">257, </strong><span class="text" id="span_001523" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001523">259 Heilmeyer, G., 307</span></p>
          <p xml:space="preserve" id="p_002179" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002179">fusion, 277 Heinlein, R. A., 81, 296</p>
          <p xml:space="preserve" id="p_002180" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002180">Hennessy, J., 306</p>
          <p xml:space="preserve" id="p_002181" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002181">Galloping Gertie, Tacoma Henricksen, J. O., 299</p>
          <p xml:space="preserve" id="p_002182" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002182">Narrows Bridge, 264 Henry, P., 253</p>
          <p xml:space="preserve" id="p_002183" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002183">Gantt chart, 265 Herzberg, F., 210, 304</p>
          <p xml:space="preserve" id="p_002184" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002184">General Electric Company, 216 Hetzel, W. C, 299</p>
          <p xml:space="preserve" id="p_002185" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002185">generator, 193, 283 Hezel, K. D„ 301</p>
          <p xml:space="preserve" id="p_002186" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002186">gIBIS, 259, 306 hierarchical structure, 189, 212, Ginzberg, M. G., 301 220</p>
          <p xml:space="preserve" id="p_002187"><span class="text" id="span_001524" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001524">Glass, R. L., 214, 226, 304, 305 high-level language, </span><em id="em_000718" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000718">See </em><span class="text" id="span_001525" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001525">Glegg, G. L., 294 language, high-level</span></p>
          <p xml:space="preserve" id="p_002188" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002188">Global Positioning System, 257 Hoare, C. A. R., 300, 308</p>
          <pagenum page="normal" id="p314" smilref="The_Mythical_Man_Month_Essay00009.smil#p314">314</pagenum>
          <p xml:space="preserve" id="p_002189" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002189">Homer, 255 IR..THEN...ELSE, 144</p>
          <p xml:space="preserve" id="p_002190" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002190">Hopkins, M., 299 Ihm, C. C, 308</p>
          <p xml:space="preserve" id="p_002191" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002191">Huang, W., 222, 305 implementation, 15, 45, 64, 143,</p>
          <p xml:space="preserve" id="p_002192" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002192">hustle, 155, 247 209, 233, 234, 238, 256, 266</p>
          <p xml:space="preserve" id="p_002193"><span class="text" id="span_001526" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001526">HyperCard, 285 implementations, multiple, </span><strong id="strong_000708" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000708">68</strong></p>
          <p xml:space="preserve" id="p_002194"><span class="text" id="span_001527" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001527">hypertext, 281, 291, 306 implementer, </span><strong id="strong_000709" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000709">47, </strong><span class="text" id="span_001528" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001528">54, 62, 66</span></p>
          <p xml:space="preserve" id="p_002195" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002195">incorporation, direct, 66, 118,</p>
          <p xml:space="preserve" id="p_002196" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002196">IBM 1401, 45, 65, 130 241, 264</p>
          <p xml:space="preserve" id="p_002197" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002197">IBM 650, 43, 102 incremental development, 200,</p>
          <p xml:space="preserve" id="p_002198" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002198">IBM 701, 131 268</p>
          <p xml:space="preserve" id="p_002199" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002199">IBM 7030 Stretch computer, 44, incremental-build model, 212,</p>
          <p xml:space="preserve" id="p_002200"><span class="text" id="span_001529" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001529">47, 55, 291, 300, </span><em id="em_000719" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000719">i </em><strong id="strong_000710" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000710">267, 270</strong></p>
          <p xml:space="preserve" id="p_002201" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002201">IBM 704, 55 indenting, 174</p>
          <p xml:space="preserve" id="p_002202"><span class="text" id="span_001530" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001530">IBM 709, 55, 57, 181 information hiding, </span><strong id="strong_000711" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000711">78, 271, </strong><span class="text" id="span_001531" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001531">308</span></p>
          <p xml:space="preserve" id="p_002203" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002203">IBM 7090, 55, 64 information theory, 212</p>
          <p xml:space="preserve" id="p_002204"><span class="text" id="span_001532" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001532">IBM Corporation, 90, 119, 291, </span><em id="em_000720" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000720">vii </em><span class="text" id="span_001533" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001533">inheritance, 220, 222, 273</span></p>
          <p xml:space="preserve" id="p_002205" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002205">IBM Harvest computer, ;' initialization, 174</p>
          <p xml:space="preserve" id="p_002206"><span class="text" id="span_001534" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001534">IBM MVS/370 operating system, input range, 6,</span><strong id="strong_000712" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000712">165, </strong><span class="text" id="span_001535" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001535">248</span></p>
          <p xml:space="preserve" id="p_002207" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002207">276, 284 input-output format, 165</p>
          <p xml:space="preserve" id="p_002208"><span class="text" id="span_001536" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001536">IBM Operating System/360, </span><em id="em_000721" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000721">See </em><span class="text" id="span_001537" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001537">instrumentation, 129</span></p>
          <p xml:space="preserve" id="p_002209"><span class="text" id="span_001538" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001538">Operating System/360 integrity, conceptual, 35, 36, </span><strong id="strong_000713" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000713">42,</strong></p>
          <p xml:space="preserve" id="p_002210"><span class="text" id="span_001539" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001539">IBM OS-2 operating system, 284 43, 62, 80, 142, </span><strong id="strong_000714" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000714">255, </strong><span class="text" id="span_001540" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001540">257, 260,</span></p>
          <p xml:space="preserve" id="p_002211" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002211">IBM PC computer, 260, 264, 284 264</p>
          <p xml:space="preserve" id="p_002212" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002212">IBM SAGE ANFSQ/7 data interaction, as part of creation,</p>
          <p xml:space="preserve" id="p_002213" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002213">processing system, 216, 305 15, 209</p>
          <p xml:space="preserve" id="p_002214" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002214">IBM System/360 computer family first of session, 146</p>
          <p xml:space="preserve" id="p_002215"><span class="text" id="span_001541" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001541">44, 45, 62, 64 interactive debugging, 34,</span><strong id="strong_000715" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000715">146</strong></p>
          <p xml:space="preserve" id="p_002216"><span class="text" id="span_001542" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001542">IBM System/360 Model 165, 98 interactive programming, </span><strong id="strong_000716" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000716">136,</strong></p>
          <p xml:space="preserve" id="p_002217" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002217">IBM System/360 Model 30, 45, 47 244, 245, 246</p>
          <p xml:space="preserve" id="p_002218" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002218">IBM System/360 Model 65, 99 interface, 6, 32, 62, 66, 79, 118,</p>
          <p xml:space="preserve" id="p_002219" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002219">IBM System/360 Model 75, 47 120, 122, 241, 243, 255, 257,</p>
          <p xml:space="preserve" id="p_002220"><em id="em_000722" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000722">IBM System/360 Principles of </em><span class="text" id="span_001543" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001543">264, 271, 282, 286, 306</span></p>
          <p xml:space="preserve" id="p_002221"><em id="em_000723" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000723">Operation, </em><span class="text" id="span_001544" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001544">62 metaprogramming, 287</span></p>
          <p xml:space="preserve" id="p_002222" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002222">IBM VM/360 operating system, module, 268</p>
          <p xml:space="preserve" id="p_002223"><span class="text" id="span_001545" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001545">284 WIMP, 234, </span><strong id="strong_000717" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000717">260, </strong><span class="text" id="span_001546" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001546">263</span></p>
          <p xml:space="preserve" id="p_002224" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002224">IBSYS operating system for the Interlisp, 187</p>
          <p xml:space="preserve" id="p_002225" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002225">7090, 56 International Computers Limited,</p>
          <p xml:space="preserve" id="p_002226"><span class="text" id="span_001547" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001547">Ichikawa, T., 302 89, 133, 293, </span><em id="em_000724" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000724">xi</em></p>
          <p xml:space="preserve" id="p_002227" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002227">icon, 260 Internet, 306</p>
          <p xml:space="preserve" id="p_002228" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002228">ideas, as stage of creation, 15 interpreter, for space-saving, 102</p>
          <p xml:space="preserve" id="p_002229"><span class="text" id="span_001548" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001548">IEEE </span><em id="em_000725" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000725">Computer </em><span class="text" id="span_001549" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001549">magazine, </span><em id="em_000726" smilref="The_Mythical_Man_Month_Essay00009.smil#em_000726">vii </em><span class="text" id="span_001550" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001550">invisibility, </span><strong id="strong_000718" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000718">185, 216, </strong><span class="text" id="span_001551" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001551">241</span></p>
          <pagenum page="normal" id="p315" smilref="The_Mythical_Man_Month_Essay00009.smil#p315">315</pagenum>
          <p xml:space="preserve" id="p_002230" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002230">iteration, 199, 267 class, 225</p>
          <p xml:space="preserve" id="p_002231" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002231">Iverson, K. E., 64,102,170, 291, macro, 34</p>
          <p xml:space="preserve" id="p_002232"><span class="text" id="span_001552" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001552">294, 295, 296, 297, 300, 301, program, </span><strong id="strong_000719" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000719">132</strong></p>
          <p xml:space="preserve" id="p_002233" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002233">302 linkage editor, 56, 282</p>
          <p xml:space="preserve" id="p_002234" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002234">Lister, T., 276, 308</p>
          <p xml:space="preserve" id="p_002235" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002235">Jacopini, A., 144, 300 Little, A. D., 287</p>
          <p xml:space="preserve" id="p_002236" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002236">Jobs, S., 260 Locken, O. S., 76</p>
          <p xml:space="preserve" id="p_002237" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002237">Jones, C, 217, 218, 222, 223, 224, Lowry, E. S., 300</p>
          <p xml:space="preserve" id="p_002238" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002238">305 Lucas, P., 295</p>
          <p xml:space="preserve" id="p_002239" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002239">joys of the craft, 7 Lukasik, S., 211</p>
          <p xml:space="preserve" id="p_002240" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002240">Kane, M, 295 Macintosh WIMP interface, 234,</p>
          <p xml:space="preserve" id="p_002241" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002241">keyboard, 262 260, 263</p>
          <p xml:space="preserve" id="p_002242" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002242">Keys, W. J., 169 Madnick, S., 274, 308</p>
          <p xml:space="preserve" id="p_002243" smilref="The_Mythical_Man_Month_Essay00009.smil#p_002243">King, W. R., 301 magic, 7, 142, 226</p>
          <p xml:space="preserve" id="p_002244"><span class="text" id="span_001553" smilref="The_Mythical_Man_Month_Essay00009.smil#span_001553">Knight, C. R., 3 maintenance, </span><strong id="strong_000720" smilref="The_Mythical_Man_Month_Essay00009.smil#strong_000720">118, </strong><span class="text" id="span_001554" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001554">242</span></p>
          <p xml:space="preserve" id="p_002245"><span class="text" id="span_001555" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001555">Knuth, D. E., 102, 297 man-month, </span><strong id="strong_000721" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000721">16, </strong><span class="text" id="span_001556" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001556">231, 273</span></p>
          <p xml:space="preserve" id="p_002246" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002246">Kugler, H. J., 303 management information system</p>
          <p xml:space="preserve" id="p_002247" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002247">(MIS), 107, 111, 219, 239,</p>
          <p xml:space="preserve" id="p_002248" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002248">label, 174 240, 285</p>
          <p xml:space="preserve" id="p_002249"><span class="text" id="span_001557" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001557">Lachover, H., 305 manual, </span><strong id="strong_000722" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000722">62, </strong><span class="text" id="span_001558" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001558">239, 258, 263</span></p>
          <p xml:space="preserve" id="p_002250" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002250">Lake, C, 291 System/360, 62</p>
          <p xml:space="preserve" id="p_002251" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002251">Landy, B., 298 market, mass, 180, 197, 218, 223,</p>
          <p xml:space="preserve" id="p_002252" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002252">Lang, D. E., 302 258</p>
          <p xml:space="preserve" id="p_002253" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002253">language description, formal, 181 matrix management, 222</p>
          <p xml:space="preserve" id="p_002254" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002254">language translator, 93 matrix-type organization, 79</p>
          <p xml:space="preserve" id="p_002255" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002255">language, fourth-generation, 283 Mausner, B., 210, 304</p>
          <p xml:space="preserve" id="p_002256"><span class="text" id="span_001559" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001559">high-level, 118,</span><strong id="strong_000723" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000723">135, </strong><span class="text" id="span_001560" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001560">143, 146, Mayer, D. B., 297</span></p>
          <p xml:space="preserve" id="p_002257"><strong id="strong_000724" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000724">186, </strong><span class="text" id="span_001561" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001561">194, 225, 237, 241, 244, McCarthy, J., 247, 270, 278, 306,</span></p>
          <p xml:space="preserve" id="p_002258"><span class="text" id="span_001562" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001562">245, 248, 249 </span><em id="em_000727" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000727">viii</em></p>
          <p xml:space="preserve" id="p_002259" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002259">machine, 180, 225 McCracken, D. D., 302</p>
          <p xml:space="preserve" id="p_002260" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002260">programming, 68, 180, 186, 225 McDonough, E., 300</p>
          <p xml:space="preserve" id="p_002261"><span class="text" id="span_001563" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001563">scripting, 287 Mealy, G., </span><em id="em_000728" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000728">xi</em></p>
          <p xml:space="preserve" id="p_002262"><span class="text" id="span_001564" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001564">late project, </span><strong id="strong_000725" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000725">13, </strong><span class="text" id="span_001565" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001565">89, 217, 235, 246, measurement, 222</span></p>
          <p xml:space="preserve" id="p_002263" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002263">275, 306 medium of creation, tractable, 7,</p>
          <p xml:space="preserve" id="p_002264" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002264">lawyer, language, 34 15, 117</p>
          <p xml:space="preserve" id="p_002265" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002265">Lehman, M., 122, 123, 150, 243, meeting, problem action, 157</p>
          <p xml:space="preserve" id="p_002266" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002266">246, 298, 301 status review, 75, 157 Lewis, C. S., 123, 298 memory use pattern, 129, 239 library, 187, 222, 239, 244, 272, mentor, 203, 275</p>
          <p xml:space="preserve" id="p_002267" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002267">305 menu, 260</p>
          <pagenum page="normal" id="p316" smilref="The_Mythical_Man_Month_Essay00010.smil#p316">316</pagenum>
          <p xml:space="preserve" id="p_002268"><span class="text" id="span_001566" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001566">Merwin, R. E., 299 multiple implementations, </span><strong id="strong_000726" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000726">68</strong></p>
          <p xml:space="preserve" id="p_002269" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002269">Merwin-Dagget, M., 300 MVS/370, 203</p>
          <p xml:space="preserve" id="p_002270"><span class="text" id="span_001567" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001567">metaphor, </span><strong id="strong_000727" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000727">260</strong></p>
          <p xml:space="preserve" id="p_002271"><span class="text" id="span_001568" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001568">metaprogramming, </span><strong id="strong_000728" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000728">285 </strong><span class="text" id="span_001569" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001569">Naamad, A., 305</span></p>
          <p xml:space="preserve" id="p_002272" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002272">microcomputer revolution, 214, Nanus, B., 88, 296</p>
          <p xml:space="preserve" id="p_002273" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002273">279 Naur, P., 64</p>
          <p xml:space="preserve" id="p_002274"><span class="text" id="span_001570" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001570">microfiche, </span><em id="em_000729" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000729">77, </em><span class="text" id="span_001571" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001571">235 Needham, R. M., 298</span></p>
          <p xml:space="preserve" id="p_002275" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002275">Microsoft Corporation, 246, 270 Nelson, E. A., 297</p>
          <p xml:space="preserve" id="p_002276" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002276">Microsoft Windows, 260 nesting, as documentation aid,</p>
          <p xml:space="preserve" id="p_002277" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002277">Microsoft Word 6.0, 258, 306 172</p>
          <p xml:space="preserve" id="p_002278" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002278">Microsoft Works, 219 network nature of</p>
          <p xml:space="preserve" id="p_002279"><span class="text" id="span_001572" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001572">milestone, 22, 25,</span><strong id="strong_000729" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000729">154, </strong><span class="text" id="span_001573" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001573">158, 247, communication, 79</span></p>
          <p xml:space="preserve" id="p_002280" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002280">248, 270 Neustadt, R. E., 295</p>
          <p xml:space="preserve" id="p_002281" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002281">Mills, H. D., 32, 33, 201, 267, Newell, A., 64, 296</p>
          <p xml:space="preserve" id="p_002282" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002282">271, 294, 299, 300, 303, 307 Noah, 97</p>
          <p xml:space="preserve" id="p_002283" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002283">MILSPEC documentation, 248 North Carolina State University,</p>
          <p xml:space="preserve" id="p_002284" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002284">mini-decision, 63, 111, 234, 240 287</p>
          <p xml:space="preserve" id="p_002285" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002285">MiniCad design program, 285 notebook, status, 33</p>
          <p xml:space="preserve" id="p_002286"><span class="text" id="span_001574" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001574">MIT, 93, 121, 146, 287, 293, </span><em id="em_000730" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000730">xi </em><span class="text" id="span_001575" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001575">system, 147</span></p>
          <p xml:space="preserve" id="p_002287" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002287">mnemonic name, 174 Nygaard, 308 model, 255, 256, 274, 307</p>
          <p xml:space="preserve" id="p_002288" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002288">COCOMO, 273 object 285</p>
          <p xml:space="preserve" id="p_002289"><span class="text" id="span_001576" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001576">incremental-build, 212, </span><strong id="strong_000730" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000730">267, </strong><span class="text" id="span_001577" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001577">object-oriented design, 302</span></p>
          <p xml:space="preserve" id="p_002290"><strong id="strong_000731" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000731">270 </strong><span class="text" id="span_001578" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001578">object-oriented programming,</span></p>
          <p xml:space="preserve" id="p_002291"><span class="text" id="span_001579" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001579">spiral, 303, 307 </span><strong id="strong_000732" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000732">189, 219, </strong><span class="text" id="span_001580" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001580">273</span></p>
          <p xml:space="preserve" id="p_002292"><span class="text" id="span_001581" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001581">waterfall, </span><strong id="strong_000733" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000733">264, </strong><span class="text" id="span_001582" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001582">307 objective, 8, 75, 108,110, 117, 239</span></p>
          <p xml:space="preserve" id="p_002293" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002293">Modula, 189, 203 cost and performance, 49</p>
          <p xml:space="preserve" id="p_002294" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002294">modularity, 118, 188, 220 space and time, 49</p>
          <p xml:space="preserve" id="p_002295" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002295">module, 101, 122, 143, 241, 243, obsolescence, 9, 26, 123</p>
          <p xml:space="preserve" id="p_002296"><span class="text" id="span_001583" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001583">245, 269, 271, </span><strong id="strong_000734" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000734">273, </strong><span class="text" id="span_001584" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001584">285 off-the-shelf package, 198</span></p>
          <p xml:space="preserve" id="p_002297" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002297">modules, number of, 122 office space, 242</p>
          <p xml:space="preserve" id="p_002298" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002298">Mooers, C. N., 44 Ogdin, J. L., 293, 298</p>
          <p xml:space="preserve" id="p_002299"><span class="text" id="span_001585" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001585">Moore, S. E., </span><em id="em_000731" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000731">xii </em><span class="text" id="span_001586" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001586">open system, 283</span></p>
          <p xml:space="preserve" id="p_002300" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002300">Morin, L. H., 88, 296 operating system, 128, 238, 243,</p>
          <p xml:space="preserve" id="p_002301"><span class="text" id="span_001587" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001587">Mostow, J., 302 </span><strong id="strong_000735" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000735">283</strong></p>
          <p xml:space="preserve" id="p_002302" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002302">mouse, 307 Operating System/360, 43, 45, 47,</p>
          <p xml:space="preserve" id="p_002303"><span class="text" id="span_001588" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001588">moving projects, </span><strong id="strong_000736" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000736">277 </strong><span class="text" id="span_001589" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001589">56, 76, 93, 129, </span><strong id="strong_000737" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000737">234, </strong><span class="text" id="span_001590" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001590">235, 237,</span></p>
          <p xml:space="preserve" id="p_002304"><span class="text" id="span_001591" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001591">Mozart, W. A. 202 243, 271, 276, 295, </span><em id="em_000732" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000732">i, x</em></p>
          <p xml:space="preserve" id="p_002305"><span class="text" id="span_001592" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001592">MS-DOS, 203, 255, 284 optimism, </span><strong id="strong_000738" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000738">14, </strong><span class="text" id="span_001593" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001593">212, 231</span></p>
          <p xml:space="preserve" id="p_002306" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002306">Multics, 93, 136, 146, 237, 298, option, 101, 165, 238</p>
          <p xml:space="preserve" id="p_002307" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002307">299, 300 Orbais, J. d', 41</p>
          <pagenum page="normal" id="p317" smilref="The_Mythical_Man_Month_Essay00010.smil#p317">317</pagenum>
          <p xml:space="preserve" id="p_002308"><span class="text" id="span_001594" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001594">order-of-magnitude pilot plant, </span><strong id="strong_000739" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000739">116, </strong><span class="text" id="span_001595" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001595">240</span></p>
          <p xml:space="preserve" id="p_002309" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002309">improvement, 208, 213, 215, pilot system, 298</p>
          <p xml:space="preserve" id="p_002310"><span class="text" id="span_001596" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001596">281, 291, </span><em id="em_000733" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000733">vii </em><span class="text" id="span_001597" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001597">pipes, 187</span></p>
          <p xml:space="preserve" id="p_002311" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002311">organization chart, 108, 111, 239 Pisano, A., 127</p>
          <p xml:space="preserve" id="p_002312"><span class="text" id="span_001598" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001598">organization, 74, </span><strong id="strong_000740" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000740">78,118, </strong><span class="text" id="span_001599" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001599">235, Pius XI, 277, 308</span></p>
          <p xml:space="preserve" id="p_002313" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002313">236, 242 PL/C language, 47, 294</p>
          <p xml:space="preserve" id="p_002314"><em id="em_000734" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000734">OS/360 Concepts and Facilities, </em><span class="text" id="span_001600" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001600">134 PL/I, 32, 47, 64, 66, 93,</span><strong id="strong_000741" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000741">135, 172,</strong></p>
          <p xml:space="preserve" id="p_002315" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002315">OS/360 Queued 203, 245, 299, 302</p>
          <p xml:space="preserve" id="p_002316" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002316">Telecommunications Access planning, 20</p>
          <p xml:space="preserve" id="p_002317" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002317">Method, 285 Plans and Controls organization,</p>
          <p xml:space="preserve" id="p_002318"><span class="text" id="span_001601" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001601">OS/360, </span><em id="em_000735" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000735">See </em><span class="text" id="span_001602" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001602">Operating System/ 160, 248</span></p>
          <p xml:space="preserve" id="p_002319" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002319">360 playpen, 133, 149, 244, 246</p>
          <p xml:space="preserve" id="p_002320" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002320">overlay, 54, 99, 129 Pnueli, A., 305</p>
          <p xml:space="preserve" id="p_002321"><span class="text" id="span_001603" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001603">overview, </span><strong id="strong_000742" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000742">165, </strong><span class="text" id="span_001604" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001604">248 pointing, 260</span></p>
          <p xml:space="preserve" id="p_002322" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002322">Ovid, 55 policed system, 65</p>
          <p xml:space="preserve" id="p_002323" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002323">Politi, M., 305</p>
          <p xml:space="preserve" id="p_002324" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002324">Padegs, A., 62 Pomeroy, J. W., 298</p>
          <p xml:space="preserve" id="p_002325"><span class="text" id="span_001605" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001605">paperwork, </span><strong id="strong_000743" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000743">108 </strong><span class="text" id="span_001606" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001606">Poor Richard (Benjamin</span></p>
          <p xml:space="preserve" id="p_002326" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002326">Pamas families, 268 Franklin), 87</p>
          <p xml:space="preserve" id="p_002327" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002327">Parnas, D. L., 78, 190, 193, 212, Pope, Alexander , 207</p>
          <p xml:space="preserve" id="p_002328"><span class="text" id="span_001607" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001607">221, 224, 226, 236, 268, </span><strong id="strong_000744" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000744">271, </strong><span class="text" id="span_001608" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001608">Portman, C, 89, 237, 293, 296, </span><em id="em_000736" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000736">xi</em></p>
          <p xml:space="preserve" id="p_002329" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002329">288, 296, 302, 304, 307, 308, power tools for the mind, 219</p>
          <p xml:space="preserve" id="p_002330"><em id="em_000737" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000737">viii </em><span class="text" id="span_001609" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001609">power, giving up, 277</span></p>
          <p xml:space="preserve" id="p_002331"><span class="text" id="span_001610" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001610">partitioning, </span><strong id="strong_000745" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000745">16, </strong><span class="text" id="span_001611" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001611">231 practice, good software</span></p>
          <p xml:space="preserve" id="p_002332" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002332">Pascal programming language, engineering, 193, 202</p>
          <p xml:space="preserve" id="p_002333" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002333">203, 285 price, 109</p>
          <p xml:space="preserve" id="p_002334" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002334">Pascal, B., 123 PROCEDURE, 174</p>
          <p xml:space="preserve" id="p_002335" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002335">pass structure, 166 procedure, catalogued, 34</p>
          <p xml:space="preserve" id="p_002336"><span class="text" id="span_001612" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001612">Patrick, R. L., </span><em id="em_000738" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000738">vii </em><span class="text" id="span_001613" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001613">producer, role of, </span><strong id="strong_000746" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000746">79, </strong><span class="text" id="span_001614" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001614">236, 256</span></p>
          <p xml:space="preserve" id="p_002337"><span class="text" id="span_001615" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001615">Patterson, D., 306 product test, </span><strong id="strong_000747" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000747">69, </strong><span class="text" id="span_001616" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001616">142, 234, 245</span></p>
          <p xml:space="preserve" id="p_002338"><span class="text" id="span_001617" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001617">people, </span><strong id="strong_000748" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000748">29, 202, 276, </strong><span class="text" id="span_001618" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001618">284 product, exciting, 203</span></p>
          <p xml:space="preserve" id="p_002339"><em id="em_000739" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000739">Peopleware: Productive Projects and </em><span class="text" id="span_001619" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001619">programming system, 4, 230</span></p>
          <p xml:space="preserve" id="p_002340"><em id="em_000740" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000740">Teams, </em><span class="text" id="span_001620" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001620">276 programming, 5, 288</span></p>
          <p xml:space="preserve" id="p_002341"><span class="text" id="span_001621" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001621">perfection, requirement for, 8 productivity equation, </span><strong id="strong_000749" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000749">197</strong></p>
          <p xml:space="preserve" id="p_002342" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002342">performance simulator, 134 productivity, programming, 21,</p>
          <p xml:space="preserve" id="p_002343"><span class="text" id="span_001622" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001622">performance, 182, 258 </span><strong id="strong_000750" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000750">30, 88, </strong><span class="text" id="span_001623" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001623">94, 135, 181, 186, 208,</span></p>
          <p xml:space="preserve" id="p_002344"><span class="text" id="span_001624" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001624">PERT chart, 89, 156, 158, 247 213, </span><strong id="strong_000751" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000751">217, </strong><span class="text" id="span_001625" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001625">237, 244, 245, 273,</span></p>
          <p xml:space="preserve" id="p_002345"><span class="text" id="span_001626" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001626">pessimism, </span><strong id="strong_000752" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000752">212 </strong><span class="text" id="span_001627" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001627">276, 284</span></p>
          <p xml:space="preserve" id="p_002346" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002346">Peter the Apostle, 171 program clerk, 33</p>
          <p xml:space="preserve" id="p_002347"><span class="text" id="span_001628" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001628">philosopher's stone, 304 program library, </span><strong id="strong_000753" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000753">132</strong></p>
          <p xml:space="preserve" id="p_002348"><span class="text" id="span_001629" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001629">Piestrasanta, A. M., 160, </span><em id="em_000741" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000741">xi </em><span class="text" id="span_001630" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001630">program maintenance, </span><strong id="strong_000754" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000754">120</strong></p>
          <pagenum page="normal" id="p318" smilref="The_Mythical_Man_Month_Essay00010.smil#p318">318</pagenum>
          <p xml:space="preserve" id="p_002349" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002349">program name, 174 Ralston, A. , 300</p>
          <p xml:space="preserve" id="p_002350"><span class="text" id="span_001631" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001631">program products, 273 rapid prototyping, 180,</span><strong id="strong_000755" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000755">199, 270</strong></p>
          <p xml:space="preserve" id="p_002351" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002351">program structure graph, 170, real-time system, 301</p>
          <p xml:space="preserve" id="p_002352" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002352">185 realism, 212, 226</p>
          <p xml:space="preserve" id="p_002353" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002353">program, 4 realization, step in creation, 49,</p>
          <p xml:space="preserve" id="p_002354" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002354">auxiliary, 149 143, 256, 266</p>
          <p xml:space="preserve" id="p_002355"><span class="text" id="span_001632" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001632">self-documenting, </span><strong id="strong_000756" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000756">171 </strong><span class="text" id="span_001633" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001633">refinement, progressive, 143,</span></p>
          <p xml:space="preserve" id="p_002356"><span class="text" id="span_001634" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001634">programmer retraining, 220, 221 </span><strong id="strong_000757" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000757">267, </strong><span class="text" id="span_001635" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001635">299</span></p>
          <p xml:space="preserve" id="p_002357"><span class="text" id="span_001636" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001636">programming environment, 187 requirements, </span><strong id="strong_000758" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000758">199</strong></p>
          <p xml:space="preserve" id="p_002358"><span class="text" id="span_001637" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001637">programming language, 221 regenerative schedule disaster, </span><strong id="strong_000759" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000759">21</strong></p>
          <p xml:space="preserve" id="p_002359" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002359">programming product, 5, 116, Reims Cathedral, 41</p>
          <p xml:space="preserve" id="p_002360"><span class="text" id="span_001638" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001638">240 release, program, </span><strong id="strong_000760" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000760">121, </strong><span class="text" id="span_001639" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001639">185, </span><strong id="strong_000761" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000761">217,</strong></p>
          <p xml:space="preserve" id="p_002361" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002361">programming system, 6 243, 244</p>
          <p xml:space="preserve" id="p_002362" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002362">programming systems product, reliability, 186</p>
          <p xml:space="preserve" id="p_002363" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002363">4, 230 remote job entry, 58</p>
          <p xml:space="preserve" id="p_002364" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002364">programming systems project, repartitioning, 24, 232, 275</p>
          <p xml:space="preserve" id="p_002365" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002365">237 representation, of information,</p>
          <p xml:space="preserve" id="p_002366"><span class="text" id="span_001640" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001640">programming, automatic, </span><strong id="strong_000762" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000762">193 102, </strong><span class="text" id="span_001641" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001641">239</span></p>
          <p xml:space="preserve" id="p_002367"><span class="text" id="span_001642" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001642">graphical, </span><strong id="strong_000763" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000763">194 </strong><span class="text" id="span_001643" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001643">requirements refinement, </span><strong id="strong_000764" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000764">199</strong></p>
          <p xml:space="preserve" id="p_002368" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002368">visual, 194 rescheduling, 24</p>
          <p xml:space="preserve" id="p_002369"><span class="text" id="span_001644" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001644">progressive refinement, </span><strong id="strong_000765" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000765">267, </strong><span class="text" id="span_001645" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001645">299 responsibility, versus authority,</span></p>
          <p xml:space="preserve" id="p_002370" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002370">Project Mercury Real-Time 8, 231</p>
          <p xml:space="preserve" id="p_002371" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002371">System, 56 Restaurant Antoine, 13 /</p>
          <p xml:space="preserve" id="p_002372" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002372">project workbook, 235 reusable component, 210'</p>
          <p xml:space="preserve" id="p_002373"><span class="text" id="span_001646" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001646">promotion, in rank, 120 reuse, </span><strong id="strong_000766" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000766">222, </strong><span class="text" id="span_001647" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001647">224, 269, 273, 285</span></p>
          <p xml:space="preserve" id="p_002374"><span class="text" id="span_001648" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001648">prototyping, rapid, 180,</span><strong id="strong_000767" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000767">199, 270 </strong><span class="text" id="span_001649" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001649">Reynolds, C. H., 294, 301</span></p>
          <p xml:space="preserve" id="p_002375" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002375">Publilius, 87 role conflict, reducing, 157</p>
          <p xml:space="preserve" id="p_002376" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002376">purple-wire technique, 149 ROM, read-only memory, 234</p>
          <p xml:space="preserve" id="p_002377" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002377">purpose, of a program, 165, 249 Roosevelt, F. D., 115, 298</p>
          <p xml:space="preserve" id="p_002378" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002378">of a variable, 174 Rosen, S., 300</p>
          <p xml:space="preserve" id="p_002379" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002379">Royce, W. W., 265, 307</p>
          <p xml:space="preserve" id="p_002380"><em id="em_000742" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000742">Quadragesimo Anno, Encyclical, </em><span class="text" id="span_001650" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001650">Rustin, R., 300, 303, 307</span></p>
          <p xml:space="preserve" id="p_002381"><span class="text" id="span_001651" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001651">277, 308 Ruth, G. H. (Babe), 87 quality, </span><strong id="strong_000768" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000768">217</strong></p>
          <p xml:space="preserve" id="p_002382" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002382">quantization, of change, 62, 118, Sackman, H., 20, 29, 88, 294, 296</p>
          <p xml:space="preserve" id="p_002383" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002383">150, 246 Salieri, A., 202</p>
          <p xml:space="preserve" id="p_002384" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002384">of demand for change, 117 Saltzer, J. H., 298, 299</p>
          <p xml:space="preserve" id="p_002385" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002385">Sayderman, B. B., 210, 304</p>
          <p xml:space="preserve" id="p_002386" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002386">Raeder, G., 302 Sayers, D. L., 15, 209, 303</p>
          <p xml:space="preserve" id="p_002387" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002387">raise in salary, 120 scaffolding, 34, 148, 246</p>
          <pagenum page="normal" id="p319" smilref="The_Mythical_Man_Month_Essay00010.smil#p319">319</pagenum>
          <p xml:space="preserve" id="p_002388" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002388">scaling up, 36,116, 240, 288 logic, 65,131</p>
          <p xml:space="preserve" id="p_002389" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002389">Scalzi, C. A., 300 performance, 99</p>
          <p xml:space="preserve" id="p_002390"><span class="text" id="span_001652" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001652">schedule, 79, 108, 111, 154, 239, size, program, 30, </span><strong id="strong_000769" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000769">98, </strong><span class="text" id="span_001653" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001653">129, 135,</span></p>
          <p xml:space="preserve" id="p_002391"><span class="text" id="span_001654" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001654">244, 247, 265, 273, </span><em id="em_000743" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000743">See </em><span class="text" id="span_001655" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001655">Late 175</span></p>
          <p xml:space="preserve" id="p_002392" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002392">project Skwiersky, B. M., 303</p>
          <p xml:space="preserve" id="p_002393"><span class="text" id="span_001656" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001656">cost-optimum, 274 slippage, schedule, </span><em id="em_000744" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000744">See </em><span class="text" id="span_001657" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001657">Late</span></p>
          <p xml:space="preserve" id="p_002394" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002394">scheduler, 57 project</p>
          <p xml:space="preserve" id="p_002395" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002395">scheduling, 14,129 Sloane, J. C, xiï</p>
          <p xml:space="preserve" id="p_002396"><span class="text" id="span_001658" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001658">Schumacher, E. R, 277, </span><strong id="strong_000770" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000770">279, </strong><em id="em_000745" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000745">Small is Beautiful, </em><strong id="strong_000771" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000771">277</strong></p>
          <p xml:space="preserve" id="p_002397" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002397">308 Smalltalk, 203, 220</p>
          <p xml:space="preserve" id="p_002398" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002398">screen, 194, 201, 268, 287, 308 Smith, S., 97</p>
          <p xml:space="preserve" id="p_002399"><span class="text" id="span_001659" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001659">second-system effect, </span><strong id="strong_000772" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000772">51, </strong><span class="text" id="span_001660" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001660">234, snapshot, 145</span></p>
          <p xml:space="preserve" id="p_002400"><strong id="strong_000773" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000773">257, 259 </strong><span class="text" id="span_001661" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001661">Snyder, Van, 222</span></p>
          <p xml:space="preserve" id="p_002401" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002401">secretary, 33 sociological barrier, 119</p>
          <p xml:space="preserve" id="p_002402" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002402">security, 183 Sødahl, L., 211</p>
          <p xml:space="preserve" id="p_002403"><span class="text" id="span_001662" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001662">self-documenting program, 118, </span><em id="em_000746" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000746">Software Engineering Economics,</em></p>
          <p xml:space="preserve" id="p_002404"><strong id="strong_000774" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000774">171,</strong><span class="text" id="span_001663" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001663">249 273</span></p>
          <p xml:space="preserve" id="p_002405" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002405">Selin, I., 219 Software Engineering Institute,</p>
          <p xml:space="preserve" id="p_002406" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002406">semantics, 44, 64, 66, 225, 261, 202</p>
          <p xml:space="preserve" id="p_002407"><span class="text" id="span_001664" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001664">272 software industry, </span><strong id="strong_000775" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000775">282</strong></p>
          <p xml:space="preserve" id="p_002408"><span class="text" id="span_001665" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001665">Shakespeare, W., 141, 255 </span><em id="em_000747" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000747">Software Project Dynamics, </em><span class="text" id="span_001666" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001666">274</span></p>
          <p xml:space="preserve" id="p_002409" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002409">Shannon, E. C., 212 Sophocles, 153,155</p>
          <p xml:space="preserve" id="p_002410" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002410">Share 709 Operating System space allocation, 108, 111</p>
          <p xml:space="preserve" id="p_002411" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002411">(SOS), 295 space, memory, 238</p>
          <p xml:space="preserve" id="p_002412" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002412">Share Operating System for the office, 203, 276</p>
          <p xml:space="preserve" id="p_002413"><span class="text" id="span_001667" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001667">IBM 709, 57 program, </span><em id="em_000748" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000748">See </em><span class="text" id="span_001668" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001668">size, program,</span></p>
          <p xml:space="preserve" id="p_002414" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002414">Shell, D. L., 295 specialization of function, 35, 79,</p>
          <p xml:space="preserve" id="p_002415" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002415">Sherman, M. , 189 236</p>
          <p xml:space="preserve" id="p_002416" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002416">Sherman, R., 305 specification, 195, 200, 245, 256,</p>
          <p xml:space="preserve" id="p_002417"><span class="text" id="span_001669" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001669">short cuts, </span><strong id="strong_000776" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000776">263 </strong><span class="text" id="span_001670" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001670">266, 301, 304</span></p>
          <p xml:space="preserve" id="p_002418" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002418">shrink-wrapped software, 218, architectural, 43, 142, 245</p>
          <p xml:space="preserve" id="p_002419"><span class="text" id="span_001671" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001671">219, 223, 257, </span><strong id="strong_000777" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000777">279, </strong><span class="text" id="span_001672" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001672">282, </span><strong id="strong_000778" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000778">284 </strong><span class="text" id="span_001673" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001673">functional, 32, 48, 49, </span><strong id="strong_000779" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000779">62, </strong><span class="text" id="span_001674" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001674">75,</span></p>
          <p xml:space="preserve" id="p_002420" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002420">Shtul-Trauring, A., 305 108, 110</p>
          <p xml:space="preserve" id="p_002421" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002421">side effect, 65, 122, 243 interface, 75</p>
          <p xml:space="preserve" id="p_002422"><span class="text" id="span_001675" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001675">silver bullet, </span><strong id="strong_000780" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000780">179, 207, </strong><span class="text" id="span_001676" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001676">212, 214, internal, 75</span></p>
          <p xml:space="preserve" id="p_002423" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002423">226, 303, 304 performance, 32</p>
          <p xml:space="preserve" id="p_002424" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002424">simplicity, 44,181,186 testing the, 142</p>
          <p xml:space="preserve" id="p_002425" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002425">Simula-67,189, 308 speed, program, 30, 98, 135</p>
          <p xml:space="preserve" id="p_002426" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002426">simulator, 234, 244 spiral, pricing-forecasting, 109</p>
          <p xml:space="preserve" id="p_002427"><span class="text" id="span_001677" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001677">environment, </span><strong id="strong_000781" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000781">131 </strong><span class="text" id="span_001678" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001678">spreadsheet, 198, 280, 281</span></p>
          <pagenum page="normal" id="p320" smilref="The_Mythical_Man_Month_Essay00010.smil#p320">320</pagenum>
          <p xml:space="preserve" id="p_002428" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002428">staff group, 79 system integration sublibrary, 133</p>
          <p xml:space="preserve" id="p_002429"><span class="text" id="span_001679" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001679">staffing, project, </span><strong id="strong_000782" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000782">21, </strong><span class="text" id="span_001680" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001680">273 system test, 19, 122,</span><strong id="strong_000783" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000783">133,147</strong></p>
          <p xml:space="preserve" id="p_002430" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002430">Stalnaker, A. W., 297 system, large, 31</p>
          <p xml:space="preserve" id="p_002431" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002431">standard, 75, 168, 249, 283 programming, 6, 288</p>
          <p xml:space="preserve" id="p_002432" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002432">standard, de facto, 264 System/360 computer family, 296,</p>
          <p xml:space="preserve" id="p_002433" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002433">Stanford Research Institute, 78, 301</p>
          <p xml:space="preserve" id="p_002434" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002434">260 systems product, programming,</p>
          <p xml:space="preserve" id="p_002435"><span class="text" id="span_001681" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001681">Stanton, N., </span><em id="em_000749" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000749">ix </em><span class="text" id="span_001682" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001682">4, 288 start-up firm, 278, 284</span></p>
          <p xml:space="preserve" id="p_002436" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002436">Statemate design tool, 305 Tacoma Narrows Bridge, 115, 264</p>
          <p xml:space="preserve" id="p_002437" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002437">status control, 108 Taliaffero, W. M., 297</p>
          <p xml:space="preserve" id="p_002438"><span class="text" id="span_001683" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001683">status report, 157, 247 target machine, </span><strong id="strong_000784" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000784">129, </strong><span class="text" id="span_001684" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001684">243, 244</span></p>
          <p xml:space="preserve" id="p_002439" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002439">status review meeting, 157 Taub, A. H., 301</p>
          <p xml:space="preserve" id="p_002440" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002440">status symbol, 81 Taylor, B., 260</p>
          <p xml:space="preserve" id="p_002441" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002441">Steel, T. B., Jr., 295 team, small, sharp, 30</p>
          <p xml:space="preserve" id="p_002442"><span class="text" id="span_001685" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001685">Strachey, C, 56, 146, 295, 300 technical director, role of, </span><strong id="strong_000785" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000785">79,</strong></p>
          <p xml:space="preserve" id="p_002443" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002443">straightforwardness, 44 236, 256</p>
          <p xml:space="preserve" id="p_002444" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002444">Strategic Defense Initiative, 257 technology, programming, 49,</p>
          <p xml:space="preserve" id="p_002445"><span class="text" id="span_001686" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001686">Stretch Operating System, 56, 99 102,</span><strong id="strong_000786" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000786">128 </strong><span class="text" id="span_001687" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001687">structured programming, 32,</span><strong id="strong_000787" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000787">144, </strong><span class="text" id="span_001688" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001688">telephone log, 68, 234</span></p>
          <p xml:space="preserve" id="p_002446" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002446">218, 241, 245 test case, 6, 34, 147, 166,192,</p>
          <p xml:space="preserve" id="p_002447" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002447">stub, 267 248, 270</p>
          <p xml:space="preserve" id="p_002448" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002448">Stutzke, R. D., 275, 308 test, component, 20</p>
          <p xml:space="preserve" id="p_002449"><span class="text" id="span_001689" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001689">subroutine, 182, 272 system, 19, 122, </span><strong id="strong_000788" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000788">133,147 </strong><span class="text" id="span_001690" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001690">Subsidiary Function, Principle of, tester, 34</span></p>
          <p xml:space="preserve" id="p_002450" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002450">277 testing advisor, 192</p>
          <p xml:space="preserve" id="p_002451" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002451">superior-subordinate testing, 6</p>
          <p xml:space="preserve" id="p_002452" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002452">relationship, 35 regression, 122, 242, 268</p>
          <p xml:space="preserve" id="p_002453" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002453">supervisory program, 146 specification, 142</p>
          <p xml:space="preserve" id="p_002454" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002454">support cost, 218 TESTRAN debugging facility, 57,</p>
          <p xml:space="preserve" id="p_002455"><span class="text" id="span_001691" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001691">surgical team, </span><strong id="strong_000789" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000789">27, </strong><span class="text" id="span_001692" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001692">120, 232 146</span></p>
          <p xml:space="preserve" id="p_002456"><span class="text" id="span_001693" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001693">Sussenguth, E. H., 296 text-editing system, </span><strong id="strong_000790" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000790">134, </strong><span class="text" id="span_001694" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001694">244</span></p>
          <p xml:space="preserve" id="p_002457" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002457">Swift, J., 115 Thompson, K., 308</p>
          <p xml:space="preserve" id="p_002458"><span class="text" id="span_001695" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001695">synchronism in file, 171 throw-away, 116, 241, </span><strong id="strong_000791" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000791">264</strong></p>
          <p xml:space="preserve" id="p_002459" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002459">syntax, 44, 64, 66, 225, 262 time, calendar, 14, 231</p>
          <p xml:space="preserve" id="p_002460" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002460">abstract, 64 machine, 180</p>
          <p xml:space="preserve" id="p_002461"><span class="text" id="span_001696" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001696">system build, </span><strong id="strong_000792" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000792">147, </strong><span class="text" id="span_001697" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001697">246, 301 Time-Sharing System, PDP-10,</span></p>
          <p xml:space="preserve" id="p_002462"><span class="text" id="span_001698" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001698">system debugging, </span><strong id="strong_000793" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000793">132,147 </strong><span class="text" id="span_001699" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001699">43</span></p>
          <p xml:space="preserve" id="p_002463" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002463">System Development Time-Sharing System/360, 136,</p>
          <p xml:space="preserve" id="p_002464" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002464">Corporation, 88, 297 146</p>
          <pagenum page="normal" id="p321" smilref="The_Mythical_Man_Month_Essay00010.smil#p321">321</pagenum>
          <p xml:space="preserve" id="p_002465"><span class="text" id="span_001700" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001700">time-sharing, </span><strong id="strong_000794" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000794">187, </strong><span class="text" id="span_001701" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001701">280, 282, 300 Vanilla Framework design</span></p>
          <p xml:space="preserve" id="p_002466"><span class="text" id="span_001702" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001702">tool, </span><strong id="strong_000795" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000795">125,196, </strong><span class="text" id="span_001703" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001703">243, 258, 280 methodology, </span><strong id="strong_000796" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000796">216</strong></p>
          <p xml:space="preserve" id="p_002467"><span class="text" id="span_001704" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001704">power, for the mind, 219 vehicle machine, </span><strong id="strong_000797" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000797">131</strong></p>
          <p xml:space="preserve" id="p_002468"><span class="text" id="span_001705" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001705">toolsmith, 34, 128 verification, </span><strong id="strong_000798" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000798">195</strong></p>
          <p xml:space="preserve" id="p_002469"><span class="text" id="span_001706" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001706">top-down design, 220,134, 143, version, </span><strong id="strong_000799" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000799">118, </strong><span class="text" id="span_001707" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001707">185, </span><strong id="strong_000800" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000800">217, </strong><span class="text" id="span_001708" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001708">241, 268,</span></p>
          <p xml:space="preserve" id="p_002470" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002470">245 270</p>
          <p xml:space="preserve" id="p_002471" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002471">top-down programming, 303 alpha, 240</p>
          <p xml:space="preserve" id="p_002472" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002472">Tower of Babel, 72, 235 beta 240</p>
          <p xml:space="preserve" id="p_002473" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002473">TRAC language, 44 Vessey, 214</p>
          <p xml:space="preserve" id="p_002474"><span class="text" id="span_001709" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001709">tracing, program 146 virtual environment, 281, </span><em id="em_000750" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000750">i, viii</em></p>
          <p xml:space="preserve" id="p_002475" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002475">trade-off, size-function, 101 virtual memory, 238</p>
          <p xml:space="preserve" id="p_002476" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002476">size-speed, 99, 101 visual programming, 302</p>
          <p xml:space="preserve" id="p_002477" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002477">training, time for, 18 visual representation, 216</p>
          <p xml:space="preserve" id="p_002478"><span class="text" id="span_001710" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001710">transient area, </span><strong id="strong_000801" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000801">101, </strong><span class="text" id="span_001711" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001711">238 vocabularies, large, </span><strong id="strong_000802" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000802">224</strong></p>
          <p xml:space="preserve" id="p_002479"><span class="text" id="span_001712" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001712">Trapnell, F. M., 301, </span><em id="em_000751" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000751">x, xi </em><span class="text" id="span_001713" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001713">Voice Navigator voice recognition</span></p>
          <p xml:space="preserve" id="p_002480" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002480">tree organization, 79 system, 264</p>
          <p xml:space="preserve" id="p_002481" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002481">Truman, H. S., 61 von Neumann, J., 170, 194, 301</p>
          <p xml:space="preserve" id="p_002482" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002482">TRW, Inc. , 273 Vyssotsky, V. A., 142, 158, 179,</p>
          <p xml:space="preserve" id="p_002483"><span class="text" id="span_001714" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001714">Tukey, J. W., 102 185, 245, 248, 293, 299, </span><em id="em_000752" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000752">xi </em><span class="text" id="span_001715" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001715">turnaround time, 136, 187, 245,</span></p>
          <p xml:space="preserve" id="p_002484" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002484">281 Walk, K. 295</p>
          <p xml:space="preserve" id="p_002485" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002485">turnover, personnel, 184 Walter, A. B., 302</p>
          <p xml:space="preserve" id="p_002486"><span class="text" id="span_001716" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001716">Turski, W. M., 213, 304 Ward, F., </span><em id="em_000753" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000753">viii</em></p>
          <p xml:space="preserve" id="p_002487"><span class="text" id="span_001717" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001717">two-cursor problem, </span><strong id="strong_000803" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000803">261 </strong><span class="text" id="span_001718" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001718">waterfall model, </span><strong id="strong_000804" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000804">264, </strong><span class="text" id="span_001719" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001719">307</span></p>
          <p xml:space="preserve" id="p_002488"><span class="text" id="span_001720" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001720">two-handed operation, 262 Watson, T. J., Jr., </span><em id="em_000754" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000754">v, xi</em></p>
          <p xml:space="preserve" id="p_002489" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002489">type, abstract data, 188 Watson, T. J., Sr., 164</p>
          <p xml:space="preserve" id="p_002490" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002490">type-checking, 220 Weinberg, G. ML, 302</p>
          <p xml:space="preserve" id="p_002491" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002491">Weinwurm, G. F., 88, 295, 296,</p>
          <p xml:space="preserve" id="p_002492" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002492">Univac computer, 215 301</p>
          <p xml:space="preserve" id="p_002493" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002493">Unix workstation, 282 Weiss, E. A., 303</p>
          <p xml:space="preserve" id="p_002494"><span class="text" id="span_001721" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001721">Unix, 187, 197, 203, 244, 284, 287, </span><em id="em_000755" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000755">Wells Apocalypse, The, </em><span class="text" id="span_001722" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001722">61</span></p>
          <p xml:space="preserve" id="p_002495" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002495">308 werewolf, 178, 180, 208</p>
          <p xml:space="preserve" id="p_002496"><span class="text" id="span_001723" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001723">University of North Carolina at Wheeler, E., 279, </span><em id="em_000756" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000756">viii</em></p>
          <p xml:space="preserve" id="p_002497"><span class="text" id="span_001724" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001724">Chapel Hill, </span><em id="em_000757" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000757">i </em><span class="text" id="span_001725" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001725">William III of England, Prince of</span></p>
          <p xml:space="preserve" id="p_002498"><span class="text" id="span_001726" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001726">user, </span><strong id="strong_000805" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000805">45, </strong><span class="text" id="span_001727" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001727">117, 121, 165, 255, </span><strong id="strong_000806" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000806">258, </strong><span class="text" id="span_001728" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001728">Orange, 207</span></p>
          <p xml:space="preserve" id="p_002499" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002499">261, 266, 268, 271, 286 Wilson, T. A., 301</p>
          <p xml:space="preserve" id="p_002500"><span class="text" id="span_001729" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001729">novice, 263 WIMP interface, 234, </span><strong id="strong_000807" smilref="The_Mythical_Man_Month_Essay00010.smil#strong_000807">260, </strong><span class="text" id="span_001730" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001730">263</span></p>
          <p xml:space="preserve" id="p_002501" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002501">power, 263 window, 260</p>
          <p xml:space="preserve" id="p_002502"><span class="text" id="span_001731" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001731">USSR Academy of Sciences, </span><em id="em_000758" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000758">xi </em><span class="text" id="span_001732" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001732">Windows NT operating system,</span></p>
          <p xml:space="preserve" id="p_002503" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002503">utility program, 34, 128, 134 234</p>
          <pagenum page="normal" id="p322" smilref="The_Mythical_Man_Month_Essay00010.smil#p322">322</pagenum>
          <p xml:space="preserve" id="p_002504" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002504">Windows operating system, 284 Xerox Palo Alto Research Center,</p>
          <p xml:space="preserve" id="p_002505" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002505">Wirth, N., 143, 245, 299, 306 260</p>
          <p xml:space="preserve" id="p_002506" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002506">Witterrongel, D. M., 301</p>
          <p xml:space="preserve" id="p_002507" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002507">Wizard-of-Oz technique, 271</p>
          <p xml:space="preserve" id="p_002508" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002508">Wolverton, R. W., 293, 297 Yourdon, E., 218, 223, 224, 305,</p>
          <p xml:space="preserve" id="p_002509"><span class="text" id="span_001733" smilref="The_Mythical_Man_Month_Essay00010.smil#span_001733">workbook, 75 </span><em id="em_000759" smilref="The_Mythical_Man_Month_Essay00010.smil#em_000759">viii</em></p>
          <p xml:space="preserve" id="p_002510" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002510">workstation, 196</p>
          <p xml:space="preserve" id="p_002511" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002511">World-Wide Web, 235, 281</p>
          <p xml:space="preserve" id="p_002512" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002512">wormhole, 287 zoom, 165, 248</p>
          <p xml:space="preserve" id="p_002513" smilref="The_Mythical_Man_Month_Essay00010.smil#p_002513">Wright, W. V., 167 Zraket, C. A., 305</p>
        </level2>
      </level1>
    </bodymatter>
  </book>
</dtbook>
