The objective of this book is to study a broad variety of important and useful 

algorithms—methods for solving problems that are suited for computer imple-
mentation. Algorithms go hand in hand with data structures—schemes for or-
ganizing data that leave them amenable to efﬁ cient processing by an algorithm. This 
chapter introduces the basic tools that we need to study algorithms and data structures. 
First, we introduce our basic programming model. All of our programs are imple-
mented using a small subset of the Java programming language plus a few of our own 
libraries for input/output and for statistical calculations. Section 1.1 is a summary of 
language constructs, features, and libraries that we use in this book. 

Next, we emphasize data abstraction, where we deﬁ ne abstract data types (ADTs) in 
the service of modular programming. In Section 1.2 we introduce the process of im-
plementing an ADT in Java, by specifying an applications programming interface (API) 
and then using the Java class mechanism to develop an implementation for use in client 
code. 

As important and useful examples, we next consider three fundamental ADTs: the 
bag, the queue, and the stack. Section 1.3 describes APIs and implementations of bags, 
queues, and stacks using arrays, resizing arrays, and linked lists that serve as models and 
starting points for algorithm implementations throughout the book. 

Performance is a central consideration in the study of algorithms. Section 1.4 de-
scribes our approach to analyzing algorithm performance. The basis of our approach is 
the scientiﬁ c method: we develop hypotheses about performance, create mathematical 
models, and run experiments to test them, repeating the process as necessary.

We conclude with a case study where we consider solutions to a connectivity problem 

that uses algorithms and data structures that implement the classic union-ﬁ nd ADT.

3

4

CHAPTER 1  ■  Fundamentals

  Algorithms  When we write a computer program, we are generally implementing a 
method that has been devised previously to solve some problem. This method is often 
independent  of  the  particular  programming  language  being  used—it  is  likely  to  be 
equally appropriate for many computers and many programming languages. It is the 
method, rather than the computer program itself, that speciﬁ es the steps that we can 
take to solve the problem. The term algorithm is used in computer science to describe 
a ﬁ nite,  deterministic, and effective problem-solving method suitable for implementa-
tion  as  a  computer  program. Algorithms  are  the  stuff  of  computer  science:  they  are 
central objects of study in the ﬁ eld.

English-language description

Compute the greatest common divisor of 
two nonnegative integers p and q as follows: 
If q is 0, the answer is p. If not, divide p by q
and take the remainder r. The answer is the
greatest common divisor of q and r.

We can deﬁ ne an algorithm by describing a procedure for solving a problem in a 
natural language, or by writing a computer program that implements the procedure, 
as  shown  at  right  for   Euclid’s  algorithm  for  ﬁ nding  the   greatest  common  divisor  of 
two numbers, a variant of which was devised 
over 2,300 years ago. If you are not familiar 
with   Euclid’s  algorithm,  you  are  encour-
aged to work Exercise 1.1.24 and Exercise 
1.1.25, perhaps after reading Section 1.1. In 
this book, we use computer programs to de-
scribe algorithms. One important reason for 
doing  so  is  that  it  makes  easier  the  task  of 
checking whether they are ﬁ nite, determin-
istic, and effective, as required. But it is also 
important to recognize that a program in a 
particular language is just one way to express 
an algorithm. The fact that many of the al-
gorithms  in  this  book  have  been  expressed 
in multiple programming languages over the 
past several decades reinforces the idea that each algorithm is a method suitable for 
implementation on any computer in any programming language.

Java-language description

public static int gcd(int p, int q)
{
   if (q == 0) return p;
   int r = p % q;
   return gcd(q, r);
}

Euclid’s algorithm

Most algorithms of interest involve organizing the data involved in the computa-
tion. Such organization leads to  data structures, which also are central objects of study 
in computer science. Algorithms and data structures go hand in hand. In this book we 
take the view that data structures exist as the byproducts or end products of algorithms 
and that we must therefore study them in order to understand the algorithms. Simple 
algorithms can give rise to complicated data structures and, conversely, complicated 
algorithms can use simple data structures. We shall study the properties of many data 
structures in this book; indeed, we might well have titled the book Algorithms and Data 
Structures.

